var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});

// ../../../../../../../usr/share/astal/gjs/gtk3/index.ts
import Astal7 from "gi://Astal?version=3.0";
import Gtk4 from "gi://Gtk?version=3.0";
import Gdk from "gi://Gdk?version=3.0";

// ../../../../../../../usr/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../../../../usr/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal2 = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal2, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../../../../../usr/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval3, callback) {
  return Astal.Time.interval(interval3, () => void callback?.());
}
function timeout(timeout2, callback) {
  return Astal.Time.timeout(timeout2, () => void callback?.());
}

// ../../../../../../../usr/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function exec(cmd) {
  return Array.isArray(cmd) ? Astal2.Process.execv(cmd) : Astal2.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../../../usr/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval3, exec2, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval3;
    this.pollTransform = transform;
    if (typeof exec2 === "function") {
      this.pollFn = exec2;
      delete this.pollExec;
    } else {
      this.pollExec = exec2;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec2, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec2;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../../../../../usr/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function hook(widget, object, signalOrCallback, callback) {
  if (typeof object.connect === "function" && callback) {
    const id = object.connect(signalOrCallback, (_, ...args) => {
      return callback(widget, ...args);
    });
    widget.connect("destroy", () => {
      object.disconnect(id);
    });
  } else if (typeof object.subscribe === "function" && typeof signalOrCallback === "function") {
    const unsub = object.subscribe((...args) => {
      signalOrCallback(widget, ...args);
    });
    widget.connect("destroy", unsub);
  }
}
function construct(widget, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key) => {
    if (key.startsWith("on")) {
      const sig = kebabify(key).split("-").slice(1).join("-");
      const handler2 = props[key];
      delete props[key];
      return [...acc, [sig, handler2]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget[setChildren](mergedChildren.get());
    widget.connect("destroy", mergedChildren.subscribe((v) => {
      widget[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget[setChildren](mergedChildren);
    }
  }
  for (const [signal2, callback] of onHandlers) {
    const sig = signal2.startsWith("notify") ? signal2.replace("-", "::") : signal2;
    if (typeof callback === "function") {
      widget.connect(sig, callback);
    } else {
      widget.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget.connect("destroy", binding.subscribe((v) => {
        widget[setChildren](v);
      }));
    }
    widget.connect("destroy", binding.subscribe((v) => {
      setProp(widget, prop, v);
    }));
    setProp(widget, prop, binding.get());
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  Object.assign(widget, props);
  setup?.(widget);
  return widget;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../../../../../usr/share/astal/gjs/gtk3/astalify.ts
import Astal4 from "gi://Astal?version=3.0";
import Gtk from "gi://Gtk?version=3.0";
import GObject from "gi://GObject";
function astalify(cls, clsName = cls.name) {
  class Widget7 extends cls {
    get css() {
      return Astal4.widget_get_css(this);
    }
    set css(css) {
      Astal4.widget_set_css(this, css);
    }
    get_css() {
      return this.css;
    }
    set_css(css) {
      this.css = css;
    }
    get className() {
      return Astal4.widget_get_class_names(this).join(" ");
    }
    set className(className) {
      Astal4.widget_set_class_names(this, className.split(/\s+/));
    }
    get_class_name() {
      return this.className;
    }
    set_class_name(className) {
      this.className = className;
    }
    get cursor() {
      return Astal4.widget_get_cursor(this);
    }
    set cursor(cursor) {
      Astal4.widget_set_cursor(this, cursor);
    }
    get_cursor() {
      return this.cursor;
    }
    set_cursor(cursor) {
      this.cursor = cursor;
    }
    get clickThrough() {
      return Astal4.widget_get_click_through(this);
    }
    set clickThrough(clickThrough) {
      Astal4.widget_set_click_through(this, clickThrough);
    }
    get_click_through() {
      return this.clickThrough;
    }
    set_click_through(clickThrough) {
      this.clickThrough = clickThrough;
    }
    get noImplicitDestroy() {
      return this[noImplicitDestroy];
    }
    set noImplicitDestroy(value) {
      this[noImplicitDestroy] = value;
    }
    set actionGroup([prefix, group]) {
      this.insert_action_group(prefix, group);
    }
    set_action_group(actionGroup) {
      this.actionGroup = actionGroup;
    }
    getChildren() {
      if (this instanceof Gtk.Bin) {
        return this.get_child() ? [this.get_child()] : [];
      } else if (this instanceof Gtk.Container) {
        return this.get_children();
      }
      return [];
    }
    setChildren(children) {
      children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
      if (this instanceof Gtk.Container) {
        for (const ch of children)
          this.add(ch);
      } else {
        throw Error(`can not add children to ${this.constructor.name}`);
      }
    }
    [setChildren](children) {
      if (this instanceof Gtk.Container) {
        for (const ch of this.getChildren()) {
          this.remove(ch);
          if (!children.includes(ch) && !this.noImplicitDestroy)
            ch?.destroy();
        }
      }
      this.setChildren(children);
    }
    toggleClassName(cn, cond = true) {
      Astal4.widget_toggle_class_name(this, cn, cond);
    }
    hook(object, signalOrCallback, callback) {
      hook(this, object, signalOrCallback, callback);
      return this;
    }
    constructor(...params) {
      super();
      const props = params[0] || {};
      props.visible ??= true;
      construct(this, props);
    }
  }
  GObject.registerClass({
    GTypeName: `Astal_${clsName}`,
    Properties: {
      "class-name": GObject.ParamSpec.string(
        "class-name",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "css": GObject.ParamSpec.string(
        "css",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "cursor": GObject.ParamSpec.string(
        "cursor",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        "default"
      ),
      "click-through": GObject.ParamSpec.boolean(
        "click-through",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      ),
      "no-implicit-destroy": GObject.ParamSpec.boolean(
        "no-implicit-destroy",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      )
    }
  }, Widget7);
  return Widget7;
}

// ../../../../../../../usr/share/astal/gjs/gtk3/app.ts
import Gtk2 from "gi://Gtk?version=3.0";
import Astal5 from "gi://Astal?version=3.0";

// ../../../../../../../usr/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth: Bluetooth2, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth2.prototype, "adapters");
  patch(Bluetooth2.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "binds");
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris, Player }) => {
  patch(Mpris.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi: Wifi2 }) => {
  patch(Wifi2.prototype, "access_points");
  patch(Wifi2.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles: PowerProfiles2 }) => {
  patch(PowerProfiles2.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp, Audio, Video }) => {
  patch(Wp.prototype, "endpoints");
  patch(Wp.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject2 from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject2.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style3, reset = false) {
      super.apply_css(style3, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons: icons2, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons2)
        app.add_icons(icons2);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../../../usr/share/astal/gjs/gtk3/app.ts
Gtk2.init(null);
var app_default = mkApp(Astal5.Application);

// ../../../../../../../usr/share/astal/gjs/gtk3/widget.ts
import Astal6 from "gi://Astal?version=3.0";
import Gtk3 from "gi://Gtk?version=3.0";
import GObject3 from "gi://GObject";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal6.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = class extends astalify(Astal6.Box) {
  static {
    GObject3.registerClass({ GTypeName: "Box" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Button = class extends astalify(Astal6.Button) {
  static {
    GObject3.registerClass({ GTypeName: "Button" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var CenterBox = class extends astalify(Astal6.CenterBox) {
  static {
    GObject3.registerClass({ GTypeName: "CenterBox" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const ch = filter(children);
    this.startWidget = ch[0] || new Gtk3.Box();
    this.centerWidget = ch[1] || new Gtk3.Box();
    this.endWidget = ch[2] || new Gtk3.Box();
  }
};
var CircularProgress = class extends astalify(Astal6.CircularProgress) {
  static {
    GObject3.registerClass({ GTypeName: "CircularProgress" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var DrawingArea = class extends astalify(Gtk3.DrawingArea) {
  static {
    GObject3.registerClass({ GTypeName: "DrawingArea" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Entry = class extends astalify(Gtk3.Entry) {
  static {
    GObject3.registerClass({ GTypeName: "Entry" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var EventBox = class extends astalify(Astal6.EventBox) {
  static {
    GObject3.registerClass({ GTypeName: "EventBox" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Icon = class extends astalify(Astal6.Icon) {
  static {
    GObject3.registerClass({ GTypeName: "Icon" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Label = class extends astalify(Astal6.Label) {
  static {
    GObject3.registerClass({ GTypeName: "Label" }, this);
  }
  constructor(props) {
    super(props);
  }
  setChildren(children) {
    this.label = String(children);
  }
};
var LevelBar = class extends astalify(Astal6.LevelBar) {
  static {
    GObject3.registerClass({ GTypeName: "LevelBar" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var MenuButton = class extends astalify(Gtk3.MenuButton) {
  static {
    GObject3.registerClass({ GTypeName: "MenuButton" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
Object.defineProperty(Astal6.Overlay.prototype, "overlays", {
  get() {
    return this.get_overlays();
  },
  set(v) {
    this.set_overlays(v);
  }
});
var Overlay = class extends astalify(Astal6.Overlay) {
  static {
    GObject3.registerClass({ GTypeName: "Overlay" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const [child, ...overlays] = filter(children);
    this.set_child(child);
    this.set_overlays(overlays);
  }
};
var Revealer = class extends astalify(Gtk3.Revealer) {
  static {
    GObject3.registerClass({ GTypeName: "Revealer" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Scrollable = class extends astalify(Astal6.Scrollable) {
  static {
    GObject3.registerClass({ GTypeName: "Scrollable" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Slider = class extends astalify(Astal6.Slider) {
  static {
    GObject3.registerClass({ GTypeName: "Slider" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Stack = class extends astalify(Astal6.Stack) {
  static {
    GObject3.registerClass({ GTypeName: "Stack" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Switch = class extends astalify(Gtk3.Switch) {
  static {
    GObject3.registerClass({ GTypeName: "Switch" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Window = class extends astalify(Astal6.Window) {
  static {
    GObject3.registerClass({ GTypeName: "Window" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};

// ../../../../../../../usr/share/astal/gjs/file.ts
import Astal8 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";
function readFile(path) {
  return Astal8.read_file(path) || "";
}
function readFileAsync(path) {
  return new Promise((resolve, reject) => {
    Astal8.read_file_async(path, (_, res) => {
      try {
        resolve(Astal8.read_file_finish(res) || "");
      } catch (error) {
        reject(error);
      }
    });
  });
}
function writeFile(path, content) {
  Astal8.write_file(path, content);
}
function monitorFile(path, callback) {
  return Astal8.monitor_file(path, (file, event) => {
    callback(file, event);
  });
}

// ../../../../../../../usr/share/astal/gjs/gobject.ts
import GObject4 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject4;
var kebabify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
function register(options2 = {}) {
  return function(cls) {
    const t = options2.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options2.Template = new TextEncoder().encode(t);
    }
    GObject4.registerClass({
      Signals: { ...cls[meta]?.Signals },
      Properties: { ...cls[meta]?.Properties },
      ...options2
    }, cls);
    delete cls[meta];
  };
}
function property(declaration = Object) {
  return function(target, prop, desc) {
    target.constructor[meta] ??= {};
    target.constructor[meta].Properties ??= {};
    const name2 = kebabify2(prop);
    if (!desc) {
      Object.defineProperty(target, prop, {
        get() {
          return this[priv]?.[prop] ?? defaultValue(declaration);
        },
        set(v) {
          if (v !== this[prop]) {
            this[priv] ??= {};
            this[priv][prop] = v;
            this.notify(name2);
          }
        }
      });
      Object.defineProperty(target, `set_${name2.replace("-", "_")}`, {
        value(v) {
          this[prop] = v;
        }
      });
      Object.defineProperty(target, `get_${name2.replace("-", "_")}`, {
        value() {
          return this[prop];
        }
      });
      target.constructor[meta].Properties[kebabify2(prop)] = pspec(name2, ParamFlags.READWRITE, declaration);
    } else {
      let flags = 0;
      if (desc.get) flags |= ParamFlags.READABLE;
      if (desc.set) flags |= ParamFlags.WRITABLE;
      target.constructor[meta].Properties[kebabify2(prop)] = pspec(name2, flags, declaration);
    }
  };
}
function signal(declaration, ...params) {
  return function(target, signal2, desc) {
    target.constructor[meta] ??= {};
    target.constructor[meta].Signals ??= {};
    const name2 = kebabify2(signal2);
    if (declaration || params.length > 0) {
      const arr = [declaration, ...params].map((v) => v.$gtype);
      target.constructor[meta].Signals[name2] = {
        param_types: arr
      };
    } else {
      target.constructor[meta].Signals[name2] = declaration || {
        param_types: []
      };
    }
    if (!desc) {
      Object.defineProperty(target, signal2, {
        value: function(...args) {
          this.emit(name2, ...args);
        }
      });
    } else {
      const og = desc.value;
      desc.value = function(...args) {
        this.emit(name2, ...args);
      };
      Object.defineProperty(target, `on_${name2.replace("-", "_")}`, {
        value: function(...args) {
          return og.apply(this, args);
        }
      });
    }
  };
}
function pspec(name2, flags, declaration) {
  if (declaration instanceof ParamSpec)
    return declaration;
  switch (declaration) {
    case String:
      return ParamSpec.string(name2, "", "", flags, "");
    case Number:
      return ParamSpec.double(name2, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
    case Boolean:
      return ParamSpec.boolean(name2, "", "", flags, false);
    case Object:
      return ParamSpec.jsobject(name2, "", "", flags);
    default:
      return ParamSpec.object(name2, "", "", flags, declaration.$gtype);
  }
}
function defaultValue(declaration) {
  if (declaration instanceof ParamSpec)
    return declaration.get_default_value();
  switch (declaration) {
    case String:
      return "";
    case Number:
      return 0;
    case Boolean:
      return false;
    case Object:
    default:
      return null;
  }
}

// src/lib/session/index.ts
function ensureDirectory(path) {
  if (!default2.file_test(path, default2.FileTest.EXISTS)) {
    Gio.File.new_for_path(path).make_directory_with_parents(null);
  }
}
function ensureJsonFile(path) {
  const file = Gio.File.new_for_path(path);
  const parent = file.get_parent();
  if (parent && !parent.query_exists(null)) {
    parent.make_directory_with_parents(null);
  }
  if (!file.query_exists(null)) {
    const stream = file.create(Gio.FileCreateFlags.NONE, null);
    stream.write_all("{}", null);
  }
}
function ensureFile(path) {
  const file = Gio.File.new_for_path(path);
  const parent = file.get_parent();
  if (parent && !parent.query_exists(null)) {
    parent.make_directory_with_parents(null);
  }
  if (!file.query_exists(null)) {
    file.create(Gio.FileCreateFlags.NONE, null);
  }
}
var dataDir = true ? "/usr/share/hyprpanel" : "/home/nfis/.cache/yay/ags-hyprpanel-git/src/HyprPanel";
Object.assign(globalThis, {
  CONFIG_DIR: `${default2.get_user_config_dir()}/hyprpanel`,
  CONFIG_FILE: `${default2.get_user_config_dir()}/hyprpanel/config.json`,
  TMP: `${default2.get_tmp_dir()}/hyprpanel`,
  USER: default2.get_user_name(),
  SRC_DIR: dataDir
});
ensureDirectory(TMP);
ensureFile(CONFIG_FILE);
ensureJsonFile(`${CONFIG_DIR}/modules.json`);
ensureFile(`${CONFIG_DIR}/modules.scss`);
app_default.add_icons(`${SRC_DIR}/assets`);

// src/lib/icons/icons.ts
var icons_default = {
  missing: "image-missing-symbolic",
  nix: {
    nix: "nix-snowflake-symbolic"
  },
  app: {
    terminal: "terminal-symbolic"
  },
  fallback: {
    executable: "application-x-executable",
    notification: "dialog-information-symbolic",
    video: "video-x-generic-symbolic",
    audio: "audio-x-generic-symbolic"
  },
  ui: {
    close: "window-close-symbolic",
    colorpicker: "color-select-symbolic",
    info: "info-symbolic",
    link: "external-link-symbolic",
    lock: "system-lock-screen-symbolic",
    menu: "open-menu-symbolic",
    refresh: "view-refresh-symbolic",
    search: "system-search-symbolic",
    settings: "emblem-system-symbolic",
    themes: "preferences-desktop-theme-symbolic",
    tick: "object-select-symbolic",
    time: "hourglass-symbolic",
    toolbars: "toolbars-symbolic",
    warning: "dialog-warning-symbolic",
    arrow: {
      right: "pan-end-symbolic",
      left: "pan-start-symbolic",
      down: "pan-down-symbolic",
      up: "pan-up-symbolic"
    }
  },
  audio: {
    mic: {
      muted: "microphone-disabled-symbolic",
      low: "microphone-sensitivity-low-symbolic",
      medium: "microphone-sensitivity-medium-symbolic",
      high: "microphone-sensitivity-high-symbolic"
    },
    volume: {
      muted: "audio-volume-muted-symbolic",
      low: "audio-volume-low-symbolic",
      medium: "audio-volume-medium-symbolic",
      high: "audio-volume-high-symbolic",
      overamplified: "audio-volume-overamplified-symbolic"
    },
    type: {
      headset: "audio-headphones-symbolic",
      speaker: "audio-speakers-symbolic",
      card: "audio-card-symbolic"
    },
    mixer: "mixer-symbolic"
  },
  powerprofile: {
    balanced: "power-profile-balanced-symbolic",
    "power-saver": "power-profile-power-saver-symbolic",
    performance: "power-profile-performance-symbolic"
  },
  asusctl: {
    profile: {
      Balanced: "power-profile-balanced-symbolic",
      Quiet: "power-profile-power-saver-symbolic",
      Performance: "power-profile-performance-symbolic"
    },
    mode: {
      Integrated: "processor-symbolic",
      Hybrid: "controller-symbolic"
    }
  },
  battery: {
    charging: "battery-flash-symbolic",
    warning: "battery-empty-symbolic"
  },
  bluetooth: {
    enabled: "bluetooth-active-symbolic",
    disabled: "bluetooth-disabled-symbolic"
  },
  brightness: {
    indicator: "display-brightness-symbolic",
    keyboard: "keyboard-brightness-symbolic",
    screen: "display-brightness-symbolic"
  },
  powermenu: {
    sleep: "weather-clear-night-symbolic",
    reboot: "system-reboot-symbolic",
    logout: "system-log-out-symbolic",
    shutdown: "system-shutdown-symbolic"
  },
  recorder: {
    recording: "media-record-symbolic"
  },
  notifications: {
    noisy: "org.gnome.Settings-notifications-symbolic",
    silent: "notifications-disabled-symbolic",
    message: "chat-bubbles-symbolic"
  },
  trash: {
    full: "user-trash-full-symbolic",
    empty: "user-trash-symbolic"
  },
  mpris: {
    shuffle: {
      enabled: "media-playlist-shuffle-symbolic",
      disabled: "media-playlist-consecutive-symbolic"
    },
    loop: {
      none: "media-playlist-repeat-symbolic",
      track: "media-playlist-repeat-song-symbolic",
      playlist: "media-playlist-repeat-symbolic"
    },
    playing: "media-playback-pause-symbolic",
    paused: "media-playback-start-symbolic",
    stopped: "media-playback-start-symbolic",
    prev: "media-skip-backward-symbolic",
    next: "media-skip-forward-symbolic"
  },
  system: {
    cpu: "org.gnome.SystemMonitor-symbolic",
    ram: "drive-harddisk-solidstate-symbolic",
    temp: "temperature-symbolic"
  },
  color: {
    dark: "dark-mode-symbolic",
    light: "light-mode-symbolic"
  },
  weather: {
    warning: "dialog-warning-symbolic",
    sunny: "weather-clear-symbolic",
    clear: "weather-clear-night-symbolic",
    partly_cloudy: "weather-few-clouds-symbolic",
    partly_cloudy_night: "weather-few-clouds-night-symbolic",
    cloudy: "weather-overcast-symbolic",
    overcast: "weather-overcast-symbolic",
    mist: "weather-overcast-symbolic",
    patchy_rain_nearby: "weather-showers-scattered-symbolic",
    patchy_rain_possible: "weather-showers-scattered-symbolic",
    patchy_snow_possible: "weather-snow-symbolic",
    patchy_sleet_possible: "weather-snow-symbolic",
    patchy_freezing_drizzle_possible: "weather-showers-scattered-symbolic",
    thundery_outbreaks_possible: "weather-overcast-symbolic",
    blowing_snow: "weather-snow-symbolic",
    blizzard: "weather-snow-symbolic",
    fog: "weather-fog-symbolic",
    freezing_fog: "weather-fog-symbolic",
    patchy_light_drizzle: "weather-showers-scattered-symbolic",
    light_drizzle: "weather-showers-symbolic",
    freezing_drizzle: "weather-showers-symbolic",
    heavy_freezing_drizzle: "weather-showers-symbolic",
    patchy_light_rain: "weather-showers-scattered-symbolic",
    light_rain: "weather-showers-symbolic",
    moderate_rain_at_times: "weather-showers-symbolic",
    moderate_rain: "weather-showers-symbolic",
    heavy_rain_at_times: "weather-showers-symbolic",
    heavy_rain: "weather-showers-symbolic",
    light_freezing_rain: "weather-showers-symbolic",
    moderate_or_heavy_freezing_rain: "weather-showers-symbolic",
    light_sleet: "weather-snow-symbolic",
    moderate_or_heavy_sleet: "weather-snow-symbolic",
    patchy_light_snow: "weather-snow-symbolic",
    light_snow: "weather-snow-symbolic",
    patchy_moderate_snow: "weather-snow-symbolic",
    moderate_snow: "weather-snow-symbolic",
    patchy_heavy_snow: "weather-snow-symbolic",
    heavy_snow: "weather-snow-symbolic",
    ice_pellets: "weather-showers-symbolic",
    light_rain_shower: "weather-showers-symbolic",
    moderate_or_heavy_rain_shower: "weather-showers-symbolic",
    torrential_rain_shower: "weather-showers-symbolic",
    light_sleet_showers: "weather-showers-symbolic",
    moderate_or_heavy_sleet_showers: "weather-showers-symbolic",
    light_snow_showers: "weather-snow-symbolic",
    moderate_or_heavy_snow_showers: "weather-snow-symbolic",
    light_showers_of_ice_pellets: "weather-showers-symbolic",
    moderate_or_heavy_showers_of_ice_pellets: "weather-showers-symbolic",
    patchy_light_rain_with_thunder: "weather-showers-scattered-symbolic",
    moderate_or_heavy_rain_with_thunder: "weather-showers-symbolic",
    moderate_or_heavy_rain_in_area_with_thunder: "weather-showers-symbolic",
    patchy_light_snow_with_thunder: "weather-snow-symbolic",
    moderate_or_heavy_snow_with_thunder: "weather-snow-symbolic"
  }
};

// src/core/errors/handler.ts
function errorHandler(error) {
  if (error instanceof Error) {
    throw new Error(error.message);
  }
  throw new Error(String(error));
}

// src/core/system/SystemUtilities.ts
import AstalNotifd from "gi://AstalNotifd";

// ../../../../../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// src/core/system/distroIcons.ts
var distroIcons = [
  ["deepin", "\uF321"],
  ["fedora", "\uF30A"],
  ["arch", "\uF303"],
  ["nixos", "\uF313"],
  ["debian", "\uF306"],
  ["opensuse-tumbleweed", "\uF314"],
  ["ubuntu", "\uF31C"],
  ["endeavouros", "\uF322"],
  ["manjaro", "\uF312"],
  ["popos", "\uF32A"],
  ["garuda", "\uF337"],
  ["zorin", "\uF32F"],
  ["mxlinux", "\uF33F"],
  ["arcolinux", "\uF346"],
  ["gentoo", "\uF30D"],
  ["artix", "\uF31F"],
  ["centos", "\uF304"],
  ["hyperbola", "\uF33A"],
  ["kubuntu", "\uF333"],
  ["mandriva", "\uF311"],
  ["xerolinux", "\uF34A"],
  ["parabola", "\uF340"],
  ["void", "\uF32E"],
  ["linuxmint", "\uF30E"],
  ["archlabs", "\uF31E"],
  ["devuan", "\uF307"],
  ["freebsd", "\uF30C"],
  ["openbsd", "\uF328"],
  ["slackware", "\uF318"]
];

// src/core/system/osInfo.ts
var distro = {
  id: default2.get_os_info("ID"),
  logo: default2.get_os_info("LOGO")
};

// src/core/system/SystemUtilities.ts
AstalNotifd.get_default();
var SystemUtilities = class _SystemUtilities {
  /*******************************************
   *                 Notify                  *
   *******************************************/
  /**
   * Sends a notification using the `notify-send` command.
   *
   * This function constructs a notification command based on the provided notification arguments and executes it asynchronously.
   * It logs an error if the notification fails to send.
   *
   * @param notifPayload The notification arguments containing summary, body, appName, iconName, urgency, timeout, category, transient, and id.
   */
  static notify(notifPayload) {
    _SystemUtilities._notify(notifPayload);
  }
  /*******************************************
   *           Depndency Checking            *
   *******************************************/
  /**
   * Checks if all specified dependencies are available
   * @param bins - The list of binaries to check
   * @returns True if all dependencies are found, false otherwise
   */
  static checkDependencies(...bins) {
    const missing = bins.filter((bin) => {
      try {
        exec(`which ${bin}`);
        return false;
      } catch (e) {
        console.debug(e);
        return true;
      }
    });
    if (missing.length > 0) {
      console.warn(Error(`missing dependencies: ${missing.join(", ")}`));
      this._notify({
        summary: "Dependencies not found!",
        body: `The following dependencies are missing: ${missing.join(", ")}`,
        iconName: icons_default.ui.warning
      });
    }
    return missing.length === 0;
  }
  /**
   * Checks if any of the given executables is installed by using `which`.
   *
   * @description Iterates through a list of executables and returns true if any are found.
   *
   * @param executables - The list of executables to check.
   */
  static checkExecutable(executables) {
    for (const exe of executables) {
      const { exitCode } = this._runCommand(`which ${exe}`);
      if (exitCode === 0) {
        return true;
      }
    }
    return false;
  }
  /**
   * Checks if any of the given libraries is installed using `pkg-config`.
   *
   * @description Uses `pkg-config --exists <lib>` to determine if a library is installed.
   *
   * @param libraries - The list of libraries to check.
   */
  static checkLibrary(libraries) {
    for (const lib of libraries) {
      const { exitCode, stdout } = this._runCommand(`sh -c "ldconfig -p | grep ${lib}"`);
      if (exitCode === 0 && stdout.length > 0) {
        return true;
      }
    }
    return false;
  }
  /**
   * Checks the status of a service.
   *
   * @description Determines if a service is ACTIVE, INSTALLED (but not running), DISABLED, or MISSING.
   *
   * @param services - The list of services to check.
   */
  static checkServiceStatus(services) {
    for (const svc of services) {
      const activeResult = _SystemUtilities.runCommand(`systemctl is-active ${svc}`);
      const activeStatus = activeResult.stdout;
      if (activeStatus === "active") {
        return "ACTIVE";
      }
      if (activeStatus === "inactive" || activeStatus === "failed") {
        const enabledResult = _SystemUtilities.runCommand(`systemctl is-enabled ${svc}`);
        const enabledStatus = enabledResult.stdout;
        if (enabledResult !== void 0 && (enabledStatus === "enabled" || enabledStatus === "static")) {
          return "INSTALLED";
        } else if (enabledResult !== void 0 && enabledStatus === "disabled") {
          return "DISABLED";
        } else {
          return "MISSING";
        }
      }
      if (activeStatus === "unknown" || activeResult.exitCode !== 0) {
        continue;
      }
    }
    return "MISSING";
  }
  /*******************************************
   *            Command Execution            *
   *******************************************/
  /**
   * Executes a bash command asynchronously
   * @param strings - The command to execute as a template string or a regular string
   * @param values - Additional values to interpolate into the command
   * @returns A promise that resolves to the command output as a string
   */
  static async bash(strings, ...values) {
    const stringsIsString = typeof strings === "string";
    const cmd = stringsIsString ? strings : strings.flatMap((str, i) => str + `${values[i] ?? ""}`).join("");
    return execAsync(["bash", "-c", cmd]).catch((err) => {
      console.error(cmd, err);
      return "";
    });
  }
  /**
   * Executes a shell command asynchronously
   * @param cmd - The command to execute as a string or an array of strings
   * @returns A promise that resolves to the command output as a string
   */
  static async sh(cmd) {
    return execAsync(cmd).catch((err) => {
      console.error(typeof cmd === "string" ? cmd : cmd.join(" "), err);
      return "";
    });
  }
  /*******************************************
   *               System Info               *
   *******************************************/
  /**
   * Retrieves the icon for the current distribution
   * @returns The icon for the current distribution as a string
   */
  static getDistroIcon() {
    const icon14 = distroIcons.find(([id]) => id === distro.id);
    return icon14 ? icon14[1] : "";
  }
  /**
   * Spawns a command line synchronously and returns the exit code and output.
   *
   * @description Executes a shell command using GLib.spawn_command_line_sync and extracts the exit code, stdout, and stderr.
   *
   * @param command - The command to execute.
   */
  static runCommand(command) {
    return this._runCommand(command);
  }
  static _runCommand(command) {
    const decoder = new TextDecoder();
    const decodeOutput = (output) => decoder.decode(output).trim();
    const [, out, err, exitCode] = default2.spawn_command_line_sync(command);
    const stdout = out ? decodeOutput(out) : "";
    const stderr = err ? decodeOutput(err) : "";
    return {
      exitCode,
      stdout,
      stderr
    };
  }
  static _notify(notifPayload) {
    let command = "notify-send";
    command += ` "${notifPayload.summary} "`;
    if (notifPayload.body !== void 0) command += ` "${notifPayload.body}" `;
    if (notifPayload.appName !== void 0) command += ` -a "${notifPayload.appName}"`;
    if (notifPayload.iconName !== void 0) command += ` -i "${notifPayload.iconName}"`;
    if (notifPayload.urgency !== void 0) command += ` -u "${notifPayload.urgency}"`;
    if (notifPayload.timeout !== void 0) command += ` -t ${notifPayload.timeout}`;
    if (notifPayload.category !== void 0) command += ` -c "${notifPayload.category}"`;
    if (notifPayload.transient !== void 0) command += " -e";
    if (notifPayload.id !== void 0) command += ` -r ${notifPayload.id}`;
    execAsync(command).catch((err) => {
      console.error(`Failed to send notification: ${err.message}`);
    });
  }
};

// src/lib/options/configManager/index.ts
var ConfigManager = class _ConfigManager {
  static _DEBOUNCE_DELAY_MS = 200;
  static _MONITOR_RESTART_DELAY_MS = 300;
  _configPath;
  _changeCallbacks = [];
  _fileMonitor = null;
  _lastChangeTime = 0;
  /**
   * Creates a new configuration manager for a specific config file
   *
   * @param configPath - Full path to the configuration JSON file
   */
  constructor(configPath) {
    this._configPath = configPath;
    this._createConfigDirectory();
    this._startConfigMonitoring();
  }
  /**
   * Updates a single option in the configuration file
   *
   * @param id - The option key to update
   * @param value - The new value to set
   */
  updateOption(id, value) {
    const config = this.readConfig();
    config[id] = value;
    this.writeConfig(config);
  }
  /**
   * Retrieves a value from a nested object using a path
   *
   * @param dataObject - The object to traverse
   * @param path - Dot-notation path (e.g., 'theme.colors.primary') or array of keys
   */
  getNestedValue(dataObject, path) {
    const pathSegments = Array.isArray(path) ? path : path.split(".");
    return this._navigateToValue(dataObject, pathSegments);
  }
  /**
   * Reads the current configuration from disk
   */
  readConfig() {
    const fileContent = readFile(this._configPath);
    if (this._isEmptyOrMissing(fileContent)) {
      return {};
    }
    return this._parseConfigSafely(fileContent);
  }
  /**
   * Writes configuration to disk
   *
   * @param config - The configuration object to save
   */
  writeConfig(config) {
    writeFile(this._configPath, JSON.stringify(config, null, 2));
  }
  /**
   * Registers a callback to be called when the config file changes
   *
   * @param callback - Function to call when config changes
   */
  onConfigChanged(callback) {
    this._changeCallbacks.push(callback);
  }
  _createConfigDirectory() {
    const directoryPath = this._getDirectoryPath();
    ensureDirectory(directoryPath);
  }
  /**
   * Extracts the directory path from the full config file path
   */
  _getDirectoryPath() {
    return this._configPath.split("/").slice(0, -1).join("/");
  }
  /**
   * Sets up file monitoring to detect external changes to the config file
   */
  _startConfigMonitoring() {
    this._createFileMonitor();
    this._overrideWriteConfigForMonitoring();
  }
  /**
   * Creates a new file monitor, canceling any existing one first
   *
   * We must recreate the monitor after writes because the file system
   * monitor can become invalid when the file is replaced during write operations
   */
  _createFileMonitor() {
    this._cleanupExistingMonitor();
    this._fileMonitor = monitorFile(this._configPath, () => {
      this._handleFileChange();
    });
  }
  _cleanupExistingMonitor() {
    if (!this._fileMonitor) return;
    try {
      this._fileMonitor.cancel();
    } catch (error) {
      console.debug("Error canceling file monitor:", error);
    }
    this._fileMonitor = null;
  }
  /**
   * Processes file change events with debouncing to prevent rapid updates
   */
  _handleFileChange() {
    const now = Date.now();
    if (this._shouldIgnoreChange(now)) {
      return;
    }
    this._lastChangeTime = now;
    this._notifyAllCallbacks();
  }
  _shouldIgnoreChange(currentTime) {
    return currentTime - this._lastChangeTime < _ConfigManager._DEBOUNCE_DELAY_MS;
  }
  /**
   * Wraps writeConfig to automatically restart the file monitor after writes
   *
   * This ensures we don't miss external changes that occur immediately after
   * our own writes, which would otherwise be lost when the monitor is invalidated
   */
  _overrideWriteConfigForMonitoring() {
    const originalWriteConfig = this.writeConfig.bind(this);
    this.writeConfig = (config) => {
      originalWriteConfig(config);
      this._restartMonitoringAfterWrite();
    };
  }
  /**
   * Schedules monitor recreation after a write operation
   *
   * The delay ensures the file system has finished processing the write
   * before we attach a new monitor, preventing race conditions
   */
  _restartMonitoringAfterWrite() {
    setTimeout(() => {
      this._createFileMonitor();
    }, _ConfigManager._MONITOR_RESTART_DELAY_MS);
  }
  _isEmptyOrMissing(content) {
    return !content || content.trim() === "";
  }
  _parseConfigSafely(content) {
    try {
      return JSON.parse(content);
    } catch (error) {
      this._handleParsingError(error);
      return {};
    }
  }
  /**
   * Recursively navigates an object to find a value at the specified path
   *
   * @param currentObject - The object to navigate
   * @param pathSegments - Array of keys representing the path
   */
  _navigateToValue(currentObject, pathSegments) {
    if (pathSegments.length === 0) {
      return currentObject;
    }
    if (!this._isValidObject(currentObject)) {
      return void 0;
    }
    const [currentKey, ...remainingPath] = pathSegments;
    const fullPath = [currentKey, ...remainingPath].join(".");
    if (fullPath in currentObject) {
      return currentObject[fullPath];
    }
    if (!(currentKey in currentObject)) {
      return void 0;
    }
    const nextValue = currentObject[currentKey];
    if (!this._isValidObject(nextValue)) {
      return void 0;
    }
    return this._navigateToValue(nextValue, remainingPath);
  }
  /**
   * Notifies all registered callbacks about config file changes
   */
  _notifyAllCallbacks() {
    this._changeCallbacks.forEach((callback) => {
      try {
        callback();
      } catch (error) {
        console.error("Error in config change callback:", error);
      }
    });
  }
  /**
   * Handles configuration parsing errors with appropriate logging and notification
   *
   * @param error - The parsing error that occurred
   */
  _handleParsingError(error) {
    const errorMessage = `Failed to load config file: ${error}`;
    console.error(errorMessage);
    SystemUtilities.notify({
      summary: "Configuration Error",
      body: errorMessage,
      iconName: icons_default.ui.warning
    });
    errorHandler(error);
  }
  /**
   * Type guard that checks if a value is a valid object for navigation
   *
   * @param value - The value to check
   */
  _isValidObject(value) {
    return typeof value === "object" && value !== null && !Array.isArray(value);
  }
};

// src/lib/options/opt/index.ts
var Opt = class extends variable_default {
  initial;
  persistent;
  _id = "";
  _configManager;
  constructor(initial, configManager2, { persistent = false } = {}) {
    super(initial);
    this.initial = initial;
    this.persistent = persistent;
    this._configManager = configManager2;
  }
  toJSON() {
    return `opt:${JSON.stringify(this.get())}`;
  }
  get value() {
    return this.get();
  }
  set value(val) {
    this.set(val);
  }
  get id() {
    return this._id;
  }
  set id(newId) {
    this._id = newId;
  }
  init(config) {
    const value = this._configManager.getNestedValue(config, this._id);
    if (value !== void 0) {
      this.set(value, { writeDisk: false });
    }
  }
  set = (value, { writeDisk = true } = {}) => {
    if (value === this.get()) {
      return;
    }
    super.set(value);
    if (writeDisk) {
      this._configManager.updateOption(this._id, value);
    }
  };
  reset(writeOptions = {}) {
    if (this.persistent) {
      return;
    }
    const hasChanged = this._hasChangedFromInitial();
    if (hasChanged) {
      this.set(this.initial, writeOptions);
      return this._id;
    }
    return;
  }
  _hasChangedFromInitial() {
    let currentValue = this.get();
    currentValue = typeof currentValue === "object" ? JSON.stringify(currentValue) : currentValue;
    let initialValue = this.initial;
    initialValue = typeof initialValue === "object" ? JSON.stringify(initialValue) : initialValue;
    return currentValue !== initialValue;
  }
};

// src/lib/options/optionRegistry/index.ts
var OptionRegistry = class {
  _options = [];
  _optionsObj;
  _configManager;
  /**
   * Creates a new option registry
   *
   * @param optionsObj - The object containing option definitions
   * @param configManager - The configuration manager to handle persistence
   */
  constructor(optionsObj, configManager2) {
    this._optionsObj = optionsObj;
    this._configManager = configManager2;
    this._initializeOptions();
  }
  /**
   * Returns all registered options as an array
   */
  toArray() {
    return this._options;
  }
  /**
   * Resets all options to their initial values
   *
   * @returns Newline-separated list of IDs for options that were reset
   */
  async reset() {
    const results = await this._resetAllOptions(this._options);
    return results.join("\n");
  }
  /**
   * Registers a callback for options matching the provided dependency prefixes
   *
   * @param optionsToWatch - Array of option ID prefixes to watch
   * @param callback - Function to call when matching options change
   */
  handler(optionsToWatch2, callback) {
    optionsToWatch2.forEach((prefix) => {
      const matchingOptions = this._options.filter((opt2) => opt2.id.startsWith(prefix));
      matchingOptions.forEach((opt2) => opt2.subscribe(callback));
    });
  }
  /**
   * Updates options based on changes to the config file
   *
   * Synchronizes in-memory option values with the current state of the config file
   */
  handleConfigFileChange() {
    const newConfig = this._configManager.readConfig();
    for (const opt2 of this._options) {
      const newVal = this._configManager.getNestedValue(newConfig, opt2.id);
      if (newVal === void 0) {
        opt2.reset({ writeDisk: false });
        continue;
      }
      const oldVal = opt2.get();
      const newValueStringified = JSON.stringify(newVal, null, 2);
      const oldValueStringified = JSON.stringify(oldVal, null, 2);
      if (newValueStringified !== oldValueStringified) {
        opt2.set(newVal, { writeDisk: false });
      }
    }
  }
  /**
   * Creates the enhanced options object with additional methods
   *
   * @returns The original options object enhanced with registry methods
   */
  createEnhancedOptions() {
    return Object.assign(this._optionsObj, {
      toArray: this.toArray.bind(this),
      reset: this.reset.bind(this),
      handler: this.handler.bind(this)
    });
  }
  /**
   * Initializes the option registry by collecting options and setting up monitoring
   */
  _initializeOptions() {
    this._options = this._collectOptions(this._optionsObj);
    this._initializeFromConfig();
    this._configManager.onConfigChanged(() => {
      this.handleConfigFileChange();
    });
  }
  /**
   * Initializes option values from the saved configuration
   */
  _initializeFromConfig() {
    const config = this._configManager.readConfig();
    for (const opt2 of this._options) {
      opt2.init(config);
    }
  }
  /**
   * Recursively collects all option instances from an object structure
   *
   * @param sourceObject - The object to search for options
   * @param path - Current path in the object hierarchy
   * @returns Array of found option instances
   */
  _collectOptions(sourceObject, path = "") {
    const result = [];
    try {
      for (const key in sourceObject) {
        const value = sourceObject[key];
        const id = path ? `${path}.${key}` : key;
        if (value instanceof Opt) {
          value.id = id;
          result.push(value);
        } else if (this._isNestedObject(value)) {
          result.push(...this._collectOptions(value, id));
        }
      }
    } catch (error) {
      errorHandler(error);
    }
    return result;
  }
  /**
   * Resets all options to their initial values with a delay between operations
   *
   * @param opts - Array of options to reset
   * @returns Array of IDs for options that were reset
   */
  async _resetAllOptions(opts) {
    const results = [];
    for (const opt2 of opts) {
      const id = opt2.reset();
      if (id !== void 0) {
        results.push(id);
        await this._sleep(50);
      }
    }
    return results;
  }
  /**
   * Simple promise-based sleep function
   *
   * @param ms - Milliseconds to sleep
   */
  _sleep(ms = 0) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  /**
   * Type guard to check if a value is a non-null object that can be traversed
   *
   * @param value - The value to check
   */
  _isNestedObject(value) {
    return typeof value === "object" && value !== null;
  }
};

// src/lib/options/index.ts
var CONFIG_PATH = CONFIG_FILE;
var configManager = new ConfigManager(CONFIG_PATH);
function opt(initial, props) {
  return new Opt(initial, configManager, props);
}
function mkOptions(optionsObj) {
  const registry2 = new OptionRegistry(optionsObj, configManager);
  return registry2.createEnhancedOptions();
}

// src/configuration/modules/theme/colors/primary.ts
var primaryColors = {
  rosewater: "#f5e0dc",
  flamingo: "#f2cdcd",
  pink: "#f5c2e7",
  mauve: "#cba6f7",
  red: "#f38ba8",
  maroon: "#eba0ac",
  peach: "#fab387",
  yellow: "#f9e2af",
  green: "#a6e3a1",
  teal: "#94e2d5",
  sky: "#89dceb",
  sapphire: "#74c7ec",
  blue: "#89b4fa",
  lavender: "#b4befe",
  text: "#cdd6f4",
  subtext1: "#bac2de",
  subtext2: "#a6adc8",
  overlay2: "#9399b2",
  overlay1: "#7f849c",
  overlay0: "#6c7086",
  surface2: "#585b70",
  surface1: "#45475a",
  surface0: "#313244",
  base2: "#242438",
  base: "#1e1e2e",
  mantle: "#181825",
  crust: "#11111b"
};

// src/configuration/modules/theme/bar/buttons/dashboard.ts
var dashboard_default = {
  background: opt(primaryColors.base2),
  enableBorder: opt(false),
  border: opt(primaryColors.yellow),
  icon: opt(primaryColors.yellow),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/workspaces.ts
var workspaces_default = {
  background: opt(primaryColors.base2),
  enableBorder: opt(false),
  smartHighlight: opt(true),
  border: opt(primaryColors.pink),
  available: opt(primaryColors.sky),
  occupied: opt(primaryColors.flamingo),
  active: opt(primaryColors.pink),
  hover: opt(primaryColors.pink),
  numbered_active_highlight_border: opt("0.2em"),
  numbered_active_highlight_padding: opt("0.2em"),
  numbered_inactive_padding: opt("0.2em"),
  numbered_active_highlighted_text_color: opt(primaryColors.mantle),
  numbered_active_underline_color: opt(primaryColors.pink),
  spacing: opt("0.5em"),
  fontSize: opt("1.2em"),
  pill: {
    radius: opt("1.9rem * 0.6"),
    height: opt("4em"),
    width: opt("4em"),
    active_width: opt("12em")
  }
};

// src/configuration/modules/theme/bar/buttons/windowtitle.ts
var windowtitle_default = {
  background: opt(primaryColors.base2),
  enableBorder: opt(false),
  border: opt(primaryColors.pink),
  text: opt(primaryColors.pink),
  icon: opt(primaryColors.pink),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/media.ts
var media_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.lavender),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.lavender),
  icon: opt(primaryColors.lavender),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/volume.ts
var volume_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.maroon),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.maroon),
  icon: opt(primaryColors.maroon),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/network.ts
var network_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.mauve),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.mauve),
  icon: opt(primaryColors.mauve),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/bluetooth.ts
var bluetooth_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.sky),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.sky),
  icon: opt(primaryColors.sky),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/systray.ts
var systray_default = {
  enableBorder: opt(false),
  customIcon: opt(primaryColors.text),
  border: opt(primaryColors.lavender),
  background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/battery.ts
var battery_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.yellow),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.yellow),
  icon: opt(primaryColors.yellow),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/clock.ts
var clock_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.pink),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.pink),
  icon: opt(primaryColors.pink),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/notifications.ts
var notifications_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.lavender),
  background: opt(primaryColors.base2),
  icon: opt(primaryColors.lavender),
  icon_background: opt(primaryColors.base2),
  total: opt(primaryColors.lavender),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/separator.ts
var separator_default = {
  color: opt(primaryColors.surface2),
  margins: opt("0.15em"),
  width: opt("0.1em")
};

// src/configuration/modules/theme/bar/buttons/worldclock.ts
var worldclock_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.yellow),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.yellow),
  icon: opt(primaryColors.yellow),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/cava.ts
var cava_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.teal),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.teal),
  icon: opt(primaryColors.teal),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/hypridle.ts
var hypridle_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.pink),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.pink),
  icon: opt(primaryColors.pink),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/hyprsunset.ts
var hyprsunset_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.peach),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.peach),
  icon: opt(primaryColors.peach),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/submap.ts
var submap_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.teal),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.teal),
  icon: opt(primaryColors.teal),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/power.ts
var power_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.red),
  background: opt(primaryColors.base2),
  icon: opt(primaryColors.red),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/weather.ts
var weather_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.lavender),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.lavender),
  icon: opt(primaryColors.lavender),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/updates.ts
var updates_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.mauve),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.mauve),
  icon: opt(primaryColors.mauve),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/kbLayout.ts
var kbLayout_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.sky),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.sky),
  icon: opt(primaryColors.sky),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/netstat.ts
var netstat_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.green),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.green),
  icon: opt(primaryColors.green),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/storage.ts
var storage_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.pink),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.pink),
  icon: opt(primaryColors.pink),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/cpuTemp.ts
var cpuTemp_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.peach),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.peach),
  icon: opt(primaryColors.peach),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/cpu.ts
var cpu_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.red),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.red),
  icon: opt(primaryColors.red),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.5em")
};

// src/configuration/modules/theme/bar/buttons/ram.ts
var ram_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.yellow),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.yellow),
  icon: opt(primaryColors.yellow),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/microphone.ts
var microphone_default = {
  enableBorder: opt(false),
  border: opt(primaryColors.green),
  background: opt(primaryColors.base2),
  text: opt(primaryColors.green),
  icon: opt(primaryColors.green),
  icon_background: opt(primaryColors.base2),
  spacing: opt("0.45em")
};

// src/configuration/modules/theme/bar/buttons/index.ts
var buttons_default = {
  style: opt("default"),
  enableBorders: opt(false),
  borderSize: opt("0.1em"),
  borderColor: opt(primaryColors.lavender),
  monochrome: opt(false),
  spacing: opt("0.25em"),
  padding_x: opt("0.7rem"),
  padding_y: opt("0.2rem"),
  y_margins: opt("0.4em"),
  radius: opt("0.3em"),
  innerRadiusMultiplier: opt("0.4"),
  opacity: opt(100),
  background_opacity: opt(100),
  background_hover_opacity: opt(100),
  background: opt(primaryColors.base2),
  icon_background: opt(primaryColors.base2),
  hover: opt(primaryColors.surface1),
  text: opt(primaryColors.lavender),
  icon: opt(primaryColors.lavender),
  dashboard: dashboard_default,
  workspaces: workspaces_default,
  windowtitle: windowtitle_default,
  media: media_default,
  volume: volume_default,
  network: network_default,
  bluetooth: bluetooth_default,
  systray: systray_default,
  battery: battery_default,
  clock: clock_default,
  notifications: notifications_default,
  separator: separator_default,
  modules: {
    microphone: microphone_default,
    ram: ram_default,
    cpu: cpu_default,
    cpuTemp: cpuTemp_default,
    storage: storage_default,
    netstat: netstat_default,
    kbLayout: kbLayout_default,
    updates: updates_default,
    weather: weather_default,
    power: power_default,
    submap: submap_default,
    hyprsunset: hyprsunset_default,
    hypridle: hypridle_default,
    cava: cava_default,
    worldclock: worldclock_default
  }
};

// src/configuration/modules/theme/bar/menus/components/border.ts
var border_default = {
  size: opt("0.13em"),
  radius: opt("0.7em"),
  color: opt(primaryColors.surface0)
};

// src/configuration/modules/theme/colors/secondary.ts
var secondaryColors = {
  text: "#cdd6f3",
  pink: "#f5c2e6",
  red: "#f38ba7",
  peach: "#fab386",
  mantle: "#181824",
  surface1: "#454759",
  surface0: "#313243",
  overlay1: "#7f849b",
  lavender: "#b4befd",
  mauve: "#cba6f6",
  green: "#a6e3a0",
  sky: "#89dcea",
  teal: "#94e2d4",
  yellow: "#f9e2ad",
  maroon: "#eba0ab",
  crust: "#11111a",
  surface2: "#585b69"
};

// src/configuration/modules/theme/colors/tertiary.ts
var tertiaryColors = {
  pink: "#f5c2e8",
  red: "#f38ba9",
  mantle: "#181826",
  surface0: "#313245",
  overlay1: "#7f849d",
  lavender: "#b4beff",
  mauve: "#cba6f8",
  green: "#a6e3a2",
  sky: "#89dcec",
  teal: "#94e2d6",
  yellow: "#f9e2ae",
  maroon: "#eba0ad",
  crust: "#11111c",
  surface2: "#585b71"
};

// src/configuration/modules/theme/bar/menus/components/buttons.ts
var buttons_default2 = {
  default: opt(primaryColors.lavender),
  active: opt(secondaryColors.pink),
  disabled: opt(tertiaryColors.surface2),
  text: opt(secondaryColors.mantle),
  radius: opt("0.4em")
};

// src/configuration/modules/theme/bar/menus/components/checkRadioButton.ts
var checkRadioButton_default = {
  background: opt(primaryColors.surface1),
  active: opt(tertiaryColors.lavender)
};

// src/configuration/modules/theme/bar/menus/components/dropdownmenu.ts
var dropdownmenu_default = {
  background: opt(primaryColors.crust),
  text: opt(primaryColors.text),
  divider: opt(primaryColors.base)
};

// src/configuration/modules/theme/bar/menus/components/iconbuttons.ts
var iconbuttons_default = {
  passive: opt(secondaryColors.text),
  active: opt(tertiaryColors.lavender)
};

// src/configuration/modules/theme/bar/menus/components/icons.ts
var icons_default2 = {
  passive: opt(primaryColors.surface2),
  active: opt(primaryColors.lavender)
};

// src/configuration/modules/theme/bar/menus/components/listitems.ts
var listitems_default = {
  passive: opt(primaryColors.text),
  active: opt(secondaryColors.lavender)
};

// src/configuration/modules/theme/bar/menus/components/popover.ts
var popover_default = {
  scaling: opt(100),
  radius: opt("0.4em"),
  text: opt(primaryColors.lavender),
  background: opt(secondaryColors.mantle),
  border: opt(secondaryColors.mantle)
};

// src/configuration/modules/theme/bar/menus/components/progressbar.ts
var progressbar_default = {
  foreground: opt(primaryColors.lavender),
  background: opt(primaryColors.surface1),
  radius: opt("0.3rem")
};

// src/configuration/modules/theme/bar/menus/components/scroller.ts
var scroller_default = {
  radius: opt("0.7em"),
  width: opt("0.25em")
};

// src/configuration/modules/theme/bar/menus/components/slider.ts
var slider_default = {
  primary: opt(primaryColors.lavender),
  background: opt(tertiaryColors.surface2),
  backgroundhover: opt(primaryColors.surface1),
  puck: opt(primaryColors.overlay0),
  slider_radius: opt("0.3rem"),
  progress_radius: opt("0.3rem")
};

// src/configuration/modules/theme/bar/menus/components/switch.ts
var switch_default = {
  enabled: opt(primaryColors.lavender),
  disabled: opt(tertiaryColors.surface0),
  puck: opt(secondaryColors.surface1),
  radius: opt("0.2em"),
  slider_radius: opt("0.2em")
};

// src/configuration/modules/theme/bar/menus/components/tooltip.ts
var tooltip_default = {
  radius: opt("0.3em"),
  background: opt(primaryColors.crust),
  text: opt(tertiaryColors.lavender)
};

// src/configuration/modules/theme/bar/menus/components/index.ts
var components_default = {
  border: border_default,
  popover: popover_default,
  listitems: listitems_default,
  icons: icons_default2,
  switch: switch_default,
  check_radio_button: checkRadioButton_default,
  buttons: buttons_default2,
  iconbuttons: iconbuttons_default,
  progressbar: progressbar_default,
  slider: slider_default,
  scroller: scroller_default,
  dropdownmenu: dropdownmenu_default,
  tooltip: tooltip_default
};

// src/configuration/modules/theme/bar/menus/modules/media.ts
var media_default2 = {
  scaling: opt(100),
  song: opt(tertiaryColors.lavender),
  artist: opt(tertiaryColors.teal),
  album: opt(tertiaryColors.pink),
  timestamp: opt(primaryColors.text),
  background: {
    color: opt(primaryColors.crust)
  },
  card: {
    color: opt(primaryColors.base),
    tint: opt(85)
  },
  border: {
    color: opt(primaryColors.surface0)
  },
  buttons: {
    inactive: opt(primaryColors.surface2),
    enabled: opt(secondaryColors.teal),
    background: opt(tertiaryColors.lavender),
    text: opt(primaryColors.crust)
  },
  slider: {
    primary: opt(primaryColors.pink),
    background: opt(tertiaryColors.surface2),
    backgroundhover: opt(primaryColors.surface1),
    puck: opt(primaryColors.overlay0)
  }
};

// src/configuration/modules/theme/bar/menus/modules/volume.ts
var volume_default2 = {
  scaling: opt(100),
  card: {
    color: opt(primaryColors.base)
  },
  background: {
    color: opt(primaryColors.crust)
  },
  border: {
    color: opt(primaryColors.surface0)
  },
  label: {
    color: opt(primaryColors.maroon)
  },
  text: opt(primaryColors.text),
  scroller: {
    color: opt(primaryColors.maroon)
  },
  listitems: {
    passive: opt(primaryColors.text),
    active: opt(secondaryColors.maroon)
  },
  iconbutton: {
    passive: opt(primaryColors.text),
    active: opt(primaryColors.maroon)
  },
  icons: {
    passive: opt(primaryColors.overlay2),
    active: opt(primaryColors.maroon)
  },
  audio_slider: {
    primary: opt(primaryColors.maroon),
    background: opt(tertiaryColors.surface2),
    backgroundhover: opt(primaryColors.surface1),
    puck: opt(primaryColors.surface2)
  },
  input_slider: {
    primary: opt(primaryColors.maroon),
    background: opt(tertiaryColors.surface2),
    backgroundhover: opt(primaryColors.surface1),
    puck: opt(primaryColors.surface2)
  }
};

// src/configuration/modules/theme/bar/menus/modules/network.ts
var network_default2 = {
  scaling: opt(100),
  card: {
    color: opt(primaryColors.base)
  },
  background: {
    color: opt(primaryColors.crust)
  },
  border: {
    color: opt(primaryColors.surface0)
  },
  label: {
    color: opt(primaryColors.mauve)
  },
  scroller: {
    color: opt(primaryColors.mauve)
  },
  text: opt(primaryColors.text),
  status: {
    color: opt(primaryColors.overlay0)
  },
  listitems: {
    passive: opt(primaryColors.text),
    active: opt(secondaryColors.mauve)
  },
  icons: {
    passive: opt(primaryColors.overlay2),
    active: opt(primaryColors.mauve)
  },
  iconbuttons: {
    passive: opt(primaryColors.text),
    active: opt(primaryColors.mauve)
  },
  switch: {
    enabled: opt(primaryColors.mauve),
    disabled: opt(tertiaryColors.surface0),
    puck: opt(secondaryColors.surface1)
  }
};

// src/configuration/modules/theme/bar/menus/modules/bluetooth.ts
var bluetooth_default2 = {
  scaling: opt(100),
  card: {
    color: opt(primaryColors.base)
  },
  background: {
    color: opt(primaryColors.crust)
  },
  border: {
    color: opt(primaryColors.surface0)
  },
  label: {
    color: opt(primaryColors.sky)
  },
  scroller: {
    color: opt(primaryColors.sky)
  },
  text: opt(primaryColors.text),
  status: opt(primaryColors.overlay0),
  switch_divider: opt(primaryColors.surface1),
  switch: {
    enabled: opt(primaryColors.sky),
    disabled: opt(tertiaryColors.surface0),
    puck: opt(secondaryColors.surface1)
  },
  listitems: {
    passive: opt(primaryColors.text),
    active: opt(secondaryColors.sky)
  },
  icons: {
    passive: opt(primaryColors.overlay2),
    active: opt(primaryColors.sky)
  },
  iconbutton: {
    passive: opt(primaryColors.text),
    active: opt(primaryColors.sky)
  }
};

// src/configuration/modules/theme/bar/menus/modules/systray.ts
var systray_default2 = {
  dropdownmenu: {
    background: opt(primaryColors.crust),
    text: opt(primaryColors.text),
    divider: opt(primaryColors.base)
  }
};

// src/configuration/modules/theme/bar/menus/modules/battery.ts
var battery_default2 = {
  scaling: opt(100),
  card: {
    color: opt(primaryColors.base)
  },
  background: {
    color: opt(primaryColors.crust)
  },
  border: {
    color: opt(primaryColors.surface0)
  },
  label: {
    color: opt(primaryColors.yellow)
  },
  text: opt(primaryColors.text),
  listitems: {
    passive: opt(secondaryColors.text),
    active: opt(primaryColors.yellow)
  },
  icons: {
    passive: opt(primaryColors.overlay2),
    active: opt(primaryColors.yellow)
  },
  slider: {
    primary: opt(primaryColors.yellow),
    background: opt(tertiaryColors.surface2),
    backgroundhover: opt(primaryColors.surface1),
    puck: opt(primaryColors.overlay0)
  }
};

// src/configuration/modules/theme/bar/menus/modules/clock.ts
var clock_default2 = {
  scaling: opt(100),
  card: {
    color: opt(primaryColors.base)
  },
  background: {
    color: opt(primaryColors.crust)
  },
  border: {
    color: opt(primaryColors.surface0)
  },
  text: opt(primaryColors.text),
  time: {
    time: opt(primaryColors.pink),
    timeperiod: opt(primaryColors.teal)
  },
  calendar: {
    yearmonth: opt(primaryColors.teal),
    weekdays: opt(primaryColors.pink),
    paginator: opt(secondaryColors.pink),
    currentday: opt(primaryColors.pink),
    days: opt(primaryColors.text),
    contextdays: opt(primaryColors.surface2)
  },
  weather: {
    icon: opt(primaryColors.pink),
    temperature: opt(primaryColors.text),
    status: opt(primaryColors.teal),
    stats: opt(primaryColors.pink),
    thermometer: {
      extremelyhot: opt(primaryColors.red),
      hot: opt(primaryColors.peach),
      moderate: opt(primaryColors.lavender),
      cold: opt(primaryColors.blue),
      extremelycold: opt(primaryColors.sky)
    },
    hourly: {
      time: opt(primaryColors.pink),
      icon: opt(primaryColors.pink),
      temperature: opt(primaryColors.pink)
    }
  }
};

// src/configuration/modules/theme/bar/menus/modules/dashboard.ts
var dashboard_default2 = {
  scaling: opt(100),
  confirmation_scaling: opt(100),
  card: {
    color: opt(primaryColors.base)
  },
  background: {
    color: opt(primaryColors.crust)
  },
  border: {
    color: opt(primaryColors.surface0)
  },
  profile: {
    name: opt(primaryColors.pink),
    size: opt("8.5em"),
    radius: opt("0.4em")
  },
  powermenu: {
    shutdown: opt(primaryColors.red),
    restart: opt(primaryColors.peach),
    logout: opt(primaryColors.green),
    sleep: opt(primaryColors.sky),
    confirmation: {
      card: opt(primaryColors.base),
      background: opt(primaryColors.crust),
      border: opt(primaryColors.surface0),
      label: opt(primaryColors.lavender),
      body: opt(primaryColors.text),
      confirm: opt(primaryColors.green),
      deny: opt(primaryColors.red),
      button_text: opt(secondaryColors.crust)
    }
  },
  shortcuts: {
    background: opt(primaryColors.lavender),
    text: opt(secondaryColors.mantle),
    recording: opt(primaryColors.green)
  },
  controls: {
    disabled: opt(primaryColors.surface2),
    wifi: {
      background: opt(primaryColors.mauve),
      text: opt(secondaryColors.mantle)
    },
    bluetooth: {
      background: opt(primaryColors.sky),
      text: opt(secondaryColors.mantle)
    },
    notifications: {
      background: opt(primaryColors.yellow),
      text: opt(secondaryColors.mantle)
    },
    volume: {
      background: opt(primaryColors.maroon),
      text: opt(secondaryColors.mantle)
    },
    input: {
      background: opt(primaryColors.pink),
      text: opt(secondaryColors.mantle)
    }
  },
  directories: {
    left: {
      top: {
        color: opt(primaryColors.pink)
      },
      middle: {
        color: opt(primaryColors.yellow)
      },
      bottom: {
        color: opt(primaryColors.maroon)
      }
    },
    right: {
      top: {
        color: opt(primaryColors.teal)
      },
      middle: {
        color: opt(primaryColors.mauve)
      },
      bottom: {
        color: opt(primaryColors.lavender)
      }
    }
  },
  monitors: {
    bar_background: opt(primaryColors.surface1),
    cpu: {
      icon: opt(primaryColors.maroon),
      bar: opt(tertiaryColors.maroon),
      label: opt(primaryColors.maroon)
    },
    ram: {
      icon: opt(primaryColors.yellow),
      bar: opt(tertiaryColors.yellow),
      label: opt(primaryColors.yellow)
    },
    gpu: {
      icon: opt(primaryColors.green),
      bar: opt(tertiaryColors.green),
      label: opt(primaryColors.green)
    },
    disk: {
      icon: opt(primaryColors.pink),
      bar: opt(tertiaryColors.pink),
      label: opt(primaryColors.pink)
    }
  }
};

// src/configuration/modules/theme/bar/menus/modules/power.ts
var power_default2 = {
  scaling: opt(90),
  radius: opt("0.4em"),
  background: {
    color: opt(primaryColors.crust)
  },
  border: {
    color: opt(primaryColors.surface0)
  },
  buttons: {
    shutdown: {
      background: opt(primaryColors.base),
      icon_background: opt(secondaryColors.red),
      text: opt(primaryColors.red),
      icon: opt(secondaryColors.mantle)
    },
    restart: {
      background: opt(primaryColors.base),
      icon_background: opt(secondaryColors.peach),
      text: opt(primaryColors.peach),
      icon: opt(secondaryColors.mantle)
    },
    logout: {
      background: opt(primaryColors.base),
      icon_background: opt(secondaryColors.green),
      text: opt(primaryColors.green),
      icon: opt(secondaryColors.mantle)
    },
    sleep: {
      background: opt(primaryColors.base),
      icon_background: opt(secondaryColors.sky),
      text: opt(primaryColors.sky),
      icon: opt(secondaryColors.mantle)
    }
  }
};

// src/configuration/modules/theme/bar/menus/modules/notifications.ts
var notifications_default2 = {
  scaling: opt(100),
  height: opt("58em"),
  label: opt(primaryColors.lavender),
  no_notifications_label: opt(primaryColors.surface0),
  background: opt(primaryColors.crust),
  card: opt(primaryColors.base),
  border: opt(primaryColors.surface0),
  switch_divider: opt(primaryColors.surface1),
  clear: opt(primaryColors.red),
  switch: {
    enabled: opt(primaryColors.lavender),
    disabled: opt(tertiaryColors.surface0),
    puck: opt(secondaryColors.surface1)
  },
  pager: {
    show: opt(true),
    background: opt(primaryColors.crust),
    button: opt(primaryColors.lavender),
    label: opt(primaryColors.overlay2)
  },
  scrollbar: {
    color: opt(primaryColors.lavender),
    width: opt("0.35em"),
    radius: opt("0.2em")
  }
};

// src/configuration/modules/theme/bar/menus/index.ts
var menus_default = {
  monochrome: opt(false),
  background: opt(primaryColors.crust),
  opacity: opt(100),
  cards: opt(primaryColors.base),
  card_radius: opt("0.4em"),
  enableShadow: opt(false),
  shadow: opt("0px 0px 3px 1px #16161e"),
  shadowMargins: opt("5px 5px"),
  text: opt(primaryColors.text),
  dimtext: opt(primaryColors.surface2),
  feinttext: opt(primaryColors.surface0),
  label: opt(primaryColors.lavender),
  ...components_default,
  menu: {
    media: media_default2,
    volume: volume_default2,
    network: network_default2,
    bluetooth: bluetooth_default2,
    systray: systray_default2,
    battery: battery_default2,
    clock: clock_default2,
    dashboard: dashboard_default2,
    power: power_default2,
    notifications: notifications_default2
  }
};

// src/configuration/modules/theme/bar/index.ts
var bar_default = {
  scaling: opt(100),
  floating: opt(false),
  location: opt("top"),
  layer: opt("top"),
  margin_top: opt("0.5em"),
  opacity: opt(100),
  enableShadow: opt(false),
  shadow: opt("0px 1px 2px 1px #16161e"),
  shadowMargins: opt("0px 0px 4px 0px"),
  margin_bottom: opt("0em"),
  margin_sides: opt("0.5em"),
  border_radius: opt("0.4em"),
  outer_spacing: opt("1.6em"),
  label_spacing: opt("0.5em"),
  transparent: opt(false),
  dropdownGap: opt("2.9em"),
  background: opt(primaryColors.crust),
  border: {
    location: opt("none"),
    width: opt("0.15em"),
    color: opt(primaryColors.lavender)
  },
  buttons: buttons_default,
  menus: menus_default
};

// src/configuration/modules/theme/general/index.ts
var general_default = {
  tooltip: {
    scaling: opt(100)
  },
  matugen: opt(false),
  matugen_settings: {
    mode: opt("dark"),
    scheme_type: opt("tonal-spot"),
    variation: opt("standard_1"),
    contrast: opt(0)
  },
  font: {
    size: opt("1.2rem"),
    name: opt("Ubuntu Nerd Font"),
    style: opt("normal"),
    label: opt("Ubuntu Nerd Font"),
    weight: opt(600)
  }
};

// src/configuration/modules/theme/notification/index.ts
var notification_default = {
  scaling: opt(100),
  background: opt(tertiaryColors.mantle),
  opacity: opt(100),
  actions: {
    background: opt(secondaryColors.lavender),
    text: opt(primaryColors.mantle)
  },
  label: opt(primaryColors.lavender),
  border: opt(secondaryColors.surface0),
  border_radius: opt("0.6em"),
  enableShadow: opt(false),
  shadow: opt("0px 1px 2px 1px #16161e"),
  shadowMargins: opt("4px 4px"),
  time: opt(secondaryColors.overlay1),
  text: opt(primaryColors.text),
  labelicon: opt(primaryColors.lavender),
  close_button: {
    background: opt(secondaryColors.red),
    label: opt(primaryColors.crust)
  }
};

// src/configuration/modules/theme/osd/index.ts
var osd_default = {
  scaling: opt(100),
  duration: opt(2500),
  enable: opt(true),
  orientation: opt("vertical"),
  opacity: opt(100),
  border: {
    size: opt("0em"),
    color: opt(primaryColors.lavender)
  },
  bar_container: opt(primaryColors.crust),
  icon_container: opt(tertiaryColors.lavender),
  bar_color: opt(tertiaryColors.lavender),
  bar_empty_color: opt(primaryColors.surface0),
  bar_overflow_color: opt(secondaryColors.red),
  icon: opt(primaryColors.crust),
  label: opt(tertiaryColors.lavender),
  monitor: opt(0),
  active_monitor: opt(true),
  radius: opt("0.4em"),
  margins: opt("7px 7px 7px 7px"),
  enableShadow: opt(false),
  shadow: opt("0px 0px 3px 2px #16161e"),
  location: opt("right"),
  muted_zero: opt(false)
};

// src/configuration/modules/theme/index.ts
var theme_default = {
  ...general_default,
  notification: notification_default,
  osd: osd_default,
  bar: bar_default
};

// src/configuration/modules/config/bar/battery/index.ts
var battery_default3 = {
  label: opt(true),
  hideLabelWhenFull: opt(false),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/bluetooth/index.ts
var bluetooth_default3 = {
  label: opt(true),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/cava/index.ts
var cava_default2 = {
  showIcon: opt(true),
  icon: opt("\uF001"),
  spaceCharacter: opt("\u200A"),
  barCharacters: opt(["\u2581", "\u2582", "\u2583", "\u2584", "\u2585", "\u2586", "\u2587", "\u2588"]),
  showActiveOnly: opt(false),
  bars: opt(10),
  channels: opt(2),
  framerate: opt(60),
  samplerate: opt(44100),
  autoSensitivity: opt(true),
  lowCutoff: opt(50),
  highCutoff: opt(1e4),
  noiseReduction: opt(0.77),
  stereo: opt(false),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/clock/index.ts
var clock_default3 = {
  icon: opt("\u{F0E17}"),
  showIcon: opt(true),
  showTime: opt(true),
  format: opt("%a %b %d  %I:%M:%S %p"),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/cpu/index.ts
var cpu_default2 = {
  icon: opt("\uF4BC"),
  label: opt(true),
  round: opt(true),
  pollingInterval: opt(2e3),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/cpuTemp/index.ts
var cpuTemp_default2 = {
  icon: opt("\uF2C7"),
  sensor: opt("auto"),
  label: opt(true),
  round: opt(true),
  showUnit: opt(true),
  unit: opt("metric"),
  pollingInterval: opt(2e3),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/hypridle/index.ts
var hypridle_default2 = {
  label: opt(true),
  onIcon: opt("\u{F04B3}"),
  offIcon: opt("\u{F04B2}"),
  onLabel: opt("On"),
  offLabel: opt("Off"),
  pollingInterval: opt(1e3 * 2),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/hyprsunset/index.ts
var hyprsunset_default2 = {
  temperature: opt("6000k"),
  label: opt(true),
  onIcon: opt("\u{F1A4C}"),
  offIcon: opt("\u{F06E8}"),
  onLabel: opt("On"),
  offLabel: opt("Off"),
  pollingInterval: opt(1e3 * 2),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/kbLayout/index.ts
var kbLayout_default2 = {
  label: opt(true),
  labelType: opt("code"),
  icon: opt("\u{F030C}"),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/launcher/index.ts
var launcher_default = {
  icon: opt("\u{F08C7}"),
  autoDetectIcon: opt(false),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/layouts/index.ts
var layouts_default = opt({
  "1": {
    left: ["dashboard", "workspaces", "windowtitle"],
    middle: ["media"],
    right: ["volume", "clock", "notifications"]
  },
  "2": {
    left: ["dashboard", "workspaces", "windowtitle"],
    middle: ["media"],
    right: ["volume", "clock", "notifications"]
  },
  "0": {
    left: ["dashboard", "workspaces", "windowtitle"],
    middle: ["media"],
    right: ["volume", "network", "bluetooth", "battery", "systray", "clock", "notifications"]
  }
});

// src/configuration/modules/config/bar/media/index.ts
var media_default3 = {
  format: opt("{artist: - }{title}"),
  truncation: opt(true),
  show_label: opt(true),
  truncation_size: opt(30),
  show_active_only: opt(false),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/microphone/index.ts
var microphone_default2 = {
  label: opt(true),
  mutedIcon: opt("\u{F036D}"),
  unmutedIcon: opt("\u{F036C}"),
  leftClick: opt("menu:audio"),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/netstat/index.ts
var netstat_default2 = {
  label: opt(true),
  networkInterface: opt(""),
  dynamicIcon: opt(false),
  icon: opt("\u{F059F}"),
  networkInLabel: opt("\u2193"),
  networkOutLabel: opt("\u2191"),
  round: opt(true),
  labelType: opt("full"),
  rateUnit: opt("auto"),
  pollingInterval: opt(2e3),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt("")
};

// src/configuration/modules/config/bar/network/index.ts
var network_default3 = {
  truncation: opt(true),
  showWifiInfo: opt(false),
  truncation_size: opt(7),
  label: opt(true),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/notifications/index.ts
var notifications_default3 = {
  show_total: opt(false),
  hideCountWhenZero: opt(false),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/power/index.ts
var power_default3 = {
  icon: opt("\uF011"),
  showLabel: opt(true),
  leftClick: opt("menu:powerdropdown"),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/ram/index.ts
var ram_default2 = {
  icon: opt("\uEFC5"),
  label: opt(true),
  labelType: opt("percentage"),
  round: opt(true),
  pollingInterval: opt(2e3),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt("")
};

// src/configuration/modules/config/bar/storage/index.ts
var storage_default2 = {
  paths: opt(["/"]),
  label: opt(true),
  icon: opt("\u{F02CA}"),
  round: opt(false),
  units: opt("auto"),
  labelType: opt("percentage"),
  tooltipStyle: opt("percentage-bar"),
  pollingInterval: opt(2e3),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt("")
};

// src/configuration/modules/config/bar/submap/index.ts
var submap_default2 = {
  label: opt(true),
  showSubmapName: opt(true),
  enabledIcon: opt("\u{F0310}"),
  disabledIcon: opt("\u{F030C}"),
  enabledText: opt("Submap On"),
  disabledText: opt("Submap off"),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/systray/index.ts
var systray_default3 = {
  ignore: opt([]),
  customIcons: opt({})
};

// src/configuration/modules/config/bar/updates/index.ts
var updates_default2 = {
  updateCommand: opt(`${SRC_DIR}/scripts/checkUpdates.sh -arch`),
  updateTooltipCommand: opt(`${SRC_DIR}/scripts/checkUpdates.sh -arch -tooltip`),
  extendedTooltip: opt(false),
  label: opt(true),
  padZero: opt(true),
  autoHide: opt(false),
  icon: {
    pending: opt("\u{F03D7}"),
    updated: opt("\u{F03D6}")
  },
  pollingInterval: opt(1e3 * 60 * 60 * 6),
  leftClick: opt(`$TERMINAL -e ${SRC_DIR}/scripts/runUpdates.sh -arch`),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/volume/index.ts
var volume_default3 = {
  label: opt(true),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt("hyprpanel vol +5"),
  scrollDown: opt("hyprpanel vol -5")
};

// src/configuration/modules/config/bar/weather/index.ts
var weather_default2 = {
  label: opt(true),
  unit: opt("imperial"),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/windowtitle/index.ts
var windowtitle_default2 = {
  custom_title: opt(true),
  title_map: opt([]),
  class_name: opt(true),
  label: opt(true),
  icon: opt(true),
  truncation: opt(true),
  truncation_size: opt(50),
  leftClick: opt(""),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt("")
};

// src/configuration/modules/config/bar/workspaces/index.ts
var workspaces_default2 = {
  show_icons: opt(false),
  showAllActive: opt(true),
  ignored: opt(""),
  show_numbered: opt(false),
  showWsIcons: opt(false),
  showApplicationIcons: opt(false),
  applicationIconOncePerWorkspace: opt(true),
  applicationIconMap: opt({}),
  applicationIconFallback: opt("\u{F08C6}"),
  applicationIconEmptyWorkspace: opt("\uF51D"),
  numbered_active_indicator: opt("underline"),
  icons: {
    available: opt("\uF10C"),
    active: opt("\uF111"),
    occupied: opt("\uF192")
  },
  workspaceIconMap: opt({}),
  workspaces: opt(5),
  spacing: opt(1),
  monitorSpecific: opt(true),
  workspaceMask: opt(false),
  reverse_scroll: opt(false),
  scroll_speed: opt(5)
};

// src/configuration/modules/config/bar/worldclock/index.ts
var worldclock_default2 = {
  icon: opt("\u{F124A}"),
  showIcon: opt(true),
  format: opt("%I:%M:%S %p %Z"),
  formatDiffDate: opt("%a %b %d  %I:%M:%S %p %Z"),
  divider: opt(" \uF444 "),
  leftClick: opt("menu:calendar"),
  rightClick: opt(""),
  middleClick: opt(""),
  scrollUp: opt(""),
  scrollDown: opt(""),
  tz: opt(["America/New_York", "Europe/Paris", "Asia/Tokyo"])
};

// src/configuration/modules/config/bar/index.ts
var bar_default2 = {
  scrollSpeed: opt(5),
  autoHide: opt("never"),
  layouts: layouts_default,
  launcher: launcher_default,
  windowtitle: windowtitle_default2,
  workspaces: workspaces_default2,
  volume: volume_default3,
  network: network_default3,
  bluetooth: bluetooth_default3,
  battery: battery_default3,
  systray: systray_default3,
  clock: clock_default3,
  media: media_default3,
  notifications: notifications_default3,
  customModules: {
    scrollSpeed: opt(5),
    microphone: microphone_default2,
    ram: ram_default2,
    cpu: cpu_default2,
    cpuTemp: cpuTemp_default2,
    storage: storage_default2,
    netstat: netstat_default2,
    kbLayout: kbLayout_default2,
    updates: updates_default2,
    submap: submap_default2,
    weather: weather_default2,
    power: power_default3,
    hyprsunset: hyprsunset_default2,
    hypridle: hypridle_default2,
    cava: cava_default2,
    worldclock: worldclock_default2
  }
};

// src/configuration/modules/config/notifications/index.ts
var notifications_default4 = {
  position: opt("top right"),
  ignore: opt([]),
  displayedTotal: opt(10),
  monitor: opt(0),
  active_monitor: opt(true),
  showActionsOnHover: opt(false),
  timeout: opt(7e3),
  autoDismiss: opt(false),
  cache_actions: opt(true),
  clearDelay: opt(100)
};

// src/configuration/modules/config/menus/clock/index.ts
var clock_default4 = {
  time: {
    military: opt(false),
    hideSeconds: opt(false)
  },
  weather: {
    enabled: opt(true),
    interval: opt(6e4),
    unit: opt("imperial"),
    location: opt("Los Angeles"),
    key: opt("")
  }
};

// src/configuration/modules/config/menus/dashboard/index.ts
var dashboard_default3 = {
  powermenu: {
    confirmation: opt(true),
    sleep: opt("systemctl suspend"),
    reboot: opt("systemctl reboot"),
    logout: opt("hyprctl dispatch exit"),
    shutdown: opt("systemctl poweroff"),
    avatar: {
      image: opt("~/.face.icon"),
      name: opt("system")
    }
  },
  stats: {
    enabled: opt(true),
    interval: opt(2e3),
    enable_gpu: opt(false)
  },
  recording: {
    path: opt("$HOME/Videos/Screencasts")
  },
  controls: {
    enabled: opt(true)
  },
  shortcuts: {
    enabled: opt(true),
    left: {
      shortcut1: {
        icon: opt("\u{F01E9}"),
        tooltip: opt("Microsoft Edge"),
        command: opt("microsoft-edge-stable")
      },
      shortcut2: {
        icon: opt("\uF1BC"),
        tooltip: opt("Spotify"),
        command: opt("spotify-launcher")
      },
      shortcut3: {
        icon: opt("\uF1FF"),
        tooltip: opt("Discord"),
        command: opt("discord")
      },
      shortcut4: {
        icon: opt("\uE68F"),
        tooltip: opt("Search Apps"),
        command: opt("rofi -show drun")
      }
    },
    right: {
      shortcut1: {
        icon: opt("\uF1FB"),
        tooltip: opt("Color Picker"),
        command: opt("sleep 0.5 && hyprpicker -a")
      },
      shortcut3: {
        icon: opt("\u{F0100}"),
        tooltip: opt("Screenshot"),
        command: opt(`bash -c "${SRC_DIR}/scripts/snapshot.sh"`)
      }
    }
  },
  directories: {
    enabled: opt(true),
    left: {
      directory1: {
        label: opt("\u{F024D} Downloads"),
        command: opt('bash -c "xdg-open $HOME/Downloads/"')
      },
      directory2: {
        label: opt("\u{F024F} Videos"),
        command: opt('bash -c "xdg-open $HOME/Videos/"')
      },
      directory3: {
        label: opt("\u{F069D} Projects"),
        command: opt('bash -c "xdg-open $HOME/Projects/"')
      }
    },
    right: {
      directory1: {
        label: opt("\u{F19F6} Documents"),
        command: opt('bash -c "xdg-open $HOME/Documents/"')
      },
      directory2: {
        label: opt("\u{F024F} Pictures"),
        command: opt('bash -c "xdg-open $HOME/Pictures/"')
      },
      directory3: {
        label: opt("\u{F10B5} Home"),
        command: opt('bash -c "xdg-open $HOME/"')
      }
    }
  }
};

// src/configuration/modules/config/menus/media/index.ts
var media_default4 = {
  hideAuthor: opt(false),
  hideAlbum: opt(false),
  displayTime: opt(false),
  displayTimeTooltip: opt(false),
  noMediaText: opt("No Media Currently Playing")
};

// src/configuration/modules/config/menus/power/index.ts
var power_default4 = {
  lowBatteryNotification: opt(false),
  lowBatteryThreshold: opt(20),
  lowBatteryNotificationTitle: opt("Warning: Low battery"),
  lowBatteryNotificationText: opt(
    "Your battery is running low ($POWER_LEVEL %).\n\nPlease plug in your charger."
  ),
  showLabel: opt(true),
  confirmation: opt(true),
  sleep: opt("systemctl suspend"),
  reboot: opt("systemctl reboot"),
  logout: opt("hyprctl dispatch exit"),
  shutdown: opt("systemctl poweroff")
};

// src/configuration/modules/config/menus/volume/index.ts
var volume_default4 = {
  raiseMaximumVolume: opt(false)
};

// src/configuration/modules/config/menus/index.ts
var menus_default2 = {
  transition: opt("crossfade"),
  transitionTime: opt(200),
  media: media_default4,
  volume: volume_default4,
  power: power_default4,
  dashboard: dashboard_default3,
  clock: clock_default4
};

// src/configuration/modules/config/index.ts
var config_default = {
  scalingPriority: opt("gdk"),
  terminal: opt("$TERM"),
  tear: opt(false),
  wallpaper: {
    enable: opt(true),
    image: opt(""),
    pywal: opt(false)
  },
  hyprpanel: {
    restartAgs: opt(true),
    restartCommand: opt("hyprpanel -q; hyprpanel")
  },
  dummy: opt(true),
  bar: bar_default2,
  menus: menus_default2,
  notifications: notifications_default4
};

// src/configuration/index.ts
var options = mkOptions({
  theme: theme_default,
  ...config_default
});
var configuration_default = options;

// src/lib/path/helpers.ts
function normalizeToAbsolutePath(path) {
  if (path.charAt(0) === "~") {
    return path.replace("~", default2.get_home_dir());
  }
  return path;
}

// src/services/wallpaper/index.ts
import AstalHyprland from "gi://AstalHyprland?version=0.1";

// src/services/wallpaper/SwwwDaemon.ts
var SwwwDaemon = class {
  _isRunning = false;
  /**
   * Gets whether the daemon is currently running
   */
  get isRunning() {
    return this._isRunning;
  }
  /**
   * Checks if swww is installed on the system
   */
  isInstalled() {
    return SystemUtilities.checkDependencies("swww");
  }
  /**
   * Starts the swww daemon if not already running
   */
  async start() {
    if (!this.isInstalled()) {
      console.warn("swww is not installed, cannot start daemon");
      return false;
    }
    const isAlreadyRunning = await this._checkIfRunning();
    if (isAlreadyRunning) {
      console.debug("swww-daemon is already running...");
      this._isRunning = true;
      return true;
    }
    return await this._startNewDaemon();
  }
  /**
   * Stops the swww daemon
   */
  async stop() {
    try {
      await execAsync("swww kill");
      this._isRunning = false;
    } catch (err) {
      await this._handleStopError(err);
    }
  }
  /**
   * Checks if the swww daemon is currently running
   */
  async _checkIfRunning() {
    try {
      await execAsync("swww query");
      return true;
    } catch {
      return false;
    }
  }
  /**
   * Starts a new swww daemon instance
   */
  async _startNewDaemon() {
    try {
      await execAsync("swww-daemon");
      const ready = await this._waitForReady();
      this._isRunning = ready;
      if (!ready) {
        await this._cleanupFailedDaemon();
        return false;
      }
      return ready;
    } catch (err) {
      console.error("Failed to start swww-daemon:", err);
      this._isRunning = false;
      return false;
    }
  }
  /**
   * Cleans up a failed daemon start attempt
   */
  async _cleanupFailedDaemon() {
    try {
      await execAsync("swww kill");
    } catch {
    }
    console.error("swww-daemon failed to become ready");
  }
  /**
   * Handles errors when stopping the daemon
   */
  async _handleStopError(err) {
    const wasRunning = await this._checkIfRunning();
    if (wasRunning) {
      console.error("[SwwwDaemon] Failed to stop swww-daemon:", err);
    } else {
      console.debug("[SwwwDaemon] swww-daemon was not running");
    }
    this._isRunning = false;
  }
  /**
   * Waits for swww daemon to be ready using exponential backoff
   */
  async _waitForReady() {
    const maxAttempts = 10;
    let delay = 50;
    for (let i = 0; i < maxAttempts; i++) {
      try {
        await execAsync("swww query");
        return true;
      } catch {
        if (i < maxAttempts - 1) {
          await new Promise((resolve) => setTimeout(resolve, delay));
          delay = Math.min(delay * 2, 1e3);
        }
      }
    }
    return false;
  }
};

// src/services/wallpaper/index.ts
var hyprlandService = AstalHyprland.get_default();
var WP = `${default2.get_home_dir()}/.config/background`;
var WallpaperService = class extends GObject4.Object {
  _blockMonitor = false;
  _daemon = new SwwwDaemon();
  constructor() {
    super();
    this.wallpaper = WP;
    monitorFile(WP, () => {
      if (!this._blockMonitor && this._daemon.isRunning) {
        this._wallpaper();
      }
    });
    configuration_default.wallpaper.enable.subscribe(async (isWallpaperEnabled) => {
      if (isWallpaperEnabled) {
        const started = await this._daemon.start();
        if (started) {
          this._wallpaper();
        }
      } else {
        await this._daemon.stop();
      }
    });
    if (configuration_default.wallpaper.enable.get()) {
      this._daemon.start().then((started) => {
        if (started) {
          this._wallpaper();
        }
      });
    }
  }
  /**
   * Gets the singleton instance of WallpaperService
   *
   * @returns The WallpaperService instance
   */
  static getInstance() {
    if (this._instance === void 0) {
      this._instance = new WallpaperService();
    }
    return this._instance;
  }
  /**
   * Sets a new wallpaper from the specified file path
   *
   * @param path - Path to the wallpaper image file
   */
  setWallpaper(path) {
    this._setWallpaper(path);
  }
  /**
   * Checks if the wallpaper service is currently running
   *
   * @returns Whether swww daemon is active
   */
  isRunning() {
    return this._daemon.isRunning;
  }
  /**
   * Applies the wallpaper using swww with a transition effect from cursor position
   */
  _wallpaper() {
    if (!this._daemon.isRunning) {
      console.warn("Cannot set wallpaper: swww-daemon is not running");
      return;
    }
    try {
      const cursorPosition = hyprlandService.message("cursorpos");
      const transitionCmd = [
        "swww",
        "img",
        "--invert-y",
        "--transition-type",
        "grow",
        "--transition-duration",
        "1.5",
        "--transition-fps",
        "60",
        "--transition-pos",
        cursorPosition.replace(" ", ""),
        `"${WP}"`
      ].join(" ");
      SystemUtilities.sh(transitionCmd).then(() => {
        this.notify("wallpaper");
        this.emit("changed", true);
      }).catch((err) => {
        console.error("Error setting wallpaper:", err);
      });
    } catch (err) {
      console.error("Error getting cursor position:", err);
    }
  }
  /**
   * Copies wallpaper to config location and applies it
   *
   * @param path - Path to the wallpaper image file
   */
  async _setWallpaper(path) {
    this._blockMonitor = true;
    try {
      await SystemUtilities.sh(`cp "${path}" "${WP}"`);
      this._wallpaper();
    } catch (error) {
      console.error("Error setting wallpaper:", error);
    } finally {
      this._blockMonitor = false;
    }
  }
};
__publicField(WallpaperService, "_instance");
__decorateClass([
  property(String)
], WallpaperService.prototype, "wallpaper", 2);
__decorateClass([
  signal(Boolean)
], WallpaperService.prototype, "changed", 2);
WallpaperService = __decorateClass([
  register({ GTypeName: "Wallpaper" })
], WallpaperService);

// src/lib/validation/images.ts
import GdkPixbuf from "gi://GdkPixbuf";
function isAnImage(imgFilePath) {
  try {
    GdkPixbuf.Pixbuf.new_from_file(normalizeToAbsolutePath(imgFilePath));
    return true;
  } catch (error) {
    console.info(error);
    return false;
  }
}

// src/style/optionsTrackers.ts
var wallpaperService = WallpaperService.getInstance();
var { matugen } = configuration_default.theme;
var ensureMatugenWallpaper = () => {
  const wallpaperPath = configuration_default.wallpaper.image.get();
  if (matugen.get() && (!wallpaperPath.length || !isAnImage(normalizeToAbsolutePath(wallpaperPath)))) {
    SystemUtilities.notify({
      summary: "Matugen Failed",
      body: "Please select a wallpaper in 'Theming > General' first.",
      iconName: icons_default.ui.warning
    });
    matugen.set(false);
  }
};
var initializeTrackers = (resetCssFunc) => {
  matugen.subscribe(() => {
    ensureMatugenWallpaper();
  });
  wallpaperService.connect("changed", () => {
    console.info("Wallpaper changed, regenerating Matugen colors...");
    if (configuration_default.theme.matugen.get()) {
      resetCssFunc();
    }
  });
  configuration_default.wallpaper.image.subscribe(() => {
    if (!wallpaperService.isRunning() && configuration_default.theme.matugen.get() || !configuration_default.wallpaper.enable.get()) {
      console.info("Wallpaper path changed, regenerating Matugen colors...");
      resetCssFunc();
    }
    if (configuration_default.wallpaper.pywal.get() && SystemUtilities.checkDependencies("wal")) {
      const wallpaperPath = configuration_default.wallpaper.image.get();
      SystemUtilities.bash(`wal -i "${wallpaperPath}"`);
    }
  });
};

// src/style/utils/hotReload.ts
var initializeHotReload = async () => {
  const monitorList = [
    `${SRC_DIR}/src/style/main.scss`,
    `${SRC_DIR}/src/style/scss/bar`,
    `${SRC_DIR}/src/style/scss/common`,
    `${SRC_DIR}/src/style/scss/menus`,
    `${SRC_DIR}/src/style/scss/notifications`,
    `${SRC_DIR}/src/style/scss/osd`,
    `${SRC_DIR}/src/style/scss/settings`,
    `${SRC_DIR}/src/style/scss/colors.scss`,
    `${SRC_DIR}/src/style/scss/highlights.scss`,
    `${CONFIG_DIR}/modules.scss`
  ];
  monitorList.forEach((file) => monitorFile(file, themeManager.applyCss.bind(themeManager)));
};

// src/services/matugen/variations.ts
var getMatugenVariations = (matugenColors, variation) => {
  const matVtns = {
    standard_1: {
      rosewater: matugenColors.secondary,
      flamingo: matugenColors.secondary,
      pink: matugenColors.tertiary,
      mauve: matugenColors.primary,
      red: matugenColors.tertiary,
      maroon: matugenColors.primary,
      peach: matugenColors.tertiary,
      yellow: matugenColors.secondary,
      green: matugenColors.primary,
      teal: matugenColors.secondary,
      sky: matugenColors.secondary,
      sapphire: matugenColors.primary,
      blue: matugenColors.primary,
      lavender: matugenColors.primary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.primary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.tertiary,
      peach2: matugenColors.tertiary,
      pink2: matugenColors.tertiary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.primary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.primary,
      mauve2: matugenColors.primary,
      green2: matugenColors.primary,
      surface2_2: matugenColors.surface,
      sky2: matugenColors.secondary,
      teal2: matugenColors.secondary,
      yellow2: matugenColors.secondary,
      pink3: matugenColors.tertiary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.primary,
      mauve3: matugenColors.primary,
      green3: matugenColors.primary,
      sky3: matugenColors.secondary,
      teal3: matugenColors.secondary,
      yellow3: matugenColors.secondary,
      maroon3: matugenColors.primary,
      crust3: matugenColors.surface_dim
    },
    standard_2: {
      rosewater: matugenColors.primary,
      flamingo: matugenColors.primary,
      pink: matugenColors.tertiary,
      mauve: matugenColors.secondary,
      red: matugenColors.tertiary,
      maroon: matugenColors.secondary,
      peach: matugenColors.tertiary,
      yellow: matugenColors.primary,
      green: matugenColors.secondary,
      teal: matugenColors.primary,
      sky: matugenColors.primary,
      sapphire: matugenColors.secondary,
      blue: matugenColors.secondary,
      lavender: matugenColors.secondary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.tertiary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.tertiary,
      peach2: matugenColors.tertiary,
      pink2: matugenColors.tertiary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.secondary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.secondary,
      surface2_2: matugenColors.surface,
      mauve2: matugenColors.secondary,
      green2: matugenColors.secondary,
      sky2: matugenColors.primary,
      teal2: matugenColors.primary,
      yellow2: matugenColors.primary,
      pink3: matugenColors.tertiary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.secondary,
      mauve3: matugenColors.secondary,
      green3: matugenColors.secondary,
      sky3: matugenColors.primary,
      teal3: matugenColors.primary,
      yellow3: matugenColors.primary,
      maroon3: matugenColors.secondary,
      crust3: matugenColors.surface_dim
    },
    standard_3: {
      rosewater: matugenColors.secondary,
      flamingo: matugenColors.secondary,
      pink: matugenColors.secondary,
      mauve: matugenColors.primary,
      red: matugenColors.secondary,
      maroon: matugenColors.primary,
      peach: matugenColors.secondary,
      yellow: matugenColors.secondary,
      green: matugenColors.primary,
      teal: matugenColors.secondary,
      sky: matugenColors.secondary,
      sapphire: matugenColors.primary,
      blue: matugenColors.primary,
      lavender: matugenColors.primary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.secondary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.secondary,
      peach2: matugenColors.secondary,
      pink2: matugenColors.secondary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      surface2_2: matugenColors.surface,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.primary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.primary,
      mauve2: matugenColors.primary,
      green2: matugenColors.primary,
      sky2: matugenColors.secondary,
      teal2: matugenColors.secondary,
      yellow2: matugenColors.secondary,
      pink3: matugenColors.secondary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.primary,
      mauve3: matugenColors.primary,
      green3: matugenColors.primary,
      sky3: matugenColors.secondary,
      teal3: matugenColors.secondary,
      yellow3: matugenColors.secondary,
      maroon3: matugenColors.primary,
      crust3: matugenColors.surface_dim
    },
    vivid_1: {
      rosewater: matugenColors.surface,
      flamingo: matugenColors.surface,
      pink: matugenColors.surface,
      mauve: matugenColors.surface,
      red: matugenColors.surface,
      maroon: matugenColors.surface,
      peach: matugenColors.surface,
      yellow: matugenColors.surface,
      green: matugenColors.surface,
      teal: matugenColors.surface,
      sky: matugenColors.surface,
      sapphire: matugenColors.surface,
      blue: matugenColors.surface,
      lavender: matugenColors.surface,
      text: matugenColors.surface,
      subtext1: matugenColors.primary_container,
      subtext2: matugenColors.primary_container,
      overlay2: matugenColors.primary_container,
      overlay1: matugenColors.primary_container,
      overlay0: matugenColors.primary_container,
      surface2: matugenColors.surface_container_high,
      surface1: matugenColors.surface_container_high,
      surface0: matugenColors.surface_container_high,
      base2: matugenColors.primary,
      base: matugenColors.primary,
      mantle: matugenColors.surface_container_low,
      crust: matugenColors.surface_container_lowest,
      red2: matugenColors.primary_container,
      peach2: matugenColors.primary_container,
      pink2: matugenColors.primary_container,
      mantle2: matugenColors.primary,
      surface1_2: matugenColors.primary,
      surface0_2: matugenColors.primary,
      overlay1_2: matugenColors.surface_container_high,
      text2: matugenColors.outline,
      lavender2: matugenColors.primary_container,
      crust2: matugenColors.primary,
      maroon2: matugenColors.primary_container,
      mauve2: matugenColors.primary_container,
      surface2_2: matugenColors.primary_container,
      green2: matugenColors.primary_container,
      sky2: matugenColors.primary_container,
      teal2: matugenColors.primary_container,
      yellow2: matugenColors.primary_container,
      pink3: matugenColors.primary_fixed,
      red3: matugenColors.secondary,
      mantle3: matugenColors.primary,
      surface0_3: matugenColors.primary,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.primary,
      lavender3: matugenColors.primary,
      mauve3: matugenColors.primary,
      green3: matugenColors.primary_fixed,
      sky3: matugenColors.primary,
      teal3: matugenColors.primary,
      yellow3: matugenColors.primary_fixed,
      maroon3: matugenColors.primary_fixed,
      crust3: matugenColors.primary
    },
    vivid_2: {
      rosewater: matugenColors.surface,
      flamingo: matugenColors.surface,
      pink: matugenColors.surface,
      mauve: matugenColors.surface,
      red: matugenColors.surface,
      maroon: matugenColors.surface,
      peach: matugenColors.surface,
      yellow: matugenColors.surface,
      green: matugenColors.surface,
      teal: matugenColors.surface,
      sky: matugenColors.surface,
      sapphire: matugenColors.surface,
      blue: matugenColors.surface,
      lavender: matugenColors.surface,
      text: matugenColors.surface,
      subtext1: matugenColors.secondary_container,
      subtext2: matugenColors.secondary_container,
      overlay2: matugenColors.secondary_container,
      overlay1: matugenColors.secondary_container,
      overlay0: matugenColors.secondary_container,
      surface2: matugenColors.surface_container_high,
      surface1: matugenColors.surface_container_high,
      surface0: matugenColors.surface_container_high,
      base2: matugenColors.secondary,
      base: matugenColors.secondary,
      mantle: matugenColors.surface_container_low,
      crust: matugenColors.surface_container_lowest,
      red2: matugenColors.secondary_container,
      peach2: matugenColors.secondary_container,
      pink2: matugenColors.secondary_container,
      surface2_2: matugenColors.primary_container,
      mantle2: matugenColors.secondary,
      surface1_2: matugenColors.secondary,
      surface0_2: matugenColors.secondary,
      overlay1_2: matugenColors.surface_container_high,
      text2: matugenColors.outline,
      lavender2: matugenColors.secondary_container,
      crust2: matugenColors.secondary,
      maroon2: matugenColors.secondary_container,
      mauve2: matugenColors.secondary_container,
      green2: matugenColors.secondary_container,
      sky2: matugenColors.secondary_container,
      teal2: matugenColors.secondary_container,
      yellow2: matugenColors.secondary_container,
      pink3: matugenColors.secondary_fixed,
      red3: matugenColors.secondary,
      mantle3: matugenColors.secondary,
      surface0_3: matugenColors.secondary,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.secondary,
      lavender3: matugenColors.secondary,
      mauve3: matugenColors.secondary,
      green3: matugenColors.secondary_fixed,
      sky3: matugenColors.secondary,
      teal3: matugenColors.secondary,
      yellow3: matugenColors.secondary_fixed,
      maroon3: matugenColors.secondary_fixed,
      crust3: matugenColors.secondary
    },
    vivid_3: {
      rosewater: matugenColors.surface,
      flamingo: matugenColors.surface,
      pink: matugenColors.surface,
      mauve: matugenColors.surface,
      red: matugenColors.surface,
      maroon: matugenColors.surface,
      peach: matugenColors.surface,
      yellow: matugenColors.surface,
      green: matugenColors.surface,
      teal: matugenColors.surface,
      sky: matugenColors.surface,
      sapphire: matugenColors.surface,
      blue: matugenColors.surface,
      lavender: matugenColors.surface,
      text: matugenColors.surface,
      subtext1: matugenColors.tertiary_container,
      subtext2: matugenColors.tertiary_container,
      overlay2: matugenColors.tertiary_container,
      overlay1: matugenColors.tertiary_container,
      overlay0: matugenColors.tertiary_container,
      surface2: matugenColors.surface_container_high,
      surface1: matugenColors.surface_container_high,
      surface0: matugenColors.surface_container_high,
      base2: matugenColors.tertiary,
      base: matugenColors.tertiary,
      mantle: matugenColors.surface_container_low,
      crust: matugenColors.surface_container_lowest,
      red2: matugenColors.tertiary_container,
      peach2: matugenColors.tertiary_container,
      pink2: matugenColors.tertiary_container,
      mantle2: matugenColors.tertiary,
      surface1_2: matugenColors.tertiary,
      surface0_2: matugenColors.tertiary,
      overlay1_2: matugenColors.surface_container_high,
      text2: matugenColors.outline,
      lavender2: matugenColors.tertiary_container,
      surface2_2: matugenColors.primary_container,
      crust2: matugenColors.tertiary,
      maroon2: matugenColors.tertiary_container,
      mauve2: matugenColors.tertiary_container,
      green2: matugenColors.tertiary_container,
      sky2: matugenColors.tertiary_container,
      teal2: matugenColors.tertiary_container,
      yellow2: matugenColors.tertiary_container,
      pink3: matugenColors.tertiary_fixed,
      red3: matugenColors.secondary,
      mantle3: matugenColors.tertiary,
      surface0_3: matugenColors.tertiary,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.tertiary,
      lavender3: matugenColors.tertiary,
      mauve3: matugenColors.tertiary,
      green3: matugenColors.tertiary_fixed,
      sky3: matugenColors.tertiary,
      teal3: matugenColors.tertiary,
      yellow3: matugenColors.tertiary_fixed,
      maroon3: matugenColors.tertiary_fixed,
      crust3: matugenColors.tertiary
    },
    monochrome_1: {
      rosewater: matugenColors.primary,
      flamingo: matugenColors.primary,
      pink: matugenColors.primary,
      mauve: matugenColors.primary,
      red: matugenColors.primary,
      maroon: matugenColors.primary,
      peach: matugenColors.primary,
      yellow: matugenColors.primary,
      green: matugenColors.primary,
      teal: matugenColors.primary,
      sky: matugenColors.primary,
      sapphire: matugenColors.primary,
      blue: matugenColors.primary,
      lavender: matugenColors.primary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.primary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.primary,
      peach2: matugenColors.primary,
      pink2: matugenColors.primary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      surface2_2: matugenColors.surface,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.primary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.primary,
      mauve2: matugenColors.primary,
      green2: matugenColors.primary,
      sky2: matugenColors.primary,
      teal2: matugenColors.primary,
      yellow2: matugenColors.primary,
      pink3: matugenColors.primary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.primary,
      mauve3: matugenColors.primary,
      green3: matugenColors.primary,
      sky3: matugenColors.primary,
      teal3: matugenColors.primary,
      yellow3: matugenColors.primary,
      maroon3: matugenColors.primary,
      crust3: matugenColors.surface_dim
    },
    monochrome_2: {
      rosewater: matugenColors.secondary,
      flamingo: matugenColors.secondary,
      pink: matugenColors.secondary,
      mauve: matugenColors.secondary,
      red: matugenColors.secondary,
      maroon: matugenColors.secondary,
      peach: matugenColors.secondary,
      yellow: matugenColors.secondary,
      green: matugenColors.secondary,
      teal: matugenColors.secondary,
      sky: matugenColors.secondary,
      sapphire: matugenColors.secondary,
      blue: matugenColors.secondary,
      lavender: matugenColors.secondary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.secondary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.secondary,
      peach2: matugenColors.secondary,
      pink2: matugenColors.secondary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      overlay1_2: matugenColors.outline,
      surface2_2: matugenColors.surface,
      text2: matugenColors.on_background,
      lavender2: matugenColors.secondary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.secondary,
      mauve2: matugenColors.secondary,
      green2: matugenColors.secondary,
      sky2: matugenColors.secondary,
      teal2: matugenColors.secondary,
      yellow2: matugenColors.secondary,
      pink3: matugenColors.secondary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.secondary,
      mauve3: matugenColors.secondary,
      green3: matugenColors.secondary,
      sky3: matugenColors.secondary,
      teal3: matugenColors.secondary,
      yellow3: matugenColors.secondary,
      maroon3: matugenColors.secondary,
      crust3: matugenColors.surface_dim
    },
    monochrome_3: {
      rosewater: matugenColors.tertiary,
      flamingo: matugenColors.tertiary,
      pink: matugenColors.tertiary,
      mauve: matugenColors.tertiary,
      red: matugenColors.tertiary,
      maroon: matugenColors.tertiary,
      peach: matugenColors.tertiary,
      yellow: matugenColors.tertiary,
      green: matugenColors.tertiary,
      teal: matugenColors.tertiary,
      sky: matugenColors.tertiary,
      sapphire: matugenColors.tertiary,
      blue: matugenColors.tertiary,
      lavender: matugenColors.tertiary,
      text: matugenColors.on_background,
      subtext1: matugenColors.outline,
      subtext2: matugenColors.outline,
      overlay2: matugenColors.outline,
      overlay1: matugenColors.outline,
      overlay0: matugenColors.outline,
      surface2: matugenColors.outline,
      surface1: matugenColors.surface_bright,
      surface0: matugenColors.surface_bright,
      base2: matugenColors.inverse_on_surface,
      base: matugenColors.inverse_on_surface,
      mantle: matugenColors.surface_dim,
      crust: matugenColors.surface_dim,
      notifications_closer: matugenColors.tertiary,
      notifications_background: matugenColors.surface_dim,
      dashboard_btn_text: matugenColors.surface_dim,
      red2: matugenColors.tertiary,
      peach2: matugenColors.tertiary,
      pink2: matugenColors.tertiary,
      mantle2: matugenColors.surface_dim,
      surface1_2: matugenColors.inverse_on_surface,
      surface0_2: matugenColors.surface_bright,
      overlay1_2: matugenColors.outline,
      text2: matugenColors.on_background,
      lavender2: matugenColors.tertiary,
      crust2: matugenColors.surface_dim,
      maroon2: matugenColors.tertiary,
      surface2_2: matugenColors.surface,
      mauve2: matugenColors.tertiary,
      green2: matugenColors.tertiary,
      sky2: matugenColors.tertiary,
      teal2: matugenColors.tertiary,
      yellow2: matugenColors.tertiary,
      pink3: matugenColors.tertiary,
      red3: matugenColors.secondary,
      mantle3: matugenColors.inverse_on_surface,
      surface0_3: matugenColors.outline,
      surface2_3: matugenColors.outline,
      overlay1_3: matugenColors.outline,
      lavender3: matugenColors.tertiary,
      mauve3: matugenColors.tertiary,
      green3: matugenColors.tertiary,
      sky3: matugenColors.tertiary,
      teal3: matugenColors.tertiary,
      yellow3: matugenColors.tertiary,
      maroon3: matugenColors.tertiary,
      crust3: matugenColors.surface_dim
    }
  };
  return matVtns[variation];
};

// src/services/matugen/defaults.ts
var defaultColorMap = {
  rosewater: "#f5e0dc",
  flamingo: "#f2cdcd",
  pink: "#f5c2e7",
  mauve: "#cba6f7",
  red: "#f38ba8",
  maroon: "#eba0ac",
  peach: "#fab387",
  yellow: "#f9e2af",
  green: "#a6e3a1",
  teal: "#94e2d5",
  sky: "#89dceb",
  sapphire: "#74c7ec",
  blue: "#89b4fa",
  lavender: "#b4befe",
  text: "#cdd6f4",
  subtext1: "#bac2de",
  subtext2: "#a6adc8",
  overlay2: "#9399b2",
  overlay1: "#7f849c",
  overlay0: "#6c7086",
  surface2: "#585b70",
  surface1: "#45475a",
  surface0: "#313244",
  base2: "#242438",
  base: "#1e1e2e",
  mantle: "#181825",
  crust: "#11111b",
  surface1_2: "#454759",
  text2: "#cdd6f3",
  pink2: "#f5c2e6",
  red2: "#f38ba7",
  peach2: "#fab386",
  mantle2: "#181824",
  surface0_2: "#313243",
  surface2_2: "#585b69",
  overlay1_2: "#7f849b",
  lavender2: "#b4befd",
  mauve2: "#cba6f6",
  green2: "#a6e3a0",
  sky2: "#89dcea",
  teal2: "#94e2d4",
  yellow2: "#f9e2ad",
  maroon2: "#eba0ab",
  crust2: "#11111a",
  pink3: "#f5c2e8",
  red3: "#f38ba9",
  mantle3: "#181826",
  surface0_3: "#313245",
  surface2_3: "#585b71",
  overlay1_3: "#7f849d",
  lavender3: "#b4beff",
  mauve3: "#cba6f8",
  green3: "#a6e3a2",
  sky3: "#89dcec",
  teal3: "#94e2d6",
  yellow3: "#f9e2ae",
  maroon3: "#eba0ad",
  crust3: "#11111c"
};

// src/services/matugen/index.ts
var MATUGEN_ENABLED = configuration_default.theme.matugen;
var MATUGEN_SETTINGS = configuration_default.theme.matugen_settings;
var MatugenService = class _MatugenService {
  static _instance;
  constructor() {
  }
  /**
   * Gets the singleton instance of the MatugenService
   *
   * @returns The MatugenService instance
   */
  static getInstance() {
    if (this._instance === void 0) {
      this._instance = new _MatugenService();
    }
    return this._instance;
  }
  /**
   * Normalizes contrast value to be within Matugen's acceptable range
   *
   * @param contrast - The raw contrast value
   * @returns Normalized contrast value between -1 and 1
   */
  _normalizeContrast(contrast) {
    return Math.max(-1, Math.min(1, contrast));
  }
  /**
   * Generates a color scheme from the current wallpaper using Matugen
   *
   * @returns The generated color palette or undefined if generation fails
   */
  async generateMatugenColors() {
    if (!MATUGEN_ENABLED.get() || !SystemUtilities.checkDependencies("matugen")) {
      return;
    }
    const wallpaperPath = configuration_default.wallpaper.image.get();
    if (!wallpaperPath || !isAnImage(wallpaperPath)) {
      SystemUtilities.notify({
        summary: "Matugen Failed",
        body: "Please select a wallpaper in 'Theming > General' first.",
        iconName: icons_default.ui.warning
      });
      return;
    }
    try {
      const normalizedContrast = this._normalizeContrast(MATUGEN_SETTINGS.contrast.get());
      const schemeType = MATUGEN_SETTINGS.scheme_type.get();
      const mode = MATUGEN_SETTINGS.mode.get();
      const baseCommand = `matugen image -q "${wallpaperPath}" -t scheme-${schemeType} --contrast ${normalizedContrast}`;
      const jsonResult = await SystemUtilities.bash(`${baseCommand} --dry-run --json hex`);
      await SystemUtilities.bash(baseCommand);
      const parsedResult = JSON.parse(jsonResult);
      return parsedResult?.colors?.[mode];
    } catch (error) {
      SystemUtilities.notify({
        summary: "Matugen Error",
        body: `An error occurred: ${error}`,
        iconName: icons_default.ui.info
      });
      console.error(`An error occurred while generating matugen colors: ${error}`);
      return;
    }
  }
  /**
   * Validates if a color string is a valid key in the default color map
   *
   * @param color - The color key to validate
   * @returns Whether the color is a valid ColorMapKey
   */
  isColorKeyValid(color2) {
    return Object.prototype.hasOwnProperty.call(defaultColorMap, color2);
  }
  /**
   * Maps a default color hex value to its Matugen-generated equivalent
   *
   * @param incomingHex - The original hex color to map
   * @param matugenColors - The Matugen color palette to use for mapping
   * @returns The mapped hex color or original if no mapping exists
   */
  getMatugenHex(incomingHex, matugenColors) {
    if (!MATUGEN_ENABLED.get() || !matugenColors) {
      return incomingHex;
    }
    const variation = MATUGEN_SETTINGS.variation.get();
    const matugenVariation = getMatugenVariations(matugenColors, variation);
    for (const colorKey of Object.keys(defaultColorMap)) {
      if (!this.isColorKeyValid(colorKey)) {
        continue;
      }
      const colorValue = defaultColorMap[colorKey];
      if (colorValue === incomingHex) {
        return matugenVariation[colorKey] ?? incomingHex;
      }
    }
    return incomingHex;
  }
};

// src/lib/validation/colorNames.ts
var namedColors = /* @__PURE__ */ new Set([
  "alice blue",
  "antique white",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanched almond",
  "blue",
  "blue violet",
  "brown",
  "burlywood",
  "cadet blue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflower blue",
  "cornsilk",
  "crimson",
  "cyan",
  "dark blue",
  "dark cyan",
  "dark goldenrod",
  "dark gray",
  "dark green",
  "dark khaki",
  "dark magenta",
  "dark olive green",
  "dark orange",
  "dark orchid",
  "dark red",
  "dark salmon",
  "dark sea green",
  "dark slate blue",
  "dark slate gray",
  "dark turquoise",
  "dark violet",
  "deep pink",
  "deep sky blue",
  "dim gray",
  "dodger blue",
  "firebrick",
  "floral white",
  "forest green",
  "fuchsia",
  "gainsboro",
  "ghost white",
  "gold",
  "goldenrod",
  "gray",
  "green",
  "green yellow",
  "honeydew",
  "hot pink",
  "indian red",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavender blush",
  "lawn green",
  "lemon chiffon",
  "light blue",
  "light coral",
  "light cyan",
  "light goldenrod yellow",
  "light green",
  "light grey",
  "light pink",
  "light salmon",
  "light sea green",
  "light sky blue",
  "light slate gray",
  "light steel blue",
  "light yellow",
  "lime",
  "lime green",
  "linen",
  "magenta",
  "maroon",
  "medium aquamarine",
  "medium blue",
  "medium orchid",
  "medium purple",
  "medium sea green",
  "medium slate blue",
  "medium spring green",
  "medium turquoise",
  "medium violet red",
  "midnight blue",
  "mint cream",
  "misty rose",
  "moccasin",
  "navajo white",
  "navy",
  "old lace",
  "olive",
  "olive drab",
  "orange",
  "orange red",
  "orchid",
  "pale goldenrod",
  "pale green",
  "pale turquoise",
  "pale violet red",
  "papaya whip",
  "peach puff",
  "peru",
  "pink",
  "plum",
  "powder blue",
  "purple",
  "red",
  "rosy brown",
  "royal blue",
  "saddle brown",
  "salmon",
  "sandy brown",
  "sea green",
  "seashell",
  "sienna",
  "silver",
  "sky blue",
  "slate blue",
  "slate gray",
  "snow",
  "spring green",
  "steel blue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "white smoke",
  "yellow",
  "yellow green"
]);

// src/lib/validation/colors.ts
function isValidGjsColor(color2) {
  const colorLower = color2.toLowerCase().trim();
  if (namedColors.has(colorLower)) {
    return true;
  }
  const hexColorRegex = /^#(?:[a-fA-F0-9]{3,4}|[a-fA-F0-9]{6,8})$/;
  const rgbRegex = /^rgb\(\s*(\d{1,3}%?\s*,\s*){2}\d{1,3}%?\s*\)$/;
  const rgbaRegex = /^rgba\(\s*(\d{1,3}%?\s*,\s*){3}(0|1|0?\.\d+)\s*\)$/;
  if (hexColorRegex.test(color2)) {
    return true;
  }
  if (rgbRegex.test(colorLower) || rgbaRegex.test(colorLower)) {
    return true;
  }
  return false;
}
var isHexColor = (val) => {
  return typeof val === "string" && /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(val);
};

// src/style/index.ts
var matugenService = MatugenService.getInstance();
var ThemeStyleManager = class {
  /**
   * Orchestrates the full theme regeneration process
   * Falls back to standard theme if Matugen is unavailable
   */
  async applyCss() {
    if (!SystemUtilities.checkDependencies("sass")) return;
    try {
      const variables = await this._generateThemeVariables();
      await this._compileSass(variables);
      this._applyCss();
    } catch (error) {
      console.error(error);
    }
  }
  /**
   * Decides whether to use Matugen-generated colors or standard theme variables
   * Controls the main theming strategy based on user configuration
   *
   * @returns An array of SCSS variable declarations
   */
  async _generateThemeVariables() {
    const useMatugen = configuration_default.theme.matugen.get();
    if (!useMatugen) {
      return this._extractStandardVariables();
    }
    const matugenColors = await matugenService.generateMatugenColors();
    if (!matugenColors) {
      return this._extractStandardVariables();
    }
    return this._extractMatugenizedVariables(matugenColors);
  }
  /**
   * Recursively processes theme objects to generate SCSS variables
   * Handles nested properties by creating properly namespaced variable names
   *
   * @returns An array of SCSS variable declarations using standard theme values
   */
  _extractStandardVariables() {
    const cssVariables = [];
    const optArray = configuration_default.toArray();
    for (const opt2 of optArray) {
      const currentPath = opt2.id;
      if (!currentPath.startsWith("theme.")) {
        continue;
      }
      const variableName = this._buildCssVariableName(currentPath);
      const variable = this._buildCssVariable(variableName, opt2);
      cssVariables.push(variable);
    }
    return cssVariables;
  }
  /**
   * Alternative variable extraction when using Matugen's color generation
   * Processes all theme options and applies Matugen's palette where appropriate
   *
   * @param matugenColors - Color palette generated by Matugen service
   * @returns An array of SCSS variable declarations with Matugen colors applied
   */
  async _extractMatugenizedVariables(matugenColors) {
    try {
      const result = [];
      const optArray = configuration_default.toArray();
      for (const opt2 of optArray) {
        const currentPath = opt2.id;
        if (!currentPath.startsWith("theme.")) {
          continue;
        }
        const optionValue = opt2.get();
        const variableName = this._buildCssVariableName(currentPath);
        if (!isHexColor(optionValue)) {
          result.push(`$${variableName}: ${optionValue};`);
          continue;
        }
        const defaultThemeValue = opt2.initial;
        if (!isHexColor(defaultThemeValue)) {
          continue;
        }
        const matugenColor = matugenService.getMatugenHex(defaultThemeValue, matugenColors);
        result.push(`$${variableName}: ${matugenColor};`);
      }
      return result;
    } catch (error) {
      console.error(error);
      return [];
    }
  }
  /**
   * Handles object properties that have values needing transformation
   * Creates properly formatted SCSS variable declarations
   *
   * @param variableName - CSS-friendly variable name
   * @param property - Option object containing the property value
   * @returns Formatted SCSS variable declaration
   */
  _buildCssVariable(variableName, property2) {
    const propertyValue = property2.get();
    return `$${variableName}: ${propertyValue};`;
  }
  /**
   * Transforms dotted paths into hyphenated CSS variable names
   * Strips the "theme." prefix for cleaner variable naming
   *
   * @param path - Dot-notation path of an option (e.g., "theme.background.primary")
   * @returns CSS-friendly variable name (e.g., "background-primary")
   */
  _buildCssVariableName(path) {
    return path.replace("theme.", "").split(".").join("-");
  }
  /**
   * Executes the SCSS compilation process with generated variables
   * Combines main SCSS with custom variables and module styles
   *
   * @param themeVariables - Array of SCSS variable declarations for user customization options
   *
   * File paths used in compilation:
   * - themeVariablesPath: Contains all user-configurable variables (theme colors, margins, borders, etc.)
   * - appScssPath: The application's main SCSS entry point file
   * - entryScssPath: A temporary file that combines all SCSS sources in the correct order
   * - modulesScssPath: User-defined custom module styles
   * - compiledCssPath: The final compiled CSS that gets used by the application
   */
  async _compileSass(themeVariables) {
    const themeVariablesPath = `${TMP}/variables.scss`;
    const appScssPath = `${SRC_DIR}/src/style/main.scss`;
    const entryScssPath = `${TMP}/entry.scss`;
    const modulesScssPath = `${CONFIG_DIR}/modules.scss`;
    const compiledCssPath = `${TMP}/main.css`;
    const scssImports = [`@import '${themeVariablesPath}';`];
    writeFile(themeVariablesPath, themeVariables.join("\n"));
    let combinedScss = readFile(appScssPath);
    combinedScss = `${scssImports.join("\n")}
${combinedScss}`;
    const moduleCustomizations = readFile(modulesScssPath);
    combinedScss = `${combinedScss}
${moduleCustomizations}`;
    writeFile(entryScssPath, combinedScss);
    await SystemUtilities.bash(
      `sass --load-path=${SRC_DIR}/src/style ${entryScssPath} ${compiledCssPath}`
    );
  }
  /**
   * Loads the compiled CSS into the application
   *
   * @remarks
   * Uses the compiled CSS file generated in _compileSass to apply styles to the application
   */
  _applyCss() {
    const compiledCssPath = `${TMP}/main.css`;
    app_default.apply_css(compiledCssPath, true);
  }
};
var themeManager = new ThemeStyleManager();
var optionsToWatch = [
  "font",
  "theme",
  "bar.flatButtons",
  "bar.position",
  "bar.battery.charging",
  "bar.battery.blocks"
];
initializeTrackers(themeManager.applyCss.bind(themeManager));
initializeHotReload();
configuration_default.handler(optionsToWatch, themeManager.applyCss.bind(themeManager));
await themeManager.applyCss();

// src/core/behaviors/bar/clock.ts
var { showIcon, showTime } = configuration_default.bar.clock;
showIcon.subscribe(() => {
  if (!showTime.get() && !showIcon.get()) {
    showTime.set(true);
  }
});
showTime.subscribe(() => {
  if (!showTime.get() && !showIcon.get()) {
    showIcon.set(true);
  }
});

// src/core/behaviors/bar/windowTitle.ts
var { label, icon } = configuration_default.bar.windowtitle;
label.subscribe(() => {
  if (!label.get() && !icon.get()) {
    icon.set(true);
  }
});
icon.subscribe(() => {
  if (!label.get() && !icon.get()) {
    label.set(true);
  }
});

// app.ts
import AstalHyprland19 from "gi://AstalHyprland?version=0.1";

// src/services/display/monitor/index.ts
import AstalHyprland2 from "gi://AstalHyprland?version=0.1";
var hyprlandService2 = AstalHyprland2.get_default();
var GdkMonitorService = class {
  _usedGdkMonitors;
  _usedHyprlandMonitors;
  constructor() {
    this._usedGdkMonitors = /* @__PURE__ */ new Set();
    this._usedHyprlandMonitors = /* @__PURE__ */ new Set();
  }
  /**
   * Resets the internal state for both GDK and Hyprland monitor mappings.
   */
  reset() {
    this._usedGdkMonitors.clear();
    this._usedHyprlandMonitors.clear();
  }
  /**
   * Converts a GDK monitor id to the corresponding Hyprland monitor id.
   *
   * @param monitor - The GDK monitor id.
   * @returns The corresponding Hyprland monitor id.
   */
  mapGdkToHyprland(monitor3) {
    const gdkMonitors = this._getGdkMonitors();
    if (Object.keys(gdkMonitors).length === 0) {
      return monitor3;
    }
    const gdkMonitor = gdkMonitors[monitor3];
    const hyprlandMonitors = hyprlandService2.get_monitors();
    return this._matchMonitor(
      hyprlandMonitors,
      gdkMonitor,
      monitor3,
      this._usedHyprlandMonitors,
      (mon) => mon.id,
      (mon, gdkMon) => this._matchMonitorKey(mon, gdkMon)
    );
  }
  /**
   * Converts a Hyprland monitor id to the corresponding GDK monitor id.
   *
   * @param monitor - The Hyprland monitor id.
   * @returns The corresponding GDK monitor id.
   */
  mapHyprlandToGdk(monitor3) {
    const gdkMonitors = this._getGdkMonitors();
    const gdkCandidates = Object.entries(gdkMonitors).map(([monitorId, monitorMetadata]) => ({
      id: Number(monitorId),
      monitor: monitorMetadata
    }));
    if (gdkCandidates.length === 0) {
      return monitor3;
    }
    const hyprlandMonitors = hyprlandService2.get_monitors();
    const foundHyprlandMonitor = hyprlandMonitors.find((mon) => mon.id === monitor3) || hyprlandMonitors[0];
    return this._matchMonitor(
      gdkCandidates,
      foundHyprlandMonitor,
      monitor3,
      this._usedGdkMonitors,
      (candidate) => candidate.id,
      (candidate, hyprlandMonitor) => this._matchMonitorKey(hyprlandMonitor, candidate.monitor)
    );
  }
  /**
   * Generic helper that finds the best matching candidate monitor based on:
   *  1. A direct match (candidate matches the source and has the same id as the target).
   *  2. A relaxed match (candidate matches the source, regardless of id).
   *  3. A fallback match (first candidate that hasn’t been used).
   *
   * @param candidates - Array of candidate monitors.
   * @param source - The source monitor object to match against.
   * @param target - The desired monitor id.
   * @param usedMonitors - A Set of already used candidate ids.
   * @param getId - Function to extract the id from a candidate.
   * @param compare - Function that determines if a candidate matches the source.
   * @returns The chosen monitor id.
   */
  _matchMonitor(candidates, source, target, usedMonitors, getId, compare) {
    const directMatch = candidates.find(
      (candidate) => compare(candidate, source) && !usedMonitors.has(getId(candidate)) && getId(candidate) === target
    );
    if (directMatch !== void 0) {
      usedMonitors.add(getId(directMatch));
      return getId(directMatch);
    }
    const relaxedMatch = candidates.find(
      (candidate) => compare(candidate, source) && !usedMonitors.has(getId(candidate))
    );
    if (relaxedMatch !== void 0) {
      usedMonitors.add(getId(relaxedMatch));
      return getId(relaxedMatch);
    }
    const fallback = candidates.find((candidate) => !usedMonitors.has(getId(candidate)));
    if (fallback !== void 0) {
      usedMonitors.add(getId(fallback));
      return getId(fallback);
    }
    for (const candidate of candidates) {
      const candidateId = getId(candidate);
      if (!usedMonitors.has(candidateId)) {
        usedMonitors.add(candidateId);
        return candidateId;
      }
    }
    console.warn(`Returning original monitor index as a last resort: ${target}`);
    return target;
  }
  /**
   * Determines if a Hyprland monitor matches a GDK monitor by comparing their keys
   *
   * @param hyprlandMonitor - Hyprland monitor object
   * @param gdkMonitor - GDK monitor object
   * @returns boolean indicating if the monitors match
   */
  _matchMonitorKey(hyprlandMonitor, gdkMonitor) {
    const isRotated90 = hyprlandMonitor.transform % 2 !== 0;
    const gdkScaleFactor = Math.ceil(hyprlandMonitor.scale);
    const scaleFactorWidth = Math.trunc(hyprlandMonitor.width / gdkScaleFactor);
    const scaleFactorHeight = Math.trunc(hyprlandMonitor.height / gdkScaleFactor);
    const gdkScaleFactorKey = `${hyprlandMonitor.model}_${scaleFactorWidth}x${scaleFactorHeight}_${gdkScaleFactor}`;
    const transWidth = isRotated90 ? hyprlandMonitor.height : hyprlandMonitor.width;
    const transHeight = isRotated90 ? hyprlandMonitor.width : hyprlandMonitor.height;
    const scaleWidth = Math.trunc(transWidth / hyprlandMonitor.scale);
    const scaleHeight = Math.trunc(transHeight / hyprlandMonitor.scale);
    const hyprlandScaleFactorKey = `${hyprlandMonitor.model}_${scaleWidth}x${scaleHeight}_${gdkScaleFactor}`;
    const keyMatch = gdkMonitor.key === gdkScaleFactorKey || gdkMonitor.key === hyprlandScaleFactorKey;
    this._logMonitorInfo(
      gdkMonitor,
      hyprlandMonitor,
      isRotated90,
      gdkScaleFactor,
      gdkScaleFactorKey,
      hyprlandScaleFactorKey,
      keyMatch
    );
    return keyMatch;
  }
  /**
   * Retrieves all GDK monitors from the default display
   *
   * @returns Object containing GDK monitor information indexed by monitor ID
   */
  _getGdkMonitors() {
    const display = Gdk.Display.get_default();
    if (display === null) {
      console.error("Failed to get Gdk display.");
      return {};
    }
    const numGdkMonitors = display.get_n_monitors();
    const gdkMonitors = {};
    for (let i = 0; i < numGdkMonitors; i++) {
      const curMonitor2 = display.get_monitor(i);
      if (curMonitor2 === null) {
        console.warn(`Monitor at index ${i} is null.`);
        continue;
      }
      const model = curMonitor2.get_model() ?? "";
      const geometry = curMonitor2.get_geometry();
      const scaleFactor = curMonitor2.get_scale_factor();
      const key = `${model}_${geometry.width}x${geometry.height}_${scaleFactor}`;
      gdkMonitors[i] = { key, model, used: false };
    }
    return gdkMonitors;
  }
  /**
   * Logs detailed monitor information for debugging purposes
   * @param gdkMonitor - GDK monitor object
   * @param hyprlandMonitor - Hyprland monitor information
   * @param isRotated90 - Whether the monitor is rotated 90 degrees
   * @param gdkScaleFactor - The GDK monitor's scale factor
   * @param gdkScaleFactorKey - Key used for scale factor matching
   * @param hyprlandScaleFactorKey - Key used for general scale matching
   * @param keyMatch - Whether the monitor keys match
   */
  _logMonitorInfo(gdkMonitor, hyprlandMonitor, isRotated90, gdkScaleFactor, gdkScaleFactorKey, hyprlandScaleFactorKey, keyMatch) {
    console.debug("=== Monitor Matching Debug Info ===");
    console.debug("GDK Monitor");
    console.debug(`  Key: ${gdkMonitor.key}`);
    console.debug("Hyprland Monitor");
    console.debug(`  ID: ${hyprlandMonitor.id}`);
    console.debug(`  Model: ${hyprlandMonitor.model}`);
    console.debug(`  Resolution: ${hyprlandMonitor.width}x${hyprlandMonitor.height}`);
    console.debug(`  Scale: ${hyprlandMonitor.scale}`);
    console.debug(`  Transform: ${hyprlandMonitor.transform}`);
    console.debug("Calculated Values");
    console.debug(`  Rotation: ${isRotated90 ? "90\xB0" : "0\xB0"}`);
    console.debug(`  GDK Scale Factor: ${gdkScaleFactor}`);
    console.debug("Calculated Keys");
    console.debug(`  GDK Scale Factor Key: ${gdkScaleFactorKey}`);
    console.debug(`  Hyprland Scale Factor Key: ${hyprlandScaleFactorKey}`);
    console.debug("Match Result");
    console.debug(`  ${keyMatch ? "\u2705 Monitors Match" : "\u274C No Match"}`);
    console.debug("===============================\n");
  }
};

// src/components/bar/layout/BarLayout.tsx
import Astal9 from "gi://Astal?version=3.0";

// src/lib/window/visibility.ts
function isWindowVisible(windowName) {
  const appWindow = app_default.get_window(windowName);
  if (appWindow === void 0 || appWindow === null) {
    throw new Error(`Window with name "${windowName}" not found.`);
  }
  return appWindow.visible;
}
var idleInhibit = Variable(false);

// src/lib/array/helpers.ts
function range(length, start = 1) {
  return Array.from({ length }, (_, i) => i + start);
}
function unique(array) {
  return [...new Set(array)];
}

// src/components/bar/utils/monitors/index.ts
var getLayoutForMonitor = (monitor3, layouts2) => {
  const matchingKey = Object.keys(layouts2).find((key) => key === monitor3.toString());
  const wildcard = Object.keys(layouts2).find((key) => key === "*");
  if (matchingKey !== void 0) {
    return layouts2[matchingKey];
  }
  if (wildcard) {
    return layouts2[wildcard];
  }
  return {
    left: ["dashboard", "workspaces", "windowtitle"],
    middle: ["media"],
    right: ["volume", "network", "bluetooth", "battery", "systray", "clock", "notifications"]
  };
};
var isLayoutEmpty = (layout) => {
  const isLeftSectionEmpty = !Array.isArray(layout.left) || layout.left.length === 0;
  const isRightSectionEmpty = !Array.isArray(layout.right) || layout.right.length === 0;
  const isMiddleSectionEmpty = !Array.isArray(layout.middle) || layout.middle.length === 0;
  return isLeftSectionEmpty && isRightSectionEmpty && isMiddleSectionEmpty;
};
async function forMonitors(widget) {
  const n = Gdk.Display.get_default()?.get_n_monitors() ?? 1;
  return Promise.all(range(n, 0).map(widget));
}

// ../../../../../../../usr/share/astal/gjs/gtk3/jsx-runtime.ts
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  circularprogress: CircularProgress,
  drawingarea: DrawingArea,
  entry: Entry,
  eventbox: EventBox,
  // TODO: fixed
  // TODO: flowbox
  icon: Icon,
  label: Label,
  levelbar: LevelBar,
  // TODO: listbox
  menubutton: MenuButton,
  overlay: Overlay,
  revealer: Revealer,
  scrollable: Scrollable,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window
};
var jsxs = jsx2;

// src/components/bar/layout/BarLayout.tsx
var BarLayout = class {
  _hyprlandMonitor;
  _gdkMonitor;
  _widgetRegistry;
  _visibilityVar;
  _classNameVar;
  _anchorVar;
  _layerVar;
  _borderLocationVar;
  _barSectionsVar;
  constructor(gdkMonitor, hyprlandMonitor, widgetRegistry2) {
    this._gdkMonitor = gdkMonitor;
    this._hyprlandMonitor = hyprlandMonitor;
    this._widgetRegistry = widgetRegistry2;
    this._visibilityVar = Variable(true);
    this._classNameVar = Variable("bar");
    this._anchorVar = Variable(
      Astal9.WindowAnchor.TOP | Astal9.WindowAnchor.LEFT | Astal9.WindowAnchor.RIGHT
    );
    this._layerVar = Variable(Astal9.Layer.TOP);
    this._borderLocationVar = Variable("bar-panel")();
    this._barSectionsVar = {
      left: Variable([]),
      middle: Variable([]),
      right: Variable([])
    };
    this._initializeReactiveVariables();
  }
  render() {
    return /* @__PURE__ */ jsx2(
      "window",
      {
        inhibit: bind(idleInhibit),
        name: `bar-${this._hyprlandMonitor}`,
        namespace: `bar-${this._hyprlandMonitor}`,
        className: this._classNameVar(),
        application: app_default,
        monitor: this._gdkMonitor,
        visible: this._visibilityVar(),
        anchor: this._anchorVar(),
        layer: this._layerVar(),
        exclusivity: Astal9.Exclusivity.EXCLUSIVE,
        onDestroy: () => this._cleanup(),
        children: /* @__PURE__ */ jsx2("box", { className: "bar-panel-container", children: /* @__PURE__ */ jsx2(
          "centerbox",
          {
            css: "padding: 1px;",
            hexpand: true,
            className: this._borderLocationVar,
            startWidget: /* @__PURE__ */ jsx2("box", { className: "box-left", hexpand: true, children: this._barSectionsVar.left() }),
            centerWidget: /* @__PURE__ */ jsx2("box", { className: "box-center", halign: Gtk4.Align.CENTER, children: this._barSectionsVar.middle() }),
            endWidget: /* @__PURE__ */ jsx2("box", { className: "box-right", halign: Gtk4.Align.END, children: this._barSectionsVar.right() })
          }
        ) })
      }
    );
  }
  _initializeReactiveVariables() {
    this._initializeVisibilityVariables();
    this._initializePositionVariables();
    this._initializeAppearanceVariables();
    this._initializeSectionVariables();
  }
  _initializeVisibilityVariables() {
    const { layouts: layouts2 } = configuration_default.bar;
    this._visibilityVar = Variable.derive([bind(layouts2)], (currentLayouts) => {
      const foundLayout = getLayoutForMonitor(this._hyprlandMonitor, currentLayouts);
      return !isLayoutEmpty(foundLayout);
    });
    this._classNameVar = Variable.derive([bind(layouts2)], (currentLayouts) => {
      const foundLayout = getLayoutForMonitor(this._hyprlandMonitor, currentLayouts);
      return !isLayoutEmpty(foundLayout) ? "bar" : "";
    });
  }
  /**
   * Initialize variables related to bar positioning
   */
  _initializePositionVariables() {
    const { location: location4 } = configuration_default.theme.bar;
    this._anchorVar = Variable.derive([bind(location4)], (loc) => {
      if (loc === "bottom") {
        return Astal9.WindowAnchor.BOTTOM | Astal9.WindowAnchor.LEFT | Astal9.WindowAnchor.RIGHT;
      }
      return Astal9.WindowAnchor.TOP | Astal9.WindowAnchor.LEFT | Astal9.WindowAnchor.RIGHT;
    });
  }
  _initializeAppearanceVariables() {
    const { location: borderLocation } = configuration_default.theme.bar.border;
    this._layerVar = this._createLayerVariable();
    this._borderLocationVar = bind(borderLocation).as(
      (brdrLcn) => brdrLcn !== "none" ? "bar-panel withBorder" : "bar-panel"
    );
  }
  _createLayerVariable() {
    return Variable.derive([bind(configuration_default.theme.bar.layer), bind(configuration_default.tear)], (barLayer, tear2) => {
      if (tear2 && barLayer === "overlay") {
        return Astal9.Layer.TOP;
      }
      return this._getLayerFromConfig(barLayer);
    });
  }
  _getLayerFromConfig(barLayer) {
    const layerMap = {
      overlay: Astal9.Layer.OVERLAY,
      top: Astal9.Layer.TOP,
      bottom: Astal9.Layer.BOTTOM,
      background: Astal9.Layer.BACKGROUND
    };
    return layerMap[barLayer] ?? Astal9.Layer.TOP;
  }
  _initializeSectionVariables() {
    this._barSectionsVar = {
      left: this._createSectionBinding("left"),
      middle: this._createSectionBinding("middle"),
      right: this._createSectionBinding("right")
    };
  }
  _createSectionBinding(section) {
    const { layouts: layouts2 } = configuration_default.bar;
    return Variable.derive([bind(layouts2)], (currentLayouts) => {
      const foundLayout = getLayoutForMonitor(this._hyprlandMonitor, currentLayouts);
      return foundLayout[section].filter((mod) => this._widgetRegistry.hasWidget(mod)).map((widget) => this._widgetRegistry.createWidget(widget, this._hyprlandMonitor));
    });
  }
  _cleanup() {
    this._visibilityVar.drop();
    this._classNameVar.drop();
    this._anchorVar.drop();
    this._layerVar.drop();
    this._barSectionsVar.left.drop();
    this._barSectionsVar.middle.drop();
    this._barSectionsVar.right.drop();
  }
};

// src/components/bar/modules/battery/index.tsx
import AstalBattery from "gi://AstalBattery?version=0.1";

// src/lib/events/dropdown.ts
var globalEventBoxes = variable_default({});

// src/components/menus/shared/dropdown/helpers/locationHandler.ts
import AstalHyprland3 from "gi://AstalHyprland?version=0.1";
var hyprlandService3 = AstalHyprland3.get_default();
var { location } = configuration_default.theme.bar;
var { scalingPriority } = configuration_default;
function getDropdownEventBox(windowName) {
  return globalEventBoxes.get()[windowName];
}
function getFocusedHyprlandMonitor() {
  const allMonitors = hyprlandService3.get_monitors();
  return allMonitors.find((monitor3) => monitor3.id === hyprlandService3.focusedMonitor.id);
}
function applyMonitorScaling(width, height, monitorScaling) {
  const gdkEnvScale = default2.getenv("GDK_SCALE") ?? "1";
  const userScalingPriority = scalingPriority.get();
  let adjustedWidth = width;
  let adjustedHeight = height;
  if (userScalingPriority === "both") {
    const gdkScaleValue = parseFloat(gdkEnvScale);
    adjustedWidth /= gdkScaleValue;
    adjustedHeight /= gdkScaleValue;
    adjustedWidth /= monitorScaling;
    adjustedHeight /= monitorScaling;
  } else if (/^\d+(\.\d+)?$/.test(gdkEnvScale) && userScalingPriority === "gdk") {
    const gdkScaleValue = parseFloat(gdkEnvScale);
    adjustedWidth /= gdkScaleValue;
    adjustedHeight /= gdkScaleValue;
  } else {
    adjustedWidth /= monitorScaling;
    adjustedHeight /= monitorScaling;
  }
  return { adjustedWidth, adjustedHeight };
}
function adjustForVerticalTransform(monitorWidth, monitorHeight, isVertical) {
  if (!isVertical) {
    return { finalWidth: monitorWidth, finalHeight: monitorHeight };
  }
  return { finalWidth: monitorHeight, finalHeight: monitorWidth };
}
function calculateHorizontalMargins(monitorWidth, dropdownWidth, anchorX) {
  const minimumSpacing = 0;
  let rightMarginSpacing = monitorWidth - dropdownWidth / 2;
  rightMarginSpacing -= anchorX;
  let leftMarginSpacing = monitorWidth - dropdownWidth - rightMarginSpacing;
  if (rightMarginSpacing < minimumSpacing) {
    rightMarginSpacing = minimumSpacing;
    leftMarginSpacing = monitorWidth - dropdownWidth - minimumSpacing;
  }
  if (leftMarginSpacing < minimumSpacing) {
    leftMarginSpacing = minimumSpacing;
    rightMarginSpacing = monitorWidth - dropdownWidth - minimumSpacing;
  }
  return { leftMargin: leftMarginSpacing, rightMargin: rightMarginSpacing };
}
function setVerticalPosition(dropdownEventBox, monitorHeight, dropdownHeight) {
  if (location.get() === "top") {
    dropdownEventBox.set_margin_top(0);
    dropdownEventBox.set_margin_bottom(monitorHeight);
  } else {
    dropdownEventBox.set_margin_bottom(0);
    dropdownEventBox.set_margin_top(monitorHeight - dropdownHeight);
  }
}
var calculateMenuPosition = async (positionCoordinates, windowName) => {
  try {
    const dropdownEventBox = getDropdownEventBox(windowName);
    if (!dropdownEventBox) {
      return;
    }
    const focusedHyprlandMonitor = getFocusedHyprlandMonitor();
    if (!focusedHyprlandMonitor) {
      return;
    }
    const dropdownWidth = dropdownEventBox.get_child()?.get_allocation().width ?? 0;
    const dropdownHeight = dropdownEventBox.get_child()?.get_allocation().height ?? 0;
    const monitorScaling = focusedHyprlandMonitor.scale || 1;
    const { width: rawMonitorWidth, height: rawMonitorHeight, transform } = focusedHyprlandMonitor;
    if (!rawMonitorWidth || !rawMonitorHeight) {
      return;
    }
    const { adjustedWidth, adjustedHeight } = applyMonitorScaling(
      rawMonitorWidth,
      rawMonitorHeight,
      monitorScaling
    );
    const isVertical = transform !== void 0 ? transform % 2 !== 0 : false;
    const { finalWidth, finalHeight } = adjustForVerticalTransform(
      adjustedWidth,
      adjustedHeight,
      isVertical
    );
    const { leftMargin, rightMargin } = calculateHorizontalMargins(
      finalWidth,
      dropdownWidth,
      positionCoordinates[0]
    );
    dropdownEventBox.set_margin_left(leftMargin);
    dropdownEventBox.set_margin_right(rightMargin);
    setVerticalPosition(dropdownEventBox, finalHeight, dropdownHeight);
  } catch (caughtError) {
    console.error(`Error getting menu position: ${caughtError}`);
  }
};

// src/components/bar/utils/menu/index.ts
var openDropdownMenu = async (clicked, event, window) => {
  try {
    const middleOfButton = Math.floor(clicked.get_allocated_width() / 2);
    const xAxisOfButtonClick = clicked.get_pointer()[0];
    const middleOffset = middleOfButton - xAxisOfButtonClick;
    const clickPos = event.get_root_coords();
    const adjustedXCoord = clickPos[1] + middleOffset;
    const coords = [adjustedXCoord, clickPos[2]];
    await calculateMenuPosition(coords, window);
    closeAllMenus();
    app_default.toggle_window(window);
  } catch (error) {
    if (error instanceof Error) {
      console.error(`Error calculating menu position: ${error.stack}`);
    } else {
      console.error(`Unknown error occurred: ${error}`);
    }
  }
};
function closeAllMenus() {
  const menuWindows = app_default.get_windows().filter((w) => {
    if (w.name) {
      return /.*menu/.test(w.name);
    }
    return false;
  }).map((window) => window.name);
  menuWindows.forEach((window) => {
    if (window) {
      app_default.get_window(window)?.set_visible(false);
    }
  });
}

// src/lib/shared/eventHandlers/index.ts
function onPrimaryClick(widget, handler2) {
  const id = widget.connect("button-press-event", (self, event) => {
    const eventButton = event.get_button()[1];
    if (eventButton === Gdk.BUTTON_PRIMARY) {
      handler2(self, event);
    }
  });
  return () => widget.disconnect(id);
}
function onSecondaryClick(widget, handler2) {
  const id = widget.connect("button-press-event", (self, event) => {
    const eventButton = event.get_button()[1];
    if (eventButton === Gdk.BUTTON_SECONDARY) {
      handler2(self, event);
    }
  });
  return () => widget.disconnect(id);
}
function onMiddleClick(widget, handler2) {
  const id = widget.connect("button-press-event", (self, event) => {
    const eventButton = event.get_button()[1];
    if (eventButton === Gdk.BUTTON_MIDDLE) {
      handler2(self, event);
    }
  });
  return () => widget.disconnect(id);
}
function onScroll(widget, throttledHandler, scrollUpAction, scrollDownAction) {
  const id = widget.connect("scroll-event", (self, event) => {
    const [directionSuccess, direction] = event.get_scroll_direction();
    const [deltasSuccess, , yScroll] = event.get_scroll_deltas();
    if (directionSuccess) {
      handleScrollDirection(direction, scrollUpAction, scrollDownAction, self, event, throttledHandler);
    } else if (deltasSuccess) {
      handleScrollDeltas(yScroll, scrollUpAction, scrollDownAction, self, event, throttledHandler);
    }
  });
  return () => widget.disconnect(id);
}
function handleScrollDirection(direction, scrollUpAction, scrollDownAction, self, event, throttledHandler) {
  if (direction === Gdk.ScrollDirection.UP) {
    throttledHandler(scrollUpAction, { clicked: self, event });
  } else if (direction === Gdk.ScrollDirection.DOWN) {
    throttledHandler(scrollDownAction, { clicked: self, event });
  }
}
function handleScrollDeltas(yScroll, scrollUpAction, scrollDownAction, self, event, throttledHandler) {
  if (yScroll > 0) {
    throttledHandler(scrollDownAction, { clicked: self, event });
  } else if (yScroll < 0) {
    throttledHandler(scrollUpAction, { clicked: self, event });
  }
}

// src/components/bar/modules/battery/helpers/index.ts
var batteryIcons = {
  0: "\u{F008E}",
  10: "\u{F007A}",
  20: "\u{F007B}",
  30: "\u{F007C}",
  40: "\u{F007D}",
  50: "\u{F007E}",
  60: "\u{F007F}",
  70: "\u{F0080}",
  80: "\u{F0081}",
  90: "\u{F0082}",
  100: "\u{F0079}"
};
var batteryIconsCharging = {
  0: "\u{F089F}",
  10: "\u{F089C}",
  20: "\u{F0086}",
  30: "\u{F0087}",
  40: "\u{F0088}",
  50: "\u{F089D}",
  60: "\u{F0089}",
  70: "\u{F089E}",
  80: "\u{F008A}",
  90: "\u{F008B}",
  100: "\u{F0085}"
};
var getBatteryIcon = (percentage, charging, isCharged) => {
  if (isCharged) {
    return "\u{F17E2}";
  }
  const percentages = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0];
  const foundPercentage = percentages.find((threshold) => threshold <= percentage) ?? 100;
  return charging ? batteryIconsCharging[foundPercentage] : batteryIcons[foundPercentage];
};

// src/components/bar/utils/input/commandExecutor.ts
function runAsyncCommand(cmd, events, fn, postInputUpdater2) {
  if (cmd.startsWith("menu:")) {
    const menuName = cmd.split(":")[1].trim().toLowerCase();
    openDropdownMenu(events.clicked, events.event, `${menuName}menu`);
    handlePostInputUpdater(postInputUpdater2);
    return;
  }
  execAsync(["bash", "-c", cmd]).then((output) => {
    handlePostInputUpdater(postInputUpdater2);
    if (fn !== void 0) {
      fn(output);
    }
  }).catch((err) => console.error(`Error running command "${cmd}": ${err})`));
}
function handlePostInputUpdater(postInputUpdater2) {
  if (postInputUpdater2 !== void 0) {
    postInputUpdater2.set(!postInputUpdater2.get());
  }
}

// src/components/bar/utils/input/throttle.ts
function throttleInput(func, limit) {
  let inThrottle = false;
  return function(...args) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => {
        inThrottle = false;
      }, limit);
    }
  };
}
var throttledScrollHandler = (interval3) => throttleInput((cmd, args, fn, postInputUpdater2) => {
  throttledAsyncCommand(cmd, args, fn, postInputUpdater2);
}, 200 / interval3);
var throttledAsyncCommand = throttleInput(
  (cmd, events, fn, postInputUpdater2) => runAsyncCommand(cmd, events, fn, postInputUpdater2),
  50
);

// src/components/bar/modules/battery/index.tsx
var batteryService = AstalBattery.get_default();
var {
  label: show_label,
  rightClick,
  middleClick,
  scrollUp,
  scrollDown,
  hideLabelWhenFull
} = configuration_default.bar.battery;
var BatteryLabel = () => {
  const batIcon = variable_default.derive(
    [bind(batteryService, "percentage"), bind(batteryService, "charging"), bind(batteryService, "state")],
    (batPercent, batCharging, state) => {
      const batCharged = state === AstalBattery.State.FULLY_CHARGED;
      return getBatteryIcon(Math.floor(batPercent * 100), batCharging, batCharged);
    }
  );
  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor(seconds % 3600 / 60);
    return { hours, minutes };
  };
  const generateTooltip = (timeSeconds, isCharging, isCharged) => {
    if (isCharged === true) {
      return "Full";
    }
    const { hours, minutes } = formatTime(timeSeconds);
    if (isCharging) {
      return `Time to full: ${hours} h ${minutes} min`;
    } else {
      return `Time to empty: ${hours} h ${minutes} min`;
    }
  };
  const componentClassName = variable_default.derive(
    [bind(configuration_default.theme.bar.buttons.style), bind(show_label)],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `battery-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const componentTooltip = variable_default.derive(
    [
      bind(batteryService, "charging"),
      bind(batteryService, "timeToFull"),
      bind(batteryService, "timeToEmpty")
    ],
    (isCharging, timeToFull, timeToEmpty) => {
      const timeRemaining = isCharging ? timeToFull : timeToEmpty;
      return generateTooltip(
        timeRemaining,
        isCharging,
        Math.floor(batteryService.percentage * 100) === 100
      );
    }
  );
  const componentChildren = variable_default.derive(
    [bind(show_label), bind(batteryService, "percentage"), bind(hideLabelWhenFull)],
    (showLabel2, percentage, hideLabelWhenFull2) => {
      const isCharged = Math.round(percentage) === 100;
      const icon14 = /* @__PURE__ */ jsx2("label", { className: "bar-button-icon battery txt-icon", label: batIcon() });
      const label16 = /* @__PURE__ */ jsx2("label", { className: "bar-button-label battery", label: `${Math.floor(percentage * 100)}%` });
      const children = [icon14];
      if (showLabel2 && !(isCharged && hideLabelWhenFull2)) {
        children.push(label16);
      }
      return children;
    }
  );
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      className: componentClassName(),
      tooltipText: componentTooltip(),
      onDestroy: () => {
        batIcon.drop();
        componentClassName.drop();
        componentTooltip.drop();
        componentChildren.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "battery",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        variable_default.derive(
          [
            bind(rightClick),
            bind(middleClick),
            bind(scrollUp),
            bind(scrollDown),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openDropdownMenu(clicked, event, "energymenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp.get(), scrollDown.get())
            );
          }
        );
      }
    }
  };
};

// src/components/bar/modules/bluetooth/index.tsx
import AstalBluetooth from "gi://AstalBluetooth?version=0.1";
var bluetoothService = AstalBluetooth.get_default();
var { rightClick: rightClick2, middleClick: middleClick2, scrollDown: scrollDown2, scrollUp: scrollUp2 } = configuration_default.bar.bluetooth;
var Bluetooth = () => {
  const BluetoothIcon = ({ isPowered: isPowered2 }) => /* @__PURE__ */ jsx2("label", { className: "bar-button-icon bluetooth txt-icon bar", label: isPowered2 ? "\u{F00AF}" : "\u{F00B2}" });
  const BluetoothLabel = ({ isPowered: isPowered2, devices }) => {
    const connectDevices = devices.filter((device) => device.connected);
    const label16 = isPowered2 && connectDevices.length ? ` Connected (${connectDevices.length})` : isPowered2 ? "On" : "Off";
    return /* @__PURE__ */ jsx2("label", { label: label16, className: "bar-button-label bluetooth" });
  };
  const componentClassName = Variable.derive(
    [configuration_default.theme.bar.buttons.style, configuration_default.bar.bluetooth.label],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `bluetooth-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const componentBinding = Variable.derive(
    [
      bind(configuration_default.bar.bluetooth.label),
      bind(bluetoothService, "isPowered"),
      bind(bluetoothService, "devices"),
      bind(bluetoothService, "isConnected")
    ],
    (showLabel2, isPowered2, devices) => {
      if (showLabel2) {
        return /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(BluetoothIcon, { isPowered: isPowered2 }),
          /* @__PURE__ */ jsx2(BluetoothLabel, { isPowered: isPowered2, devices })
        ] });
      }
      return /* @__PURE__ */ jsx2(BluetoothIcon, { isPowered: isPowered2 });
    }
  );
  const component = /* @__PURE__ */ jsx2("box", { className: componentClassName(), children: componentBinding() });
  return {
    component,
    isVisible: true,
    boxClass: "bluetooth",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick2),
            bind(middleClick2),
            bind(scrollUp2),
            bind(scrollDown2),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openDropdownMenu(clicked, event, "bluetoothmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick2.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick2.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp2.get(), scrollDown2.get())
            );
          }
        );
      },
      onDestroy: () => {
        componentClassName.drop();
        componentBinding.drop();
      }
    }
  };
};

// src/components/bar/shared/module/index.tsx
var { style } = configuration_default.theme.bar.buttons;
var Module = ({
  icon: icon14,
  textIcon,
  useTextIcon = bind(Variable(false)),
  label: label16,
  truncationSize = bind(Variable(-1)),
  tooltipText = "",
  boxClass,
  isVis: isVis4,
  props = {},
  showLabelBinding = bind(Variable(true)),
  showIconBinding = bind(Variable(true)),
  showLabel: showLabel2 = true,
  labelHook,
  hook: hook2
}) => {
  const getIconWidget = (useTxtIcn) => {
    const className = `txt-icon bar-button-icon module-icon ${boxClass}`;
    const icn = typeof icon14 === "string" ? icon14 : icon14?.get();
    if (!useTxtIcn && icn !== void 0 && icn.length > 0) {
      return /* @__PURE__ */ jsx2("icon", { className, icon: icon14 });
    }
    const textIcn = typeof textIcon === "string" ? textIcon : textIcon?.get();
    if (textIcn !== void 0 && textIcn.length > 0) {
      return /* @__PURE__ */ jsx2("label", { className, label: textIcon });
    }
  };
  const componentClass = Variable.derive(
    [bind(style), showLabelBinding],
    (style3, shwLabel) => {
      const shouldShowLabel = shwLabel || showLabel2;
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `${boxClass} ${styleMap2[style3]} ${!shouldShowLabel ? "no-label" : ""}`;
    }
  );
  const componentChildren = Variable.derive(
    [showLabelBinding, showIconBinding, useTextIcon],
    (showLabel3, showIcon4, forceTextIcon) => {
      const childrenArray = [];
      const iconWidget = getIconWidget(forceTextIcon);
      if (showIcon4 && iconWidget !== void 0) {
        childrenArray.push(iconWidget);
      }
      if (showLabel3) {
        childrenArray.push(
          /* @__PURE__ */ jsx2(
            "label",
            {
              className: `bar-button-label module-label ${boxClass}`,
              truncate: truncationSize.as((truncSize) => truncSize > 0),
              maxWidthChars: truncationSize.as((truncSize) => truncSize),
              label: label16 ?? "",
              setup: labelHook
            }
          )
        );
      }
      return childrenArray;
    }
  );
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      tooltipText,
      className: componentClass(),
      setup: hook2,
      onDestroy: () => {
        componentChildren.drop();
        componentClass.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    tooltip_text: tooltipText,
    isVis: isVis4,
    boxClass,
    props
  };
};

// src/components/bar/modules/cava/helpers.ts
import AstalCava from "gi://AstalCava?version=0.1";
import AstalMpris from "gi://AstalMpris?version=0.1";
var {
  showActiveOnly,
  bars,
  autoSensitivity,
  lowCutoff,
  highCutoff,
  noiseReduction,
  stereo,
  channels,
  framerate,
  samplerate
} = configuration_default.bar.customModules.cava;
function initVisibilityTracker(isVis4) {
  const cavaService = AstalCava.get_default();
  const mprisService4 = AstalMpris.get_default();
  return Variable.derive([bind(showActiveOnly), bind(mprisService4, "players")], (showActive, players) => {
    isVis4.set(cavaService !== null && (!showActive || players?.length > 0));
  });
}
function initSettingsTracker() {
  const cava = AstalCava.get_default();
  if (!cava) {
    return;
  }
  return Variable.derive(
    [
      bind(bars),
      bind(channels),
      bind(framerate),
      bind(samplerate),
      bind(autoSensitivity),
      bind(lowCutoff),
      bind(highCutoff),
      bind(noiseReduction),
      bind(stereo)
    ],
    (bars2, channels2, framerate2, samplerate2, autoSens, lCutoff, hCutoff, noiseRed, isStereo) => {
      cava.set_autosens(autoSens);
      cava.set_low_cutoff(lCutoff);
      cava.set_high_cutoff(hCutoff);
      cava.set_noise_reduction(noiseRed);
      cava.set_source("auto");
      cava.set_stereo(isStereo);
      cava.set_bars(bars2);
      cava.set_channels(channels2);
      cava.set_framerate(framerate2);
      cava.set_samplerate(samplerate2);
    }
  );
}

// src/components/bar/modules/cava/index.tsx
import AstalCava2 from "gi://AstalCava?version=0.1";

// src/lib/events/mouse.ts
var isPrimaryClick = (event) => event.button === Gdk.BUTTON_PRIMARY;
var isSecondaryClick = (event) => event.button === Gdk.BUTTON_SECONDARY;
var isMiddleClick = (event) => event.button === Gdk.BUTTON_MIDDLE;
var isScrollUp = (event) => {
  const [directionSuccess, direction] = event.get_scroll_direction();
  const [deltaSuccess, , yScroll] = event.get_scroll_deltas();
  if (directionSuccess && direction === Gdk.ScrollDirection.UP) {
    return true;
  }
  if (deltaSuccess && yScroll < 0) {
    return true;
  }
  return false;
};
var isScrollDown = (event) => {
  const [directionSuccess, direction] = event.get_scroll_direction();
  const [deltaSuccess, , yScroll] = event.get_scroll_deltas();
  if (directionSuccess && direction === Gdk.ScrollDirection.DOWN) {
    return true;
  }
  if (deltaSuccess && yScroll > 0) {
    return true;
  }
  return false;
};

// src/components/bar/utils/input/inputHandler.ts
var InputHandlerService = class _InputHandlerService {
  static _instance;
  _EMPTY_CMD = Variable("");
  _scrollSpeed = configuration_default.bar.customModules.scrollSpeed;
  constructor() {
  }
  static getInstance() {
    if (this._instance === void 0) {
      this._instance = new _InputHandlerService();
    }
    return this._instance;
  }
  /**
   * Attaches input handlers to a widget and manages their lifecycle
   */
  attachHandlers(widget, userDefinedActions, postInputUpdater2, customScrollThreshold) {
    const eventHandlers = this._createEventHandlers(
      widget,
      userDefinedActions,
      postInputUpdater2,
      customScrollThreshold
    );
    return this._setupBindings(
      widget,
      userDefinedActions,
      eventHandlers,
      postInputUpdater2,
      customScrollThreshold
    );
  }
  /**
   * Creates event handlers for the widget
   */
  _createEventHandlers(widget, userDefinedActions, postInputUpdater2, customScrollThreshold) {
    const clickHandlers = this._createClickHandlers(widget, userDefinedActions, postInputUpdater2);
    const scrollHandler = this._createScrollHandler(
      widget,
      userDefinedActions,
      postInputUpdater2,
      customScrollThreshold
    );
    return {
      ...clickHandlers,
      ...scrollHandler
    };
  }
  /**
   * Creates click event handlers (primary, secondary, middle)
   */
  _createClickHandlers(widget, userDefinedActions, postInputUpdater2) {
    const eventConfigs = {
      primary: { event: userDefinedActions.onPrimaryClick, handler: onPrimaryClick },
      secondary: { event: userDefinedActions.onSecondaryClick, handler: onSecondaryClick },
      middle: { event: userDefinedActions.onMiddleClick, handler: onMiddleClick }
    };
    return {
      disconnectPrimary: this._createClickHandler(widget, eventConfigs.primary, postInputUpdater2),
      disconnectSecondary: this._createClickHandler(widget, eventConfigs.secondary, postInputUpdater2),
      disconnectMiddle: this._createClickHandler(widget, eventConfigs.middle, postInputUpdater2)
    };
  }
  /**
   * Creates a single click handler
   */
  _createClickHandler(widget, config, postInputUpdater2) {
    return config.handler(widget, (clicked, event) => {
      throttledAsyncCommand(
        this._sanitizeInput(config.event?.cmd),
        { clicked, event },
        config.event?.fn,
        postInputUpdater2
      );
    });
  }
  /**
   * Creates scroll event handler
   */
  _createScrollHandler(widget, userDefinedActions, postInputUpdater2, customScrollThreshold) {
    const interval3 = customScrollThreshold ?? this._scrollSpeed.get();
    const throttledHandler = throttledScrollHandler(interval3);
    const id = widget.connect("scroll-event", (self, event) => {
      const scrollAction = this._getScrollAction(event, userDefinedActions);
      if (scrollAction) {
        throttledHandler(
          this._sanitizeInput(scrollAction.cmd),
          { clicked: self, event },
          scrollAction.fn,
          postInputUpdater2
        );
      }
    });
    return {
      disconnectScroll: () => widget.disconnect(id)
    };
  }
  /**
   * Determines which scroll configuration to use based on event
   */
  _getScrollAction(event, userDefinedActions) {
    if (isScrollUp(event)) {
      return userDefinedActions.onScrollUp;
    }
    if (isScrollDown(event)) {
      return userDefinedActions.onScrollDown;
    }
  }
  /**
   * Sets up reactive bindings that recreate handlers when dependencies change
   */
  _setupBindings(widget, userDefinedActions, handlers, postInputUpdater2, customScrollThreshold) {
    const eventCommands = [
      userDefinedActions.onPrimaryClick?.cmd,
      userDefinedActions.onSecondaryClick?.cmd,
      userDefinedActions.onMiddleClick?.cmd,
      userDefinedActions.onScrollUp?.cmd,
      userDefinedActions.onScrollDown?.cmd
    ];
    const eventCommandBindings = eventCommands.map((cmd) => this._sanitizeVariable(cmd));
    return Variable.derive([bind(this._scrollSpeed), ...eventCommandBindings], () => {
      this._disconnectHandlers(handlers);
      const newHandlers = this._createEventHandlers(
        widget,
        userDefinedActions,
        postInputUpdater2,
        customScrollThreshold
      );
      Object.assign(handlers, newHandlers);
    });
  }
  /**
   * Disconnects all event handlers
   */
  _disconnectHandlers(handlers) {
    handlers.disconnectPrimary();
    handlers.disconnectSecondary();
    handlers.disconnectMiddle();
    handlers.disconnectScroll();
  }
  /**
   * Sanitizes a variable input to a string
   */
  _sanitizeInput(input) {
    if (!input) return "";
    return input.get();
  }
  /**
   * Sanitizes a variable for binding
   */
  _sanitizeVariable(variable) {
    return bind(variable ?? this._EMPTY_CMD);
  }
};

// src/components/bar/modules/cava/index.tsx
var inputHandler = InputHandlerService.getInstance();
var {
  icon: icon2,
  showIcon: label2,
  showActiveOnly: showActiveOnly2,
  barCharacters,
  spaceCharacter,
  leftClick,
  rightClick: rightClick3,
  middleClick: middleClick3,
  scrollUp: scrollUp3,
  scrollDown: scrollDown3
} = configuration_default.bar.customModules.cava;
var isVis = Variable(!showActiveOnly2.get());
var Cava = () => {
  let labelBinding = Variable("");
  const visTracker = initVisibilityTracker(isVis);
  const settingsTracker = initSettingsTracker();
  const cavaService = AstalCava2.get_default();
  if (cavaService) {
    labelBinding = Variable.derive(
      [bind(cavaService, "values"), bind(spaceCharacter), bind(barCharacters)],
      (values, spacing2, blockCharacters) => {
        const valueMap = values.map((v) => {
          const index = Math.floor(v * blockCharacters.length);
          return blockCharacters[Math.min(index, blockCharacters.length - 1)];
        }).join(spacing2);
        return valueMap;
      }
    );
  }
  let inputHandlerBindings;
  return Module({
    isVis: bind(isVis),
    label: labelBinding(),
    showIconBinding: bind(label2),
    textIcon: bind(icon2),
    boxClass: "cava",
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick
          },
          onSecondaryClick: {
            cmd: rightClick3
          },
          onMiddleClick: {
            cmd: middleClick3
          },
          onScrollUp: {
            cmd: scrollUp3
          },
          onScrollDown: {
            cmd: scrollDown3
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        settingsTracker?.drop();
        labelBinding.drop();
        visTracker.drop();
      }
    }
  });
};

// src/lib/units/time/index.ts
var systemTime = Variable(default2.DateTime.new_now_local()).poll(
  1e3,
  () => default2.DateTime.new_now_local()
);

// src/components/bar/modules/clock/index.tsx
var { format, icon: icon3, showIcon: showIcon2, showTime: showTime2, rightClick: rightClick4, middleClick: middleClick4, scrollUp: scrollUp4, scrollDown: scrollDown4 } = configuration_default.bar.clock;
var { style: style2 } = configuration_default.theme.bar.buttons;
var time = Variable.derive([systemTime, format], (c, f) => c.format(f) ?? "");
var Clock = () => {
  const ClockTime = () => /* @__PURE__ */ jsx2("label", { className: "bar-button-label clock bar", label: bind(time) });
  const ClockIcon = () => /* @__PURE__ */ jsx2("label", { className: "bar-button-icon clock txt-icon bar", label: bind(icon3) });
  const componentClassName = Variable.derive(
    [bind(style2), bind(showIcon2), bind(showTime2)],
    (btnStyle, shwIcn, shwLbl) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `clock-container ${styleMap2[btnStyle]} ${!shwLbl ? "no-label" : ""} ${!shwIcn ? "no-icon" : ""}`;
    }
  );
  const componentChildren = Variable.derive([bind(showIcon2), bind(showTime2)], (shIcn, shTm) => {
    if (shIcn && !shTm) {
      return /* @__PURE__ */ jsx2(ClockIcon, {});
    } else if (shTm && !shIcn) {
      return /* @__PURE__ */ jsx2(ClockTime, {});
    }
    return /* @__PURE__ */ jsxs("box", { children: [
      /* @__PURE__ */ jsx2(ClockIcon, {}),
      /* @__PURE__ */ jsx2(ClockTime, {})
    ] });
  });
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      className: componentClassName(),
      onDestroy: () => {
        componentClassName.drop();
        componentChildren.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "clock",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick4),
            bind(middleClick4),
            bind(scrollUp4),
            bind(scrollDown4),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openDropdownMenu(clicked, event, "calendarmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick4.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick4.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp4.get(), scrollDown4.get())
            );
          }
        );
      }
    }
  };
};

// src/services/system/cpuUsage/index.ts
import GTop from "gi://GTop";

// src/lib/bar/helpers.ts
function getLayoutItems() {
  const { layouts: layouts2 } = configuration_default.bar;
  const itemsInLayout = [];
  Object.keys(layouts2.get()).forEach((monitor3) => {
    const leftItems = layouts2.get()[monitor3].left;
    const rightItems = layouts2.get()[monitor3].right;
    const middleItems = layouts2.get()[monitor3].middle;
    itemsInLayout.push(...leftItems);
    itemsInLayout.push(...middleItems);
    itemsInLayout.push(...rightItems);
  });
  return unique(itemsInLayout);
}
function setLayout(layout) {
  try {
    const { layouts: layouts2 } = configuration_default.bar;
    layouts2.set(layout);
    return "Successfully updated layout.";
  } catch (error) {
    return `Failed to set layout: ${error}`;
  }
}

// src/lib/poller/Poller.ts
var { layouts } = configuration_default.bar;
var Poller = class {
  /**
   * Creates an instance of Poller.
   * @param _pollingInterval - The interval at which polling occurs.
   * @param _trackers - An array of trackers to monitor.
   * @param pollingFunction - The function to execute during each poll.
   */
  constructor(_pollingInterval, _trackers, pollingFunction) {
    this._pollingInterval = _pollingInterval;
    this._trackers = _trackers;
    this._pollingFunction = pollingFunction;
  }
  _intervalInstance = null;
  _isExecuting = false;
  _pollingFunction;
  /**
   * Starts the polling process by setting up the interval.
   */
  start() {
    Variable.derive([this._pollingInterval, ...this._trackers], (intervalMs) => {
      this._executePolling(intervalMs);
    })();
  }
  /**
   * Stops the polling process and cleans up resources.
   */
  stop() {
    if (this._intervalInstance !== null) {
      this._intervalInstance.cancel();
      this._intervalInstance = null;
    }
  }
  /**
   * Initializes the polling based on module usage.
   *
   * If not module is provided then we can safely assume that we want
   * to always run the pollig interval.
   *
   * @param moduleName - The name of the module to initialize.
   */
  initialize(moduleName) {
    if (moduleName === void 0) {
      return this.start();
    }
    const initialModules = getLayoutItems();
    if (initialModules.includes(moduleName)) {
      this.start();
    } else {
      this.stop();
    }
    layouts.subscribe(() => {
      const usedModules = getLayoutItems();
      if (usedModules.includes(moduleName)) {
        this.start();
      } else {
        this.stop();
      }
    });
  }
  /**
   * Executes the polling function at the specified interval.
   *
   * @param intervalMs - The polling interval in milliseconds.
   */
  _executePolling(intervalMs) {
    if (this._intervalInstance !== null) {
      this._intervalInstance.cancel();
    }
    if (intervalMs === 0) {
      this._executeSinglePoll();
      return;
    }
    this._intervalInstance = interval(intervalMs, () => this._executePollingCycle());
  }
  /**
   * Executes a single polling operation synchronously.
   */
  _executeSinglePoll() {
    try {
      this._pollingFunction();
    } catch (error) {
      console.error("Error during polling execution:", error);
    }
  }
  /**
   * Executes an asynchronous polling cycle with execution guard.
   * Ensures only one polling cycle runs at a time using the isExecuting flag.
   */
  async _executePollingCycle() {
    if (this._isExecuting) {
      return;
    }
    this._isExecuting = true;
    try {
      await this._pollingFunction();
    } catch (error) {
      console.error("Error during polling execution:", error);
    } finally {
      this._isExecuting = false;
    }
  }
};

// src/lib/poller/FunctionPoller.ts
var FunctionPoller = class {
  /**
   * Creates an instance of FunctionPoller.
   *
   * @param _targetVariable - The target variable to poll.
   * @param _trackers - An array of trackers to monitor.
   * @param _pollingInterval - The interval at which polling occurs.
   * @param _pollingFunction - The function to execute during each poll.
   * @param params - Additional parameters for the polling function.
   *
   * @example
   *
   * ```ts
   * //##################### EXAMPLE ##########################
   *  const cpuPoller = new FunctionPoller<number, []>(
   *    cpuUsage,
   *    [bind(round)],
   *    bind(pollingInterval),
   *    computeCPU,
   *  );
   * //#######################################################
   *
   * ```
   */
  constructor(_targetVariable, _trackers, _pollingInterval, _pollingFunction, ...params) {
    this._targetVariable = _targetVariable;
    this._trackers = _trackers;
    this._pollingInterval = _pollingInterval;
    this._pollingFunction = _pollingFunction;
    this._params = params;
    this._poller = new Poller(this._pollingInterval, this._trackers, this._execute);
  }
  _poller;
  _params;
  /**
   * Executes the polling function with the provided parameters.
   *
   * The result of the function is assigned to the target variable.
   */
  _execute = async () => {
    try {
      const result = await this._pollingFunction(...this._params);
      this._targetVariable.set(result);
    } catch (error) {
      console.error("Error executing polling function:", error);
    }
  };
  /**
   * Starts the polling process.
   */
  start() {
    this._poller.start();
  }
  /**
   * Stops the polling process.
   */
  stop() {
    this._poller.stop();
  }
  /**
   * Initializes the poller with the specified module.
   *
   * @param moduleName - The name of the module to initialize.
   */
  initialize(moduleName) {
    this._poller.initialize(moduleName);
  }
};

// src/services/system/cpuUsage/index.ts
var CpuUsageService = class {
  _updateFrequency;
  _previousCpuData = new GTop.glibtop_cpu();
  _cpuPoller;
  _isInitialized = false;
  _cpu = Variable(0);
  constructor({ frequency } = {}) {
    this._updateFrequency = frequency ?? Variable(2e3);
    GTop.glibtop_get_cpu(this._previousCpuData);
    this._calculateUsage = this._calculateUsage.bind(this);
    this._cpuPoller = new FunctionPoller(
      this.cpu,
      [bind(this._updateFrequency)],
      bind(this._updateFrequency),
      this._calculateUsage
    );
  }
  /**
   * Manually refreshes the CPU usage reading
   */
  refresh() {
    this._cpu.set(this._calculateUsage());
  }
  /**
   * Gets the CPU usage percentage variable
   *
   * @returns Variable containing CPU usage percentage (0-100)
   */
  get cpu() {
    return this._cpu;
  }
  /**
   * Calculates the current CPU usage percentage based on CPU time deltas
   *
   * @returns Current CPU usage percentage
   */
  _calculateUsage() {
    const currentCpuData = new GTop.glibtop_cpu();
    GTop.glibtop_get_cpu(currentCpuData);
    const totalDiff = currentCpuData.total - this._previousCpuData.total;
    const idleDiff = currentCpuData.idle - this._previousCpuData.idle;
    const cpuUsagePercentage = totalDiff > 0 ? (totalDiff - idleDiff) / totalDiff * 100 : 0;
    this._previousCpuData = currentCpuData;
    return cpuUsagePercentage;
  }
  /**
   * Updates the polling frequency for CPU usage monitoring
   *
   * @param timerInMs - New polling interval in milliseconds
   */
  updateTimer(timerInMs) {
    this._updateFrequency.set(timerInMs);
  }
  /**
   * Initializes the CPU usage monitoring service
   */
  initialize() {
    if (!this._isInitialized) {
      this._cpuPoller.initialize();
      this._isInitialized = true;
    }
  }
  /**
   * Stops the CPU usage polling
   */
  stopPoller() {
    this._cpuPoller.stop();
  }
  /**
   * Starts the CPU usage polling
   */
  startPoller() {
    this._cpuPoller.start();
  }
  /**
   * Cleans up resources and stops monitoring
   */
  destroy() {
    this._cpuPoller.stop();
    this._cpu.drop();
    this._updateFrequency.drop();
  }
};
var cpuUsage_default = CpuUsageService;

// src/components/bar/modules/cpu/index.tsx
var inputHandler2 = InputHandlerService.getInstance();
var { label: label3, round, leftClick: leftClick2, rightClick: rightClick5, middleClick: middleClick5, scrollUp: scrollUp5, scrollDown: scrollDown5, pollingInterval, icon: icon4 } = configuration_default.bar.customModules.cpu;
var cpuService = new cpuUsage_default({ frequency: pollingInterval });
var Cpu = () => {
  cpuService.initialize();
  const labelBinding = Variable.derive(
    [bind(cpuService.cpu), bind(round)],
    (cpuUsg, round6) => {
      return round6 ? `${Math.round(cpuUsg)}%` : `${cpuUsg.toFixed(2)}%`;
    }
  );
  let inputHandlerBindings;
  const cpuModule = Module({
    textIcon: bind(icon4),
    label: labelBinding(),
    tooltipText: "CPU",
    boxClass: "cpu",
    showLabelBinding: bind(label3),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler2.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick2
          },
          onSecondaryClick: {
            cmd: rightClick5
          },
          onMiddleClick: {
            cmd: middleClick5
          },
          onScrollUp: {
            cmd: scrollUp5
          },
          onScrollDown: {
            cmd: scrollDown5
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        labelBinding.drop();
        cpuService.destroy();
      }
    }
  });
  return cpuModule;
};

// src/services/system/cputemp/index.ts
import GLib2 from "gi://GLib?version=2.0";

// src/services/system/cputemp/sensorDiscovery.ts
import GLib from "gi://GLib?version=2.0";
var CpuTempSensorDiscovery = class {
  static _PRIORITY_SENSORS = [
    /** Intel */
    "coretemp",
    /** AMD Ryzen */
    "k10temp"
  ];
  static _HWMON_PATH = "/sys/class/hwmon";
  static _THERMAL_PATH = "/sys/class/thermal";
  static _THERMAL_FALLBACK = "/sys/class/thermal/thermal_zone0/temp";
  /**
   * Auto-discovers the best CPU temperature sensor available on the system
   */
  static discover() {
    const prioritySensor = this._findPrioritySensor();
    if (prioritySensor) return prioritySensor;
    if (this.isValid(this._THERMAL_FALLBACK)) return this._THERMAL_FALLBACK;
    return;
  }
  /**
   * Gets all available temperature sensors on the system
   */
  static getAllSensors() {
    const hwmonSensors = this._getAllHwmonSensors();
    const thermalSensors = this._getAllThermalSensors();
    return [...hwmonSensors, ...thermalSensors];
  }
  /**
   * Validates if sensor path exists and is readable
   *
   * @param path - Sensor file path to validate
   */
  static isValid(path) {
    try {
      const [success] = GLib.file_get_contents(path);
      return success;
    } catch {
      return false;
    }
  }
  /**
   * Searches for priority CPU sensors (Intel coretemp, AMD k10temp) in order of preference
   */
  static _findPrioritySensor() {
    for (const sensorName of this._PRIORITY_SENSORS) {
      const sensor3 = this._findHwmonSensor(sensorName);
      if (!sensor3 || !this.isValid(sensor3)) continue;
      return sensor3;
    }
    return;
  }
  /**
   * Finds a specific hardware monitor sensor by chip name
   *
   * @param chipName - Name of the chip to search for (e.g., 'coretemp', 'k10temp')
   */
  static _findHwmonSensor(chipName) {
    const dir = this._openDirectory(this._HWMON_PATH);
    if (!dir) return;
    try {
      return this._searchDirectoryForChip(dir, chipName);
    } finally {
      dir.close();
    }
  }
  /**
   * Searches through a directory for a specific chip by name
   *
   * @param dir - Open directory handle to search through
   * @param chipName - Name of the chip to find
   */
  static _searchDirectoryForChip(dir, chipName) {
    let dirname;
    while ((dirname = dir.read_name()) !== null) {
      const sensor3 = this._checkHwmonDir(dirname, chipName);
      if (sensor3) return sensor3;
    }
    return;
  }
  /**
   * Checks if a hwmon directory contains the specified chip and returns its temp sensor path
   *
   * @param dirname - Directory name to check (e.g., 'hwmon0')
   * @param chipName - Expected chip name to match against
   */
  static _checkHwmonDir(dirname, chipName) {
    const nameFile = `${this._HWMON_PATH}/${dirname}/name`;
    const name2 = this._readFileContent(nameFile);
    if (!name2 || name2 !== chipName) return;
    return `${this._HWMON_PATH}/${dirname}/temp1_input`;
  }
  /**
   * Collects all hardware monitor sensors from the system
   */
  static _getAllHwmonSensors() {
    const dir = this._openDirectory(this._HWMON_PATH);
    if (!dir) return [];
    try {
      return this._collectHwmonSensors(dir);
    } finally {
      dir.close();
    }
  }
  /**
   * Iterates through hwmon directory entries and collects valid sensor information
   *
   * @param dir - Open hwmon directory handle
   */
  static _collectHwmonSensors(dir) {
    const sensors = [];
    let dirname;
    while ((dirname = dir.read_name()) !== null) {
      const sensor3 = this._createHwmonSensorInfo(dirname);
      if (sensor3) sensors.push(sensor3);
    }
    return sensors;
  }
  /**
   * Creates sensor info object for a hwmon device if it has valid temperature input
   * @param dirname - hwmon directory name (e.g., 'hwmon0')
   */
  static _createHwmonSensorInfo(dirname) {
    const nameFile = `${this._HWMON_PATH}/${dirname}/name`;
    const name2 = this._readFileContent(nameFile);
    if (!name2) return;
    const tempPath = `${this._HWMON_PATH}/${dirname}/temp1_input`;
    if (!this.isValid(tempPath)) return;
    return {
      path: tempPath,
      name: name2,
      type: "hwmon"
    };
  }
  /**
   * Collects all thermal zone sensors from the system
   */
  static _getAllThermalSensors() {
    const dir = this._openDirectory(this._THERMAL_PATH);
    if (!dir) return [];
    try {
      return this._collectThermalSensors(dir);
    } finally {
      dir.close();
    }
  }
  /**
   * Iterates through thermal zone entries and collects valid sensor information
   *
   * @param dir - Open thermal directory handle
   */
  static _collectThermalSensors(dir) {
    const sensors = [];
    let dirname;
    while ((dirname = dir.read_name()) !== null) {
      if (!dirname.startsWith("thermal_zone")) continue;
      const sensor3 = this._createThermalSensorInfo(dirname);
      if (sensor3) sensors.push(sensor3);
    }
    return sensors;
  }
  /**
   * Creates sensor info object for a thermal zone if it has valid temperature file
   *
   * @param dirname - Thermal zone directory name (e.g., 'thermal_zone0')
   */
  static _createThermalSensorInfo(dirname) {
    const tempPath = `${this._THERMAL_PATH}/${dirname}/temp`;
    if (!this.isValid(tempPath)) return;
    return {
      path: tempPath,
      name: dirname,
      type: "thermal"
    };
  }
  /**
   * Safely opens a directory for reading, returns undefined on failure
   *
   * @param path - Full path to the directory to open
   */
  static _openDirectory(path) {
    try {
      return GLib.Dir.open(path, 0);
    } catch {
      return;
    }
  }
  /**
   * Reads and returns trimmed file content, returns undefined on failure
   *
   * @param path - Full path to the file to read
   */
  static _readFileContent(path) {
    try {
      const [success, bytes] = GLib.file_get_contents(path);
      if (!success || !bytes) return;
      return new TextDecoder("utf-8").decode(bytes).trim();
    } catch {
      return;
    }
  }
};

// src/services/system/cputemp/index.ts
var CpuTempService = class {
  _sensor;
  _updateFrequency;
  _tempPoller;
  _isInitialized = false;
  _temperature = Variable(0);
  _resolvedSensorPath;
  constructor({ sensor: sensor3, frequency } = {}) {
    this._sensor = sensor3 ?? Variable("auto");
    this._updateFrequency = frequency || Variable(2e3);
    this._readTemperature = this._readTemperature.bind(this);
    this._tempPoller = new FunctionPoller(
      this._temperature,
      [],
      bind(this._updateFrequency),
      this._readTemperature
    );
    this._sensor.subscribe(() => this._resolveSensorPath());
  }
  /**
   * Resolves the sensor path based on configuration
   */
  _resolveSensorPath() {
    const sensorValue = this._sensor.get();
    if (sensorValue === "auto" || sensorValue === "") {
      this._resolvedSensorPath = CpuTempSensorDiscovery.discover();
      if (!this._resolvedSensorPath) console.error("No CPU temperature sensor found");
      return;
    }
    if (CpuTempSensorDiscovery.isValid(sensorValue)) {
      this._resolvedSensorPath = sensorValue;
      return;
    }
    console.error(`Invalid sensor: ${sensorValue}, falling back to auto-discovery`);
    this._resolvedSensorPath = CpuTempSensorDiscovery.discover();
  }
  /**
   * Reads CPU temperature from the sensor file and returns it in Celsius
   */
  _readTemperature() {
    if (!this._resolvedSensorPath) return 0;
    try {
      const [success, tempBytes] = GLib2.file_get_contents(this._resolvedSensorPath);
      if (!success || !tempBytes) return 0;
      const tempInfo = new TextDecoder("utf-8").decode(tempBytes);
      const tempValueMillidegrees = parseInt(tempInfo.trim(), 10);
      return tempValueMillidegrees / 1e3;
    } catch (error) {
      console.error("Error reading CPU temperature:", error);
      return 0;
    }
  }
  /**
   * Gets the CPU temperature variable
   *
   * @returns Variable containing temperature in Celsius
   */
  get temperature() {
    return this._temperature;
  }
  /**
   * Gets the sensor configuration variable
   *
   * @returns Variable containing sensor path or 'auto'
   */
  get sensor() {
    return this._sensor;
  }
  /**
   * Gets the currently resolved sensor file path
   *
   * @returns The actual sensor path being used
   */
  get currentSensorPath() {
    return this._resolvedSensorPath;
  }
  /**
   * Manually refreshes the temperature reading
   */
  refresh() {
    this._temperature.set(this._readTemperature());
  }
  /**
   * Updates the sensor path and refreshes the temperature
   *
   * @param sensor - New sensor path or 'auto' for auto-discovery
   */
  updateSensor(sensor3) {
    this._sensor.set(sensor3);
    this.refresh();
  }
  /**
   * Updates the polling frequency
   *
   * @param frequency - New polling interval in milliseconds
   */
  updateFrequency(frequency) {
    this._updateFrequency.set(frequency);
  }
  /**
   * Initializes the CPU temperature monitoring poller
   */
  initialize() {
    if (this._isInitialized) return;
    this._resolveSensorPath();
    this._tempPoller.initialize();
    this._isInitialized = true;
  }
  /**
   * Stops the temperature polling
   */
  stopPoller() {
    this._tempPoller.stop();
  }
  /**
   * Starts the temperature polling
   */
  startPoller() {
    this._tempPoller.start();
  }
  /**
   * Cleans up resources and stops monitoring
   */
  destroy() {
    this._tempPoller.stop();
    this._temperature.drop();
    this._sensor.drop();
    this._updateFrequency.drop();
  }
};
var cputemp_default = CpuTempService;

// src/lib/units/temperature/index.ts
var TemperatureConverter = class _TemperatureConverter {
  _value;
  _unit;
  constructor(value, unit5) {
    this._value = value;
    this._unit = unit5;
  }
  /**
   * Creates a converter from Celsius
   * @param value - Temperature in Celsius
   */
  static fromCelsius(value) {
    return new _TemperatureConverter(value, "celsius");
  }
  /**
   * Creates a converter from Fahrenheit
   * @param value - Temperature in Fahrenheit
   */
  static fromFahrenheit(value) {
    return new _TemperatureConverter(value, "fahrenheit");
  }
  /**
   * Creates a converter from Kelvin
   * @param value - Temperature in Kelvin
   */
  static fromKelvin(value) {
    return new _TemperatureConverter(value, "kelvin");
  }
  /**
   * Converts the temperature to Celsius (base unit)
   */
  _toBaseUnit() {
    switch (this._unit) {
      case "celsius":
        return this._value;
      case "fahrenheit":
        return (this._value - 32) * 5 / 9;
      case "kelvin":
        return this._value - 273.15;
    }
  }
  /**
   * Converts to Celsius
   * @param precision - Number of decimal places (optional)
   */
  toCelsius(precision) {
    const value = this._toBaseUnit();
    return precision !== void 0 ? Number(value.toFixed(precision)) : value;
  }
  /**
   * Converts to Fahrenheit
   * @param precision - Number of decimal places (optional)
   */
  toFahrenheit(precision) {
    const celsius = this._toBaseUnit();
    const value = celsius * 9 / 5 + 32;
    return precision !== void 0 ? Number(value.toFixed(precision)) : value;
  }
  /**
   * Converts to Kelvin
   * @param precision - Number of decimal places (optional)
   */
  toKelvin(precision) {
    const celsius = this._toBaseUnit();
    const value = celsius + 273.15;
    return precision !== void 0 ? Number(value.toFixed(precision)) : value;
  }
  /**
   * Formats the temperature with a specific unit and precision
   * @param unit - Target unit
   * @param precision - Number of decimal places (default: 0)
   */
  format(unit5, precision = 0) {
    let value;
    let symbol;
    switch (unit5) {
      case "celsius":
        value = this.toCelsius();
        symbol = "\xB0 C";
        break;
      case "fahrenheit":
        value = this.toFahrenheit();
        symbol = "\xB0 F";
        break;
      case "kelvin":
        value = this.toKelvin();
        symbol = " K";
        break;
    }
    return `${value.toFixed(precision)}${symbol}`;
  }
  /**
   * Formats to Celsius
   * @param precision - Number of decimal places
   */
  formatCelsius(precision = 0) {
    return this.format("celsius", precision);
  }
  /**
   * Formats to Fahrenheit
   * @param precision - Number of decimal places
   */
  formatFahrenheit(precision = 0) {
    return this.format("fahrenheit", precision);
  }
  /**
   * Formats to Kelvin
   * @param precision - Number of decimal places
   */
  formatKelvin(precision = 0) {
    return this.format("kelvin", precision);
  }
};

// src/components/bar/modules/cputemp/helpers/index.ts
import GLib3 from "gi://GLib?version=2.0";
var { pollingInterval: pollingInterval2, sensor } = configuration_default.bar.customModules.cpuTemp;
function getCpuTempTooltip(cpuTempService2) {
  return bind(cpuTempService2.temperature).as((temp) => {
    const currentPath = cpuTempService2.currentSensorPath;
    const configuredSensor = sensor.get();
    const isAuto = configuredSensor === "auto" || configuredSensor === "";
    const tempC = TemperatureConverter.fromCelsius(temp).formatCelsius();
    const tempF = TemperatureConverter.fromCelsius(temp).formatFahrenheit();
    const lines = [
      "CPU Temperature",
      "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500",
      `Current: ${tempC} (${tempF})`,
      "",
      "Sensor Information",
      "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"
    ];
    if (currentPath) {
      const sensorType = getSensorType(currentPath);
      const sensorName = getSensorName(currentPath);
      const chipName = getChipName(currentPath);
      lines.push(`Mode: ${isAuto ? "Auto-discovered" : "User-configured"}`, `Type: ${sensorType}`);
      if (chipName) {
        lines.push(`Chip: ${chipName}`);
      }
      lines.push(`Device: ${sensorName}`, `Path: ${currentPath}`);
    } else {
      lines.push("Status: No sensor found", "Try setting a manual sensor path");
    }
    const interval3 = pollingInterval2.get();
    lines.push("", `Update interval: ${interval3}ms`);
    const allSensors = CpuTempSensorDiscovery.getAllSensors();
    if (allSensors.length > 1) {
      lines.push("", `Available sensors: ${allSensors.length}`);
    }
    return lines.join("\n");
  });
}
function getSensorType(path) {
  if (path.includes("/sys/class/hwmon/")) return "Hardware Monitor";
  if (path.includes("/sys/class/thermal/")) return "Thermal Zone";
  return "Unknown";
}
function getSensorName(path) {
  if (path.includes("/sys/class/hwmon/")) {
    const match = path.match(/hwmon(\d+)/);
    return match ? `hwmon${match[1]}` : "Unknown";
  }
  if (path.includes("/sys/class/thermal/")) {
    const match = path.match(/thermal_zone(\d+)/);
    return match ? `thermal_zone${match[1]}` : "Unknown";
  }
  return "Unknown";
}
function getChipName(path) {
  if (!path.includes("/sys/class/hwmon/")) return void 0;
  try {
    const match = path.match(/\/sys\/class\/hwmon\/hwmon\d+/);
    if (!match) return void 0;
    const nameFile = `${match[0]}/name`;
    const [success, bytes] = GLib3.file_get_contents(nameFile);
    if (success && bytes) {
      return new TextDecoder("utf-8").decode(bytes).trim();
    }
  } catch (error) {
    if (error instanceof Error) {
      console.debug(`Failed to get chip name: ${error.message}`);
    }
  }
  return void 0;
}

// src/components/bar/modules/cputemp/index.tsx
var inputHandler3 = InputHandlerService.getInstance();
var {
  label: label4,
  sensor: sensor2,
  round: round2,
  showUnit,
  unit,
  leftClick: leftClick3,
  rightClick: rightClick6,
  middleClick: middleClick6,
  scrollUp: scrollUp6,
  scrollDown: scrollDown6,
  pollingInterval: pollingInterval3,
  icon: icon5
} = configuration_default.bar.customModules.cpuTemp;
var cpuTempService = new cputemp_default({ frequency: pollingInterval3, sensor: sensor2 });
var CpuTemp = () => {
  cpuTempService.initialize();
  const bindings = Variable.derive([bind(sensor2), bind(round2), bind(unit)], (sensorName) => {
    cpuTempService.refresh();
    if (cpuTempService.sensor.get() !== sensorName) {
      cpuTempService.updateSensor(sensorName);
    }
  });
  const labelBinding = Variable.derive(
    [bind(cpuTempService.temperature), bind(unit), bind(showUnit), bind(round2)],
    (cpuTemp, tempUnit, showUnit2, roundValue) => {
      const tempConverter = TemperatureConverter.fromCelsius(cpuTemp);
      const isImperial = tempUnit === "imperial";
      const precision = roundValue ? 0 : 2;
      if (showUnit2) {
        return isImperial ? tempConverter.formatFahrenheit(precision) : tempConverter.formatCelsius(precision);
      }
      const temp = isImperial ? tempConverter.toFahrenheit(precision) : tempConverter.toCelsius(precision);
      return temp.toString();
    }
  );
  let inputHandlerBindings;
  const cpuTempModule = Module({
    textIcon: bind(icon5),
    label: labelBinding(),
    tooltipText: getCpuTempTooltip(cpuTempService),
    boxClass: "cpu-temp",
    showLabelBinding: bind(label4),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler3.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick3
          },
          onSecondaryClick: {
            cmd: rightClick6
          },
          onMiddleClick: {
            cmd: middleClick6
          },
          onScrollUp: {
            cmd: scrollUp6
          },
          onScrollDown: {
            cmd: scrollDown6
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        cpuTempService.destroy();
        labelBinding.drop();
        bindings.drop();
      }
    }
  });
  return cpuTempModule;
};

// src/components/bar/modules/hypridle/index.tsx
var inputHandler4 = InputHandlerService.getInstance();
var { label: label5, onIcon, offIcon, onLabel, offLabel, rightClick: rightClick7, middleClick: middleClick7, scrollUp: scrollUp7, scrollDown: scrollDown7 } = configuration_default.bar.customModules.hypridle;
function toggleInhibit() {
  idleInhibit.set(idleInhibit.get() === false);
}
var Hypridle = () => {
  const iconBinding = variable_default.derive(
    [bind(idleInhibit), bind(onIcon), bind(offIcon)],
    (active3, onIcn, offIcn) => {
      return active3 === true ? onIcn : offIcn;
    }
  );
  const labelBinding = variable_default.derive(
    [bind(idleInhibit), bind(onLabel), bind(offLabel)],
    (active3, onLbl, offLbl) => {
      return active3 === true ? onLbl : offLbl;
    }
  );
  let inputHandlerBindings;
  const hypridleModule = Module({
    textIcon: iconBinding(),
    tooltipText: bind(idleInhibit).as(
      (active3) => `Idle Inhibitor: ${active3 === true ? "Enabled" : "Disabled"}`
    ),
    boxClass: "hypridle",
    label: labelBinding(),
    showLabelBinding: bind(label5),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler4.attachHandlers(self, {
          onPrimaryClick: {
            fn: () => {
              toggleInhibit();
            }
          },
          onSecondaryClick: {
            cmd: rightClick7
          },
          onMiddleClick: {
            cmd: middleClick7
          },
          onScrollUp: {
            cmd: scrollUp7
          },
          onScrollDown: {
            cmd: scrollDown7
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        iconBinding.drop();
        labelBinding.drop();
      }
    }
  });
  return hypridleModule;
};

// src/components/bar/modules/hyprsunset/helpers/index.ts
var { temperature } = configuration_default.bar.customModules.hyprsunset;
var isActiveCommand = `bash -c "pgrep -x 'hyprsunset' > /dev/null && echo 'yes' || echo 'no'"`;
var isActive = Variable(false);
var toggleSunset = (isActive2) => {
  execAsync(isActiveCommand).then((res) => {
    if (res === "no") {
      execAsync(`bash -c "nohup hyprsunset -t ${temperature.get()} > /dev/null 2>&1 &"`).then(() => {
        execAsync(isActiveCommand).then((res2) => {
          isActive2.set(res2 === "yes");
        });
      });
    } else {
      execAsync('bash -c "pkill hyprsunset "').then(() => {
        execAsync(isActiveCommand).then((res2) => {
          isActive2.set(res2 === "yes");
        });
      });
    }
  });
};
var checkSunsetStatus = () => {
  execAsync(isActiveCommand).then((res) => {
    isActive.set(res === "yes");
  });
};

// src/components/bar/modules/hyprsunset/index.tsx
var inputHandler5 = InputHandlerService.getInstance();
var {
  label: label6,
  pollingInterval: pollingInterval4,
  onIcon: onIcon2,
  offIcon: offIcon2,
  onLabel: onLabel2,
  offLabel: offLabel2,
  rightClick: rightClick8,
  middleClick: middleClick8,
  scrollUp: scrollUp8,
  scrollDown: scrollDown8,
  temperature: temperature2
} = configuration_default.bar.customModules.hyprsunset;
var dummyVar = Variable(void 0);
checkSunsetStatus();
var sunsetPoller = new FunctionPoller(
  dummyVar,
  [],
  bind(pollingInterval4),
  checkSunsetStatus
);
sunsetPoller.initialize("hyprsunset");
var throttledToggleSunset = throttleInput(() => toggleSunset(isActive), 1e3);
var Hyprsunset = () => {
  const iconBinding = Variable.derive(
    [bind(isActive), bind(onIcon2), bind(offIcon2)],
    (active3, onIcn, offIcn) => {
      return active3 ? onIcn : offIcn;
    }
  );
  const tooltipBinding = Variable.derive([isActive, temperature2], (active3, temp) => {
    return `Hyprsunset ${active3 ? "enabled" : "disabled"}
Temperature: ${temp}`;
  });
  const labelBinding = Variable.derive(
    [bind(isActive), bind(onLabel2), bind(offLabel2)],
    (active3, onLbl, offLbl) => {
      return active3 ? onLbl : offLbl;
    }
  );
  let inputHandlerBindings;
  const hyprsunsetModule = Module({
    textIcon: iconBinding(),
    tooltipText: tooltipBinding(),
    boxClass: "hyprsunset",
    label: labelBinding(),
    showLabelBinding: bind(label6),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler5.attachHandlers(self, {
          onPrimaryClick: {
            fn: () => {
              throttledToggleSunset();
            }
          },
          onSecondaryClick: {
            cmd: rightClick8
          },
          onMiddleClick: {
            cmd: middleClick8
          },
          onScrollUp: {
            cmd: scrollUp8
          },
          onScrollDown: {
            cmd: scrollDown8
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        iconBinding.drop();
        tooltipBinding.drop();
        labelBinding.drop();
      }
    }
  });
  return hyprsunsetModule;
};

// src/components/bar/modules/kblayout/helpers/layouts.ts
var layoutMapObj = {
  "Abkhazian (Russia)": "RU (Ab)",
  Akan: "GH (Akan)",
  Albanian: "AL",
  "Albanian (Plisi)": "AL (Plisi)",
  "Albanian (Veqilharxhi)": "AL (Veqilharxhi)",
  Amharic: "ET",
  Arabic: "ARA",
  "Arabic (Algeria)": "DZ (Ar)",
  "Arabic (AZERTY, Eastern Arabic numerals)": "ARA (Azerty Digits)",
  "Arabic (AZERTY)": "ARA (Azerty)",
  "Arabic (Buckwalter)": "ARA (Buckwalter)",
  "Arabic (Eastern Arabic numerals)": "ARA (Digits)",
  "Arabic (Macintosh)": "ARA (Mac)",
  "Arabic (Morocco)": "MA",
  "Arabic (OLPC)": "ARA (Olpc)",
  "Arabic (Pakistan)": "PK (Ara)",
  "Arabic (QWERTY, Eastern Arabic numerals)": "ARA (Qwerty Digits)",
  "Arabic (QWERTY)": "ARA (Qwerty)",
  "Arabic (Syria)": "SY",
  Armenian: "AM",
  "Armenian (alt. eastern)": "AM (Eastern-Alt)",
  "Armenian (alt. phonetic)": "AM (Phonetic-Alt)",
  "Armenian (eastern)": "AM (Eastern)",
  "Armenian (phonetic)": "AM (Phonetic)",
  "Armenian (western)": "AM (Western)",
  "Asturian (Spain, with bottom-dot H and L)": "ES (Ast)",
  Avatime: "GH (Avn)",
  Azerbaijani: "AZ",
  "Azerbaijani (Cyrillic)": "AZ (Cyrillic)",
  "Azerbaijani (Iran)": "IR (Azb)",
  Bambara: "ML",
  Bangla: "BD",
  "Bangla (India, Baishakhi InScript)": "IN (Ben Inscript)",
  "Bangla (India, Baishakhi)": "IN (Ben Baishakhi)",
  "Bangla (India, Bornona)": "IN (Ben Bornona)",
  "Bangla (India, Gitanjali)": "IN (Ben Gitanjali)",
  "Bangla (India, Probhat)": "IN (Ben Probhat)",
  "Bangla (India)": "IN (Ben)",
  "Bangla (Probhat)": "BD (Probhat)",
  Bashkirian: "RU (Bak)",
  Belarusian: "BY",
  "Belarusian (intl.)": "BY (Intl)",
  "Belarusian (Latin)": "BY (Latin)",
  "Belarusian (legacy)": "BY (Legacy)",
  "Belarusian (phonetic)": "BY (Phonetic)",
  Belgian: "BE",
  "Belgian (alt.)": "BE (Oss)",
  "Belgian (ISO, alt.)": "BE (Iso-Alternate)",
  "Belgian (Latin-9 only, alt.)": "BE (Oss Latin9)",
  "Belgian (no dead keys)": "BE (Nodeadkeys)",
  "Belgian (Wang 724 AZERTY)": "BE (Wang)",
  "Berber (Algeria, Latin)": "DZ",
  "Berber (Algeria, Tifinagh)": "DZ (Ber)",
  "Berber (Morocco, Tifinagh alt.)": "MA (Tifinagh-Alt)",
  "Berber (Morocco, Tifinagh extended phonetic)": "MA (Tifinagh-Extended-Phonetic)",
  "Berber (Morocco, Tifinagh extended)": "MA (Tifinagh-Extended)",
  "Berber (Morocco, Tifinagh phonetic, alt.)": "MA (Tifinagh-Alt-Phonetic)",
  "Berber (Morocco, Tifinagh phonetic)": "MA (Tifinagh-Phonetic)",
  "Berber (Morocco, Tifinagh)": "MA (Tifinagh)",
  Bosnian: "BA",
  "Bosnian (US, with Bosnian digraphs)": "BA (Unicodeus)",
  "Bosnian (US)": "BA (Us)",
  "Bosnian (with Bosnian digraphs)": "BA (Unicode)",
  "Bosnian (with guillemets)": "BA (Alternatequotes)",
  Braille: "BRAI",
  "Braille (left-handed inverted thumb)": "BRAI (Left Hand Invert)",
  "Braille (left-handed)": "BRAI (Left Hand)",
  "Braille (right-handed inverted thumb)": "BRAI (Right Hand Invert)",
  "Braille (right-handed)": "BRAI (Right Hand)",
  "Breton (France)": "FR (Bre)",
  Bulgarian: "BG",
  "Bulgarian (enhanced)": "BG (Bekl)",
  "Bulgarian (new phonetic)": "BG (Bas Phonetic)",
  "Bulgarian (traditional phonetic)": "BG (Phonetic)",
  Burmese: "MM",
  "Burmese Zawgyi": "MM (Zawgyi)",
  "Cameroon (AZERTY, intl.)": "CM (Azerty)",
  "Cameroon (Dvorak, intl.)": "CM (Dvorak)",
  "Cameroon Multilingual (QWERTY, intl.)": "CM (Qwerty)",
  "Canadian (CSA)": "CA (Multix)",
  "Catalan (Spain, with middle-dot L)": "ES (Cat)",
  Cherokee: "US (Chr)",
  Chinese: "CN",
  Chuvash: "RU (Cv)",
  "Chuvash (Latin)": "RU (Cv Latin)",
  CloGaelach: "IE (CloGaelach)",
  "Crimean Tatar (Turkish Alt-Q)": "UA (Crh Alt)",
  "Crimean Tatar (Turkish F)": "UA (Crh F)",
  "Crimean Tatar (Turkish Q)": "UA (Crh)",
  Croatian: "HR",
  "Croatian (US, with Croatian digraphs)": "HR (Unicodeus)",
  "Croatian (US)": "HR (Us)",
  "Croatian (with Croatian digraphs)": "HR (Unicode)",
  "Croatian (with guillemets)": "HR (Alternatequotes)",
  Czech: "CZ",
  "Czech (QWERTY, extended backslash)": "CZ (Qwerty Bksl)",
  "Czech (QWERTY, Macintosh)": "CZ (Qwerty-Mac)",
  "Czech (QWERTY)": "CZ (Qwerty)",
  "Czech (UCW, only accented letters)": "CZ (Ucw)",
  "Czech (US, Dvorak, UCW support)": "CZ (Dvorak-Ucw)",
  "Czech (with <\\|> key)": "CZ (Bksl)",
  Danish: "DK",
  "Danish (Dvorak)": "DK (Dvorak)",
  "Danish (Macintosh, no dead keys)": "DK (Mac Nodeadkeys)",
  "Danish (Macintosh)": "DK (Mac)",
  "Danish (no dead keys)": "DK (Nodeadkeys)",
  "Danish (Windows)": "DK (Winkeys)",
  Dari: "AF",
  "Dari (Afghanistan, OLPC)": "AF (Fa-Olpc)",
  Dhivehi: "MV",
  Dutch: "NL",
  "Dutch (Macintosh)": "NL (Mac)",
  "Dutch (standard)": "NL (Std)",
  "Dutch (US)": "NL (Us)",
  Dzongkha: "BT",
  "English (Australian)": "AU",
  "English (Cameroon)": "CM",
  "English (Canada)": "CA (Eng)",
  "English (classic Dvorak)": "US (Dvorak-Classic)",
  "English (Colemak-DH ISO)": "US (Colemak Dh Iso)",
  "English (Colemak-DH)": "US (Colemak Dh)",
  "English (Colemak)": "US (Colemak)",
  "English (Dvorak, alt. intl.)": "US (Dvorak-Alt-Intl)",
  "English (Dvorak, intl., with dead keys)": "US (Dvorak-Intl)",
  "English (Dvorak, left-handed)": "US (Dvorak-L)",
  "English (Dvorak, Macintosh)": "US (Dvorak-Mac)",
  "English (Dvorak, right-handed)": "US (Dvorak-R)",
  "English (Dvorak)": "US (Dvorak)",
  "English (Ghana, GILLBT)": "GH (Gillbt)",
  "English (Ghana, multilingual)": "GH (Generic)",
  "English (Ghana)": "GH",
  "English (India, with rupee)": "IN (Eng)",
  "English (intl., with AltGr dead keys)": "US (Altgr-Intl)",
  "English (Macintosh)": "US (Mac)",
  "English (Mali, US, intl.)": "ML (Us-Intl)",
  "English (Mali, US, Macintosh)": "ML (Us-Mac)",
  "English (Nigeria)": "NG",
  "English (Norman)": "US (Norman)",
  "English (programmer Dvorak)": "US (Dvp)",
  "English (South Africa)": "ZA",
  "English (the divide/multiply toggle the layout)": "US (Olpc2)",
  "English (UK, Colemak-DH)": "GB (Colemak Dh)",
  "English (UK, Colemak)": "GB (Colemak)",
  "English (UK, Dvorak, with UK punctuation)": "GB (Dvorakukp)",
  "English (UK, Dvorak)": "GB (Dvorak)",
  "English (UK, extended, Windows)": "GB (Extd)",
  "English (UK, intl., with dead keys)": "GB (Intl)",
  "English (UK, Macintosh, intl.)": "GB (Mac Intl)",
  "English (UK, Macintosh)": "GB (Mac)",
  "English (UK)": "GB",
  "English (US, alt. intl.)": "US (Alt-Intl)",
  "English (US, euro on 5)": "US (Euro)",
  "English (US, intl., with dead keys)": "US (Intl)",
  "English (US, Symbolic)": "US (Symbolic)",
  "English (US)": "US",
  "English (Workman, intl., with dead keys)": "US (Workman-Intl)",
  "English (Workman)": "US (Workman)",
  Esperanto: "EPO",
  "Esperanto (Brazil, Nativo)": "BR (Nativo-Epo)",
  "Esperanto (legacy)": "EPO (Legacy)",
  "Esperanto (Portugal, Nativo)": "PT (Nativo-Epo)",
  Estonian: "EE",
  "Estonian (Dvorak)": "EE (Dvorak)",
  "Estonian (no dead keys)": "EE (Nodeadkeys)",
  "Estonian (US)": "EE (Us)",
  Ewe: "GH (Ewe)",
  Faroese: "FO",
  "Faroese (no dead keys)": "FO (Nodeadkeys)",
  Filipino: "PH",
  "Filipino (Capewell-Dvorak, Baybayin)": "PH (Capewell-Dvorak-Bay)",
  "Filipino (Capewell-Dvorak, Latin)": "PH (Capewell-Dvorak)",
  "Filipino (Capewell-QWERF 2006, Baybayin)": "PH (Capewell-Qwerf2k6-Bay)",
  "Filipino (Capewell-QWERF 2006, Latin)": "PH (Capewell-Qwerf2k6)",
  "Filipino (Colemak, Baybayin)": "PH (Colemak-Bay)",
  "Filipino (Colemak, Latin)": "PH (Colemak)",
  "Filipino (Dvorak, Baybayin)": "PH (Dvorak-Bay)",
  "Filipino (Dvorak, Latin)": "PH (Dvorak)",
  "Filipino (QWERTY, Baybayin)": "PH (Qwerty-Bay)",
  Finnish: "FI",
  "Finnish (classic, no dead keys)": "FI (Nodeadkeys)",
  "Finnish (classic)": "FI (Classic)",
  "Finnish (Macintosh)": "FI (Mac)",
  "Finnish (Windows)": "FI (Winkeys)",
  French: "FR",
  "French (alt., Latin-9 only)": "FR (Oss Latin9)",
  "French (alt., no dead keys)": "FR (Oss Nodeadkeys)",
  "French (alt.)": "FR (Oss)",
  "French (AZERTY, AFNOR)": "FR (Afnor)",
  "French (AZERTY)": "FR (Azerty)",
  "French (BEPO, AFNOR)": "FR (Bepo Afnor)",
  "French (BEPO, Latin-9 only)": "FR (Bepo Latin9)",
  "French (BEPO)": "FR (Bepo)",
  "French (Cameroon)": "CM (French)",
  "French (Canada, Dvorak)": "CA (Fr-Dvorak)",
  "French (Canada, legacy)": "CA (Fr-Legacy)",
  "French (Canada)": "CA",
  "French (Democratic Republic of the Congo)": "CD",
  "French (Dvorak)": "FR (Dvorak)",
  "French (legacy, alt., no dead keys)": "FR (Latin9 Nodeadkeys)",
  "French (legacy, alt.)": "FR (Latin9)",
  "French (Macintosh)": "FR (Mac)",
  "French (Mali, alt.)": "ML (Fr-Oss)",
  "French (Morocco)": "MA (French)",
  "French (no dead keys)": "FR (Nodeadkeys)",
  "French (Switzerland, Macintosh)": "CH (Fr Mac)",
  "French (Switzerland, no dead keys)": "CH (Fr Nodeadkeys)",
  "French (Switzerland)": "CH (Fr)",
  "French (Togo)": "TG",
  "French (US)": "FR (Us)",
  "Friulian (Italy)": "IT (Fur)",
  Fula: "GH (Fula)",
  Ga: "GH (Ga)",
  Georgian: "GE",
  "Georgian (ergonomic)": "GE (Ergonomic)",
  "Georgian (France, AZERTY Tskapo)": "FR (Geo)",
  "Georgian (Italy)": "IT (Geo)",
  "Georgian (MESS)": "GE (Mess)",
  German: "DE",
  "German (Austria, Macintosh)": "AT (Mac)",
  "German (Austria, no dead keys)": "AT (Nodeadkeys)",
  "German (Austria)": "AT",
  "German (dead acute)": "DE (Deadacute)",
  "German (dead grave acute)": "DE (Deadgraveacute)",
  "German (dead tilde)": "DE (Deadtilde)",
  "German (Dvorak)": "DE (Dvorak)",
  "German (E1)": "DE (E1)",
  "German (E2)": "DE (E2)",
  "German (Macintosh, no dead keys)": "DE (Mac Nodeadkeys)",
  "German (Macintosh)": "DE (Mac)",
  "German (Neo 2)": "DE (Neo)",
  "German (no dead keys)": "DE (Nodeadkeys)",
  "German (QWERTY)": "DE (Qwerty)",
  "German (Switzerland, legacy)": "CH (Legacy)",
  "German (Switzerland, Macintosh)": "CH (De Mac)",
  "German (Switzerland, no dead keys)": "CH (De Nodeadkeys)",
  "German (Switzerland)": "CH",
  "German (T3)": "DE (T3)",
  "German (US)": "DE (Us)",
  Greek: "GR",
  "Greek (extended)": "GR (Extended)",
  "Greek (no dead keys)": "GR (Nodeadkeys)",
  "Greek (polytonic)": "GR (Polytonic)",
  "Greek (simple)": "GR (Simple)",
  Gujarati: "IN (Guj)",
  "Hanyu Pinyin Letters (with AltGr dead keys)": "CN (Altgr-Pinyin)",
  "Hausa (Ghana)": "GH (Hausa)",
  "Hausa (Nigeria)": "NG (Hausa)",
  Hawaiian: "US (Haw)",
  Hebrew: "IL",
  "Hebrew (Biblical, Tiro)": "IL (Biblical)",
  "Hebrew (lyx)": "IL (Lyx)",
  "Hebrew (phonetic)": "IL (Phonetic)",
  "Hindi (Bolnagri)": "IN (Bolnagri)",
  "Hindi (KaGaPa, phonetic)": "IN (Hin-Kagapa)",
  "Hindi (Wx)": "IN (Hin-Wx)",
  Hungarian: "HU",
  "Hungarian (no dead keys)": "HU (Nodeadkeys)",
  "Hungarian (QWERTY, 101-key, comma, dead keys)": "HU (101 Qwerty Comma Dead)",
  "Hungarian (QWERTY, 101-key, comma, no dead keys)": "HU (101 Qwerty Comma Nodead)",
  "Hungarian (QWERTY, 101-key, dot, dead keys)": "HU (101 Qwerty Dot Dead)",
  "Hungarian (QWERTY, 101-key, dot, no dead keys)": "HU (101 Qwerty Dot Nodead)",
  "Hungarian (QWERTY, 102-key, comma, dead keys)": "HU (102 Qwerty Comma Dead)",
  "Hungarian (QWERTY, 102-key, comma, no dead keys)": "HU (102 Qwerty Comma Nodead)",
  "Hungarian (QWERTY, 102-key, dot, dead keys)": "HU (102 Qwerty Dot Dead)",
  "Hungarian (QWERTY, 102-key, dot, no dead keys)": "HU (102 Qwerty Dot Nodead)",
  "Hungarian (QWERTY)": "HU (Qwerty)",
  "Hungarian (QWERTZ, 101-key, comma, dead keys)": "HU (101 Qwertz Comma Dead)",
  "Hungarian (QWERTZ, 101-key, comma, no dead keys)": "HU (101 Qwertz Comma Nodead)",
  "Hungarian (QWERTZ, 101-key, dot, dead keys)": "HU (101 Qwertz Dot Dead)",
  "Hungarian (QWERTZ, 101-key, dot, no dead keys)": "HU (101 Qwertz Dot Nodead)",
  "Hungarian (QWERTZ, 102-key, comma, dead keys)": "HU (102 Qwertz Comma Dead)",
  "Hungarian (QWERTZ, 102-key, comma, no dead keys)": "HU (102 Qwertz Comma Nodead)",
  "Hungarian (QWERTZ, 102-key, dot, dead keys)": "HU (102 Qwertz Dot Dead)",
  "Hungarian (QWERTZ, 102-key, dot, no dead keys)": "HU (102 Qwertz Dot Nodead)",
  "Hungarian (standard)": "HU (Standard)",
  Icelandic: "IS",
  "Icelandic (Dvorak)": "IS (Dvorak)",
  "Icelandic (Macintosh, legacy)": "IS (Mac Legacy)",
  "Icelandic (Macintosh)": "IS (Mac)",
  Igbo: "NG (Igbo)",
  Indian: "IN",
  "Indic IPA": "IN (Iipa)",
  "Indonesian (Arab Melayu, extended phonetic)": "ID (Melayu-Phoneticx)",
  "Indonesian (Arab Melayu, phonetic)": "ID (Melayu-Phonetic)",
  "Indonesian (Arab Pegon, phonetic)": "ID (Pegon-Phonetic)",
  "Indonesian (Latin)": "ID",
  Inuktitut: "CA (Ike)",
  Iraqi: "IQ",
  Irish: "IE",
  "Irish (UnicodeExpert)": "IE (UnicodeExpert)",
  Italian: "IT",
  "Italian (IBM 142)": "IT (Ibm)",
  "Italian (intl., with dead keys)": "IT (Intl)",
  "Italian (Macintosh)": "IT (Mac)",
  "Italian (no dead keys)": "IT (Nodeadkeys)",
  "Italian (US)": "IT (Us)",
  "Italian (Windows)": "IT (Winkeys)",
  Japanese: "JP",
  "Japanese (Dvorak)": "JP (Dvorak)",
  "Japanese (Kana 86)": "JP (Kana86)",
  "Japanese (Kana)": "JP (Kana)",
  "Japanese (Macintosh)": "JP (Mac)",
  "Japanese (OADG 109A)": "JP (OADG109A)",
  Javanese: "ID (Javanese)",
  "Kabyle (AZERTY, with dead keys)": "DZ (Azerty-Deadkeys)",
  "Kabyle (QWERTY, UK, with dead keys)": "DZ (Qwerty-Gb-Deadkeys)",
  "Kabyle (QWERTY, US, with dead keys)": "DZ (Qwerty-Us-Deadkeys)",
  Kalmyk: "RU (Xal)",
  Kannada: "IN (Kan)",
  "Kannada (KaGaPa, phonetic)": "IN (Kan-Kagapa)",
  Kashubian: "PL (Csb)",
  Kazakh: "KZ",
  "Kazakh (extended)": "KZ (Ext)",
  "Kazakh (Latin)": "KZ (Latin)",
  "Kazakh (with Russian)": "KZ (Kazrus)",
  "Khmer (Cambodia)": "KH",
  Kikuyu: "KE (Kik)",
  Komi: "RU (Kom)",
  Korean: "KR",
  "Korean (101/104-key compatible)": "KR (Kr104)",
  "Kurdish (Iran, Arabic-Latin)": "IR (Ku Ara)",
  "Kurdish (Iran, F)": "IR (Ku F)",
  "Kurdish (Iran, Latin Alt-Q)": "IR (Ku Alt)",
  "Kurdish (Iran, Latin Q)": "IR (Ku)",
  "Kurdish (Iraq, Arabic-Latin)": "IQ (Ku Ara)",
  "Kurdish (Iraq, F)": "IQ (Ku F)",
  "Kurdish (Iraq, Latin Alt-Q)": "IQ (Ku Alt)",
  "Kurdish (Iraq, Latin Q)": "IQ (Ku)",
  "Kurdish (Syria, F)": "SY (Ku F)",
  "Kurdish (Syria, Latin Alt-Q)": "SY (Ku Alt)",
  "Kurdish (Syria, Latin Q)": "SY (Ku)",
  "Kurdish (Turkey, F)": "TR (Ku F)",
  "Kurdish (Turkey, Latin Alt-Q)": "TR (Ku Alt)",
  "Kurdish (Turkey, Latin Q)": "TR (Ku)",
  Kyrgyz: "KG",
  "Kyrgyz (phonetic)": "KG (Phonetic)",
  Lao: "LA",
  "Lao (STEA)": "LA (Stea)",
  Latvian: "LV",
  "Latvian (adapted)": "LV (Adapted)",
  "Latvian (apostrophe)": "LV (Apostrophe)",
  "Latvian (ergonomic, \u016AGJRMV)": "LV (Ergonomic)",
  "Latvian (F)": "LV (Fkey)",
  "Latvian (modern)": "LV (Modern)",
  "Latvian (tilde)": "LV (Tilde)",
  Lithuanian: "LT",
  "Lithuanian (IBM LST 1205-92)": "LT (Ibm)",
  "Lithuanian (LEKP)": "LT (Lekp)",
  "Lithuanian (LEKPa)": "LT (Lekpa)",
  "Lithuanian (Ratise)": "LT (Ratise)",
  "Lithuanian (standard)": "LT (Std)",
  "Lithuanian (US)": "LT (Us)",
  "Lower Sorbian": "DE (Dsb)",
  "Lower Sorbian (QWERTZ)": "DE (Dsb Qwertz)",
  Macedonian: "MK",
  "Macedonian (no dead keys)": "MK (Nodeadkeys)",
  "Malay (Jawi, Arabic Keyboard)": "MY",
  "Malay (Jawi, phonetic)": "MY (Phonetic)",
  Malayalam: "IN (Mal)",
  "Malayalam (enhanced InScript, with rupee)": "IN (Mal Enhanced)",
  "Malayalam (Lalitha)": "IN (Mal Lalitha)",
  Maltese: "MT",
  "Maltese (UK, with AltGr overrides)": "MT (Alt-Gb)",
  "Maltese (US, with AltGr overrides)": "MT (Alt-Us)",
  "Maltese (US)": "MT (Us)",
  "Manipuri (Eeyek)": "IN (Eeyek)",
  Maori: "MAO",
  "Marathi (enhanced InScript)": "IN (Marathi)",
  "Marathi (KaGaPa, phonetic)": "IN (Mar-Kagapa)",
  Mari: "RU (Chm)",
  Mmuock: "CM (Mmuock)",
  Moldavian: "MD",
  "Moldavian (Gagauz)": "MD (Gag)",
  Mon: "MM (Mnw)",
  "Mon (A1)": "MM (Mnw-A1)",
  Mongolian: "MN",
  "Mongolian (Bichig)": "CN (Mon Trad)",
  "Mongolian (Galik)": "CN (Mon Trad Galik)",
  "Mongolian (Manchu Galik)": "CN (Mon Manchu Galik)",
  "Mongolian (Manchu)": "CN (Mon Trad Manchu)",
  "Mongolian (Todo Galik)": "CN (Mon Todo Galik)",
  "Mongolian (Todo)": "CN (Mon Trad Todo)",
  "Mongolian (Xibe)": "CN (Mon Trad Xibe)",
  Montenegrin: "ME",
  "Montenegrin (Cyrillic, with guillemets)": "ME (Cyrillicalternatequotes)",
  "Montenegrin (Cyrillic, ZE and ZHE swapped)": "ME (Cyrillicyz)",
  "Montenegrin (Cyrillic)": "ME (Cyrillic)",
  "Montenegrin (Latin, QWERTY)": "ME (Latinyz)",
  "Montenegrin (Latin, Unicode, QWERTY)": "ME (Latinunicodeyz)",
  "Montenegrin (Latin, Unicode)": "ME (Latinunicode)",
  "Montenegrin (Latin, with guillemets)": "ME (Latinalternatequotes)",
  "N'Ko (AZERTY)": "GN",
  Nepali: "NP",
  "Northern Saami (Finland)": "FI (Smi)",
  "Northern Saami (Norway, no dead keys)": "NO (Smi Nodeadkeys)",
  "Northern Saami (Norway)": "NO (Smi)",
  "Northern Saami (Sweden)": "SE (Smi)",
  Norwegian: "NO",
  "Norwegian (Colemak)": "NO (Colemak)",
  "Norwegian (Dvorak)": "NO (Dvorak)",
  "Norwegian (Macintosh, no dead keys)": "NO (Mac Nodeadkeys)",
  "Norwegian (Macintosh)": "NO (Mac)",
  "Norwegian (no dead keys)": "NO (Nodeadkeys)",
  "Norwegian (Windows)": "NO (Winkeys)",
  Occitan: "FR (Oci)",
  Ogham: "IE (Ogam)",
  "Ogham (IS434)": "IE (Ogam Is434)",
  "Ol Chiki": "IN (Olck)",
  "Old Turkic": "TR (Otk)",
  "Old Turkic (F)": "TR (Otkf)",
  Oriya: "IN (Ori)",
  "Oriya (Bolnagri)": "IN (Ori-Bolnagri)",
  "Oriya (Wx)": "IN (Ori-Wx)",
  "Ossetian (Georgia)": "GE (Os)",
  "Ossetian (legacy)": "RU (Os Legacy)",
  "Ossetian (Windows)": "RU (Os Winkeys)",
  "Ottoman (F)": "TR (Otf)",
  "Ottoman (Q)": "TR (Ot)",
  "Pannonian Rusyn": "RS (Rue)",
  Pashto: "AF (Ps)",
  "Pashto (Afghanistan, OLPC)": "AF (Ps-Olpc)",
  Persian: "IR",
  "Persian (with Persian keypad)": "IR (Pes Keypad)",
  Polish: "PL",
  "Polish (British keyboard)": "GB (Pl)",
  "Polish (Dvorak, with Polish quotes on key 1)": "PL (Dvorak Altquotes)",
  "Polish (Dvorak, with Polish quotes on quotemark key)": "PL (Dvorak Quotes)",
  "Polish (Dvorak)": "PL (Dvorak)",
  "Polish (legacy)": "PL (Legacy)",
  "Polish (programmer Dvorak)": "PL (Dvp)",
  "Polish (QWERTZ)": "PL (Qwertz)",
  Portuguese: "PT",
  "Portuguese (Brazil, Dvorak)": "BR (Dvorak)",
  "Portuguese (Brazil, IBM/Lenovo ThinkPad)": "BR (Thinkpad)",
  "Portuguese (Brazil, Nativo for US keyboards)": "BR (Nativo-Us)",
  "Portuguese (Brazil, Nativo)": "BR (Nativo)",
  "Portuguese (Brazil, no dead keys)": "BR (Nodeadkeys)",
  "Portuguese (Brazil)": "BR",
  "Portuguese (Macintosh, no dead keys)": "PT (Mac Nodeadkeys)",
  "Portuguese (Macintosh)": "PT (Mac)",
  "Portuguese (Nativo for US keyboards)": "PT (Nativo-Us)",
  "Portuguese (Nativo)": "PT (Nativo)",
  "Portuguese (no dead keys)": "PT (Nodeadkeys)",
  "Punjabi (Gurmukhi Jhelum)": "IN (Jhelum)",
  "Punjabi (Gurmukhi)": "IN (Guru)",
  Romanian: "RO",
  "Romanian (Germany, no dead keys)": "DE (Ro Nodeadkeys)",
  "Romanian (Germany)": "DE (Ro)",
  "Romanian (standard)": "RO (Std)",
  "Romanian (Windows)": "RO (Winkeys)",
  Russian: "RU",
  "Russian (Belarus)": "BY (Ru)",
  "Russian (Czech, phonetic)": "CZ (Rus)",
  "Russian (DOS)": "RU (Dos)",
  "Russian (engineering, EN)": "RU (Ruchey En)",
  "Russian (engineering, RU)": "RU (Ruchey Ru)",
  "Russian (Georgia)": "GE (Ru)",
  "Russian (Germany, phonetic)": "DE (Ru)",
  "Russian (Kazakhstan, with Kazakh)": "KZ (Ruskaz)",
  "Russian (legacy)": "RU (Legacy)",
  "Russian (Macintosh)": "RU (Mac)",
  "Russian (phonetic, AZERTY)": "RU (Phonetic Azerty)",
  "Russian (phonetic, Dvorak)": "RU (Phonetic Dvorak)",
  "Russian (phonetic, French)": "RU (Phonetic Fr)",
  "Russian (phonetic, Windows)": "RU (Phonetic Winkeys)",
  "Russian (phonetic, YAZHERTY)": "RU (Phonetic YAZHERTY)",
  "Russian (phonetic)": "RU (Phonetic)",
  "Russian (Poland, phonetic Dvorak)": "PL (Ru Phonetic Dvorak)",
  "Russian (Sweden, phonetic, no dead keys)": "SE (Rus Nodeadkeys)",
  "Russian (Sweden, phonetic)": "SE (Rus)",
  "Russian (typewriter, legacy)": "RU (Typewriter-Legacy)",
  "Russian (typewriter)": "RU (Typewriter)",
  "Russian (Ukraine, standard RSTU)": "UA (Rstu Ru)",
  "Russian (US, phonetic)": "US (Rus)",
  "Saisiyat (Taiwan)": "TW (Saisiyat)",
  Samogitian: "LT (Sgs)",
  "Sanskrit (KaGaPa, phonetic)": "IN (San-Kagapa)",
  "Scottish Gaelic": "GB (Gla)",
  Serbian: "RS",
  "Serbian (Cyrillic, with guillemets)": "RS (Alternatequotes)",
  "Serbian (Cyrillic, ZE and ZHE swapped)": "RS (Yz)",
  "Serbian (Latin, QWERTY)": "RS (Latinyz)",
  "Serbian (Latin, Unicode, QWERTY)": "RS (Latinunicodeyz)",
  "Serbian (Latin, Unicode)": "RS (Latinunicode)",
  "Serbian (Latin, with guillemets)": "RS (Latinalternatequotes)",
  "Serbian (Latin)": "RS (Latin)",
  "Serbian (Russia)": "RU (Srp)",
  "Serbo-Croatian (US)": "US (Hbs)",
  Shan: "MM (Shn)",
  "Shan (Zawgyi Tai)": "MM (Zgt)",
  Sicilian: "IT (Scn)",
  Silesian: "PL (Szl)",
  Sindhi: "PK (Snd)",
  "Sinhala (phonetic)": "LK",
  "Sinhala (US)": "LK (Us)",
  Slovak: "SK",
  "Slovak (extended backslash)": "SK (Bksl)",
  "Slovak (QWERTY, extended backslash)": "SK (Qwerty Bksl)",
  "Slovak (QWERTY)": "SK (Qwerty)",
  Slovenian: "SI",
  "Slovenian (US)": "SI (Us)",
  "Slovenian (with guillemets)": "SI (Alternatequotes)",
  Spanish: "ES",
  "Spanish (dead tilde)": "ES (Deadtilde)",
  "Spanish (Dvorak)": "ES (Dvorak)",
  "Spanish (Latin American, Colemak)": "LATAM (Colemak)",
  "Spanish (Latin American, dead tilde)": "LATAM (Deadtilde)",
  "Spanish (Latin American, Dvorak)": "LATAM (Dvorak)",
  "Spanish (Latin American, no dead keys)": "LATAM (Nodeadkeys)",
  "Spanish (Latin American)": "LATAM",
  "Spanish (Macintosh)": "ES (Mac)",
  "Spanish (no dead keys)": "ES (Nodeadkeys)",
  "Spanish (Windows)": "ES (Winkeys)",
  "Swahili (Kenya)": "KE",
  "Swahili (Tanzania)": "TZ",
  Swedish: "SE",
  "Swedish (Dvorak, intl.)": "SE (Us Dvorak)",
  "Swedish (Dvorak)": "SE (Dvorak)",
  "Swedish (Macintosh)": "SE (Mac)",
  "Swedish (no dead keys)": "SE (Nodeadkeys)",
  "Swedish (Svdvorak)": "SE (Svdvorak)",
  "Swedish (US)": "SE (Us)",
  "Swedish Sign Language": "SE (Swl)",
  Syriac: "SY (Syc)",
  "Syriac (phonetic)": "SY (Syc Phonetic)",
  Taiwanese: "TW",
  "Taiwanese (indigenous)": "TW (Indigenous)",
  Tajik: "TJ",
  "Tajik (legacy)": "TJ (Legacy)",
  "Tamil (InScript, with Arabic numerals)": "IN (Tam)",
  "Tamil (InScript, with Tamil numerals)": "IN (Tam Tamilnumbers)",
  "Tamil (Sri Lanka, TamilNet '99, TAB encoding)": "LK (Tam TAB)",
  "Tamil (Sri Lanka, TamilNet '99)": "LK (Tam Unicode)",
  "Tamil (TamilNet '99 with Tamil numerals)": "IN (Tamilnet Tamilnumbers)",
  "Tamil (TamilNet '99, TAB encoding)": "IN (Tamilnet TAB)",
  "Tamil (TamilNet '99, TSCII encoding)": "IN (Tamilnet TSCII)",
  "Tamil (TamilNet '99)": "IN (Tamilnet)",
  Tarifit: "MA (Rif)",
  Tatar: "RU (Tt)",
  Telugu: "IN (Tel)",
  "Telugu (KaGaPa, phonetic)": "IN (Tel-Kagapa)",
  "Telugu (Sarala)": "IN (Tel-Sarala)",
  Thai: "TH",
  "Thai (Pattachote)": "TH (Pat)",
  "Thai (TIS-820.2538)": "TH (Tis)",
  Tibetan: "CN (Tib)",
  "Tibetan (with ASCII numerals)": "CN (Tib Asciinum)",
  Tswana: "BW",
  Turkish: "TR",
  "Turkish (Alt-Q)": "TR (Alt)",
  "Turkish (E)": "TR (E)",
  "Turkish (F)": "TR (F)",
  "Turkish (Germany)": "DE (Tr)",
  "Turkish (intl., with dead keys)": "TR (Intl)",
  Turkmen: "TM",
  "Turkmen (Alt-Q)": "TM (Alt)",
  Udmurt: "RU (Udm)",
  Ukrainian: "UA",
  "Ukrainian (homophonic)": "UA (Homophonic)",
  "Ukrainian (legacy)": "UA (Legacy)",
  "Ukrainian (macOS)": "UA (MacOS)",
  "Ukrainian (phonetic)": "UA (Phonetic)",
  "Ukrainian (standard RSTU)": "UA (Rstu)",
  "Ukrainian (typewriter)": "UA (Typewriter)",
  "Ukrainian (Windows)": "UA (Winkeys)",
  "Urdu (alt. phonetic)": "IN (Urd-Phonetic3)",
  "Urdu (Pakistan, CRULP)": "PK (Urd-Crulp)",
  "Urdu (Pakistan, NLA)": "PK (Urd-Nla)",
  "Urdu (Pakistan)": "PK",
  "Urdu (phonetic)": "IN (Urd-Phonetic)",
  "Urdu (Windows)": "IN (Urd-Winkeys)",
  Uyghur: "CN (Ug)",
  Uzbek: "UZ",
  "Uzbek (Afghanistan, OLPC)": "AF (Uz-Olpc)",
  "Uzbek (Afghanistan)": "AF (Uz)",
  "Uzbek (Latin)": "UZ (Latin)",
  Vietnamese: "VN",
  "Vietnamese (France)": "VN (Fr)",
  "Vietnamese (US)": "VN (Us)",
  Wolof: "SN",
  Yakut: "RU (Sah)",
  Yoruba: "NG (Yoruba)",
  "Unknown Layout": "Unknown"
};
var layoutMap = layoutMapObj;

// src/components/bar/modules/kblayout/helpers/index.ts
var getKeyboardLayout = (layoutData, format4) => {
  const hyprctlDevices = JSON.parse(layoutData);
  const keyboards = hyprctlDevices["keyboards"];
  if (keyboards.length === 0) {
    return format4 === "code" ? "Unknown" : "Unknown Layout";
  }
  let mainKb = keyboards.find((kb) => kb.main);
  if (!mainKb) {
    mainKb = keyboards[keyboards.length - 1];
  }
  if (!isValidLayout(mainKb.active_keymap)) {
    return layoutMap["Unknown Layout"];
  }
  const layout = mainKb.active_keymap;
  const foundLayout = layoutMap[layout];
  return format4 === "code" ? foundLayout ?? layout : layout;
};
function isValidLayout(kbLayout) {
  if (!Object.keys(layoutMap).includes(kbLayout)) {
    return false;
  }
  return true;
}

// src/lib/shared/hookHandler/index.ts
function useHook(widget, hookTarget, setup, signal2) {
  const passedWidget = widget;
  let currentDisconnect = () => {
  };
  const executeSetup = () => {
    currentDisconnect();
    if (typeof setup === "function") {
      currentDisconnect = setup() || (() => {
      });
    }
  };
  const isConnectable = (target) => {
    return "connect" in target;
  };
  const isSubscribable = (target) => {
    return "subscribe" in target;
  };
  const hookIntoTarget = () => {
    if (signal2 !== void 0 && isConnectable(hookTarget)) {
      passedWidget.hook(hookTarget, signal2, executeSetup);
    } else if (isSubscribable(hookTarget)) {
      passedWidget.hook(hookTarget, executeSetup);
    }
  };
  executeSetup();
  hookIntoTarget();
}

// src/components/bar/modules/kblayout/index.tsx
import AstalHyprland4 from "gi://AstalHyprland?version=0.1";
var inputHandler6 = InputHandlerService.getInstance();
var hyprlandService4 = AstalHyprland4.get_default();
var { label: label7, labelType, icon: icon6, leftClick: leftClick4, rightClick: rightClick9, middleClick: middleClick9, scrollUp: scrollUp9, scrollDown: scrollDown9 } = configuration_default.bar.customModules.kbLayout;
function setLabel(self) {
  try {
    const devices = hyprlandService4.message("j/devices");
    self.label = getKeyboardLayout(devices, labelType.get());
  } catch (error) {
    console.error(error);
  }
}
var KbInput = () => {
  let inputHandlerBindings;
  const keyboardModule = Module({
    textIcon: bind(icon6),
    tooltipText: "",
    labelHook: (self) => {
      useHook(
        self,
        hyprlandService4,
        () => {
          setLabel(self);
        },
        "keyboard-layout"
      );
      useHook(self, labelType, () => {
        setLabel(self);
      });
    },
    boxClass: "kblayout",
    showLabelBinding: bind(label7),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler6.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick4
          },
          onSecondaryClick: {
            cmd: rightClick9
          },
          onMiddleClick: {
            cmd: middleClick9
          },
          onScrollUp: {
            cmd: scrollUp9
          },
          onScrollDown: {
            cmd: scrollDown9
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
      }
    }
  });
  return keyboardModule;
};

// src/components/bar/modules/media/helpers/index.ts
var getIconForPlayer = (playerName) => {
  const windowTitleMap = [
    ["Firefox", "\u{F0239}"],
    ["Microsoft Edge", "\u{F01E9}"],
    ["Discord", "\uF1FF"],
    ["Plex", "\u{F06BA}"],
    ["Spotify", "\u{F04C7}"],
    ["Vlc", "\u{F057C}"],
    ["Mpv", "\uF36E"],
    ["Rhythmbox", "\u{F04C3}"],
    ["Google Chrome", "\uF268"],
    ["Brave Browser", "\u{F059F}"],
    ["Chromium", "\uF268"],
    ["Opera", "\uF26A"],
    ["Vivaldi", "\u{F059F}"],
    ["Waterfox", "\u{F0239}"],
    ["Thorium", "\u{F0239}"],
    ["Mozilla zen", "\uEBF8"],
    ["Floorp", "\u{F0239}"],
    ["(.*)", "\u{F075A}"]
  ];
  const foundMatch = windowTitleMap.find((wt) => RegExp(wt[0], "i").test(playerName));
  return foundMatch ? foundMatch[1] : "\u{F075A}";
};
var isValidMediaTag = (tag) => {
  if (typeof tag !== "string") {
    return false;
  }
  const mediaTagKeys = ["title", "artists", "artist", "album", "name", "identity"];
  return mediaTagKeys.includes(tag);
};
var generateMediaLabel = (truncation_size3, show_label3, format4, songIcon, activePlayer2) => {
  const currentPlayer = activePlayer2.get();
  if (!currentPlayer || !show_label3.get()) {
    songIcon.set(getIconForPlayer(activePlayer2.get()?.identity ?? ""));
    return "Media";
  }
  const { title, identity, artist, album, busName } = currentPlayer;
  songIcon.set(getIconForPlayer(identity));
  const mediaTags = {
    title,
    artists: artist,
    artist,
    album,
    name: busName,
    identity
  };
  const mediaFormat = format4.get();
  const truncatedLabel = mediaFormat.replace(
    /{(title|artists|artist|album|name|identity)(:[^}]*)?}/g,
    (_, p1, p2) => {
      if (!isValidMediaTag(p1)) {
        return "";
      }
      let value = p1 !== void 0 ? mediaTags[p1] : "";
      value = value?.replace(/\r?\n/g, " ") ?? "";
      const suffix = p2 !== void 0 && p2.length > 0 ? p2.slice(1) : "";
      return value ? value + suffix : "";
    }
  );
  const maxLabelSize = truncation_size3.get();
  let mediaLabel = truncatedLabel;
  if (maxLabelSize > 0 && truncatedLabel.length > maxLabelSize) {
    mediaLabel = `${truncatedLabel.substring(0, maxLabelSize)}...`;
  }
  return mediaLabel.length ? mediaLabel : "Media";
};

// src/components/bar/modules/media/index.tsx
import AstalMpris3 from "gi://AstalMpris?version=0.1";

// src/services/media/index.ts
import AstalMpris2 from "gi://AstalMpris?version=0.1";

// src/components/menus/media/components/timebar/helpers.ts
var getTimeStamp = (position2, totalLength) => {
  if (typeof position2 === "number" && position2 >= 0) {
    return `${getFormattedTime(position2)} / ${getFormattedTime(totalLength)}`;
  } else {
    return "00:00";
  }
};
function getFormattedTime(time2) {
  const curHour = Math.floor(time2 / 3600);
  const curMin = Math.floor(time2 % 3600 / 60);
  const curSec = Math.floor(time2 % 60);
  const formatTime = (time3) => {
    return time3.toString().padStart(2, "0");
  };
  const formatHour = (hour) => {
    return hour > 0 ? formatTime(hour) + ":" : "";
  };
  return `${formatHour(curHour)}${formatTime(curMin)}:${formatTime(curSec)}`;
}

// src/services/media/index.ts
var MediaPlayerService = class _MediaPlayerService {
  static _instance;
  activePlayer = Variable(void 0);
  timeStamp = Variable("00:00");
  currentPosition = Variable(0);
  loopStatus = Variable(AstalMpris2.Loop.NONE);
  shuffleStatus = Variable(AstalMpris2.Shuffle.OFF);
  playbackStatus = Variable(AstalMpris2.PlaybackStatus.STOPPED);
  canPlay = Variable(false);
  canGoNext = Variable(false);
  canGoPrevious = Variable(false);
  mediaTitle = Variable("");
  mediaAlbum = Variable("-----");
  mediaArtist = Variable("-----");
  mediaArtUrl = Variable("");
  _mprisService;
  _subscriptions = {
    position: void 0,
    loop: void 0,
    shuffle: void 0,
    canPlay: void 0,
    playbackStatus: void 0,
    canGoNext: void 0,
    canGoPrevious: void 0,
    title: void 0,
    album: void 0,
    artist: void 0,
    artUrl: void 0
  };
  constructor() {
    this._mprisService = AstalMpris2.get_default();
    const { noMediaText } = configuration_default.menus.media;
    this.mediaTitle.set(noMediaText.get());
    this._mprisService.connect(
      "player-closed",
      (_, closedPlayer) => this._handlePlayerClosed(closedPlayer)
    );
    this._mprisService.connect("player-added", (_, addedPlayer) => this._handlePlayerAdded(addedPlayer));
    Variable.derive([bind(this.activePlayer)], (player) => {
      this._updateAllMediaProperties(player);
    });
  }
  static getInstance() {
    if (this._instance === void 0) {
      this._instance = new _MediaPlayerService();
    }
    return this._instance;
  }
  /**
   * Handles a new player being added
   *
   * Sets the new player as active if no player is currently active.
   *
   * @param addedPlayer The player that was added
   */
  _handlePlayerAdded(addedPlayer) {
    if (this.activePlayer.get() === void 0) {
      this.activePlayer.set(addedPlayer);
    }
  }
  /**
   * Handles a player being closed
   *
   * Switches to another player if available or clears the active player
   * when the current player is closed.
   *
   * @param closedPlayer The player that was closed
   */
  _handlePlayerClosed(closedPlayer) {
    if (this._mprisService.get_players().length === 1 && closedPlayer.busName === this._mprisService.get_players()[0]?.busName) {
      return this.activePlayer.set(void 0);
    }
    if (closedPlayer.busName === this.activePlayer.get()?.busName) {
      const nextPlayer = this._mprisService.get_players().find((player) => player.busName !== closedPlayer.busName);
      this.activePlayer.set(nextPlayer);
    }
  }
  /**
   * Updates all media properties based on the current player
   *
   * This synchronizes all state variables with the current media player's state.
   *
   * @param player The current media player
   */
  _updateAllMediaProperties(player) {
    this._updatePosition(player);
    this._updateLoop(player);
    this._updateShuffle(player);
    this._updatePlaybackStatus(player);
    this._updateCanPlay(player);
    this._updateCanGoNext(player);
    this._updateCanGoPrevious(player);
    this._updateTitle(player);
    this._updateAlbum(player);
    this._updateArtist(player);
    this._updateArtUrl(player);
  }
  /**
   * Updates the current playback position
   *
   * Tracks both the numeric position and formatted timestamp.
   *
   * @param player The current media player
   */
  _updatePosition(player) {
    this._resetSubscription("position");
    if (player === void 0) {
      this.timeStamp.set("00:00");
      this.currentPosition.set(0);
      return;
    }
    const positionBinding = bind(player, "position");
    this._subscriptions.position = Variable.derive(
      [bind(positionBinding), bind(player, "playbackStatus")],
      (pos) => {
        if (player?.length > 0) {
          this.timeStamp.set(getTimeStamp(pos, player.length));
          this.currentPosition.set(pos);
        } else {
          this.timeStamp.set("00:00");
          this.currentPosition.set(0);
        }
      }
    );
    const initialPos = positionBinding.get();
    this.timeStamp.set(getTimeStamp(initialPos, player.length));
    this.currentPosition.set(initialPos);
  }
  /**
   * Updates the loop status for the current player
   *
   * Tracks whether playback loops none, track, or playlist.
   *
   * @param player The current media player
   */
  _updateLoop(player) {
    this._resetSubscription("loop");
    if (player === void 0) {
      this.loopStatus.set(AstalMpris2.Loop.NONE);
      return;
    }
    const loopBinding = bind(player, "loopStatus");
    this._subscriptions.loop = Variable.derive(
      [bind(loopBinding), bind(player, "playbackStatus")],
      (status) => {
        if (player?.length > 0) {
          this.loopStatus.set(status);
        } else {
          this.loopStatus.set(AstalMpris2.Loop.NONE);
        }
      }
    );
    this.loopStatus.set(loopBinding.get());
  }
  /**
   * Updates the shuffle status for the current player
   *
   * Tracks whether playback order is shuffled.
   *
   * @param player The current media player
   */
  _updateShuffle(player) {
    this._resetSubscription("shuffle");
    if (player === void 0) {
      this.shuffleStatus.set(AstalMpris2.Shuffle.OFF);
      return;
    }
    const shuffleBinding = bind(player, "shuffleStatus");
    this._subscriptions.shuffle = Variable.derive(
      [bind(shuffleBinding), bind(player, "playbackStatus")],
      (status) => {
        this.shuffleStatus.set(status ?? AstalMpris2.Shuffle.OFF);
      }
    );
    this.shuffleStatus.set(shuffleBinding.get());
  }
  /**
   * Updates whether playback is possible with current player
   *
   * Used to enable/disable playback controls.
   *
   * @param player The current media player
   */
  _updateCanPlay(player) {
    this._resetSubscription("canPlay");
    if (player === void 0) {
      this.canPlay.set(false);
      return;
    }
    const canPlayBinding = bind(player, "canPlay");
    this._subscriptions.canPlay = Variable.derive(
      [canPlayBinding, bind(player, "playbackStatus")],
      (playable) => {
        this.canPlay.set(playable ?? false);
      }
    );
    this.canPlay.set(player.canPlay);
  }
  /**
   * Updates the playback status (playing, paused, stopped)
   *
   * Used to show the correct playback status and control state.
   *
   * @param player The current media player
   */
  _updatePlaybackStatus(player) {
    this._resetSubscription("playbackStatus");
    if (player === void 0) {
      this.playbackStatus.set(AstalMpris2.PlaybackStatus.STOPPED);
      return;
    }
    const playbackStatusBinding = bind(player, "playbackStatus");
    this._subscriptions.playbackStatus = Variable.derive([playbackStatusBinding], (status) => {
      this.playbackStatus.set(status ?? AstalMpris2.PlaybackStatus.STOPPED);
    });
    this.playbackStatus.set(player.playbackStatus);
  }
  /**
   * Updates whether the next track control is enabled
   *
   * Used to enable/disable skip forward controls.
   *
   * @param player The current media player
   */
  _updateCanGoNext(player) {
    this._resetSubscription("canGoNext");
    if (player === void 0) {
      this.canGoNext.set(false);
      return;
    }
    const canGoNextBinding = bind(player, "canGoNext");
    this._subscriptions.canGoNext = Variable.derive(
      [canGoNextBinding, bind(player, "playbackStatus")],
      (canNext) => {
        this.canGoNext.set(canNext ?? false);
      }
    );
    this.canGoNext.set(player.canGoNext);
  }
  /**
   * Updates whether the previous track control is enabled
   *
   * Used to enable/disable skip backward controls.
   *
   * @param player The current media player
   */
  _updateCanGoPrevious(player) {
    this._resetSubscription("canGoPrevious");
    if (player === void 0) {
      this.canGoPrevious.set(false);
      return;
    }
    const canGoPreviousBinding = bind(player, "canGoPrevious");
    this._subscriptions.canGoPrevious = Variable.derive(
      [canGoPreviousBinding, bind(player, "playbackStatus")],
      (canPrev) => {
        this.canGoPrevious.set(canPrev ?? false);
      }
    );
    this.canGoPrevious.set(player.canGoPrevious);
  }
  /**
   * Updates the media title display
   *
   * Shows title of current track or a placeholder when nothing is playing.
   *
   * @param player The current media player
   */
  _updateTitle(player) {
    this._resetSubscription("title");
    const { noMediaText } = configuration_default.menus.media;
    if (player === void 0) {
      this.mediaTitle.set(noMediaText.get());
      return;
    }
    const titleBinding = bind(player, "title");
    this._subscriptions.title = Variable.derive(
      [titleBinding, bind(player, "playbackStatus")],
      (newTitle, pbStatus) => {
        if (pbStatus === AstalMpris2.PlaybackStatus.STOPPED) {
          return this.mediaTitle.set(noMediaText.get() ?? "-----");
        }
        this.mediaTitle.set(newTitle.length > 0 ? this._normalizeLabel(newTitle) : "-----");
      }
    );
    const initialTitle = player.title;
    this.mediaTitle.set(initialTitle.length > 0 ? this._normalizeLabel(initialTitle) : "-----");
  }
  /**
   * Updates the album name display
   *
   * Shows album of current track or a placeholder when not available.
   *
   * @param player The current media player
   */
  _updateAlbum(player) {
    this._resetSubscription("album");
    if (player === void 0) {
      this.mediaAlbum.set("-----");
      return;
    }
    const albumBinding = bind(player, "album");
    this._subscriptions.album = Variable.derive(
      [albumBinding, bind(player, "playbackStatus")],
      (newAlbum) => {
        this.mediaAlbum.set(newAlbum?.length > 0 ? this._normalizeLabel(newAlbum) : "-----");
      }
    );
    const initialAlbum = player.album;
    this.mediaAlbum.set(initialAlbum?.length > 0 ? this._normalizeLabel(initialAlbum) : "-----");
  }
  /**
   * Updates the artist name display
   *
   * Shows artist of current track or a placeholder when not available.
   *
   * @param player The current media player
   */
  _updateArtist(player) {
    this._resetSubscription("artist");
    if (player === void 0) {
      this.mediaArtist.set("-----");
      return;
    }
    const artistBinding = bind(player, "artist");
    this._subscriptions.artist = Variable.derive(
      [artistBinding, bind(player, "playbackStatus")],
      (newArtist) => {
        this.mediaArtist.set(newArtist?.length > 0 ? this._normalizeLabel(newArtist) : "-----");
      }
    );
    const initialArtist = player.artist;
    this.mediaArtist.set(initialArtist?.length > 0 ? this._normalizeLabel(initialArtist) : "-----");
  }
  /**
   * Updates the album art URL
   *
   * Tracks the URL to the current album artwork if available.
   *
   * @param player The current media player
   */
  _updateArtUrl(player) {
    this._resetSubscription("artUrl");
    if (player === void 0) {
      this.mediaArtUrl.set("");
      return;
    }
    const artUrlBinding = bind(player, "artUrl");
    this._subscriptions.artUrl = Variable.derive(
      [artUrlBinding, bind(player, "playbackStatus")],
      (newArtUrl) => {
        this.mediaArtUrl.set(newArtUrl ?? "");
      }
    );
    this.mediaArtUrl.set(player.artUrl ?? "");
  }
  /**
   * Normalizes a label by removing newlines
   *
   * Ensures text displays properly in the UI by converting newlines to spaces.
   *
   * @param label The label to normalize
   * @returns Normalized label string
   */
  _normalizeLabel(label16) {
    return label16.replace(/\r?\n/g, " ");
  }
  /**
   * Resets a subscription by dropping it and clearing its reference
   *
   * This helper method safely cleans up a specific subscription to prevent
   * memory leaks and prepare for new subscription assignment. It's used
   * when updating media properties to ensure proper cleanup of previous bindings.
   *
   * @param subscription - The key of the subscription to reset
   */
  _resetSubscription(subscription) {
    this._subscriptions[subscription]?.drop();
    this._subscriptions[subscription] = void 0;
  }
  /**
   * Cleans up all subscriptions and bindings
   *
   * Should be called when the media manager is no longer needed
   * to prevent memory leaks.
   */
  dispose() {
    Object.values(this._subscriptions).forEach((sub) => sub?.drop());
    this.activePlayer.drop();
    this.timeStamp.drop();
    this.currentPosition.drop();
    this.loopStatus.drop();
    this.shuffleStatus.drop();
    this.playbackStatus.drop();
    this.canPlay.drop();
    this.canGoNext.drop();
    this.canGoPrevious.drop();
    this.mediaTitle.drop();
    this.mediaAlbum.drop();
    this.mediaArtist.drop();
    this.mediaArtUrl.drop();
  }
};
var mediaPlayerManager = MediaPlayerService.getInstance();
var {
  activePlayer,
  timeStamp,
  currentPosition,
  loopStatus,
  shuffleStatus,
  canPlay,
  playbackStatus,
  canGoNext,
  canGoPrevious,
  mediaTitle,
  mediaAlbum,
  mediaArtist,
  mediaArtUrl
} = mediaPlayerManager;

// src/components/bar/modules/media/index.tsx
var mprisService = AstalMpris3.get_default();
var {
  truncation,
  truncation_size,
  show_label: show_label2,
  show_active_only,
  rightClick: rightClick10,
  middleClick: middleClick10,
  scrollUp: scrollUp10,
  scrollDown: scrollDown10,
  format: format2
} = configuration_default.bar.media;
var isVis2 = Variable(!show_active_only.get());
Variable.derive([bind(show_active_only), bind(mprisService, "players")], (showActive, players) => {
  isVis2.set(!showActive || players?.length > 0);
});
var Media = () => {
  activePlayer.set(mprisService.get_players()[0]);
  const songIcon = Variable("");
  const mediaLabel = Variable.derive(
    [
      bind(activePlayer),
      bind(truncation),
      bind(truncation_size),
      bind(show_label2),
      bind(format2),
      bind(mediaTitle),
      bind(mediaAlbum),
      bind(mediaArtist)
    ],
    () => {
      return generateMediaLabel(truncation_size, show_label2, format2, songIcon, activePlayer);
    }
  );
  const componentClassName = Variable.derive(
    [configuration_default.theme.bar.buttons.style, show_label2],
    (style3) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `media-container ${styleMap2[style3]}`;
    }
  );
  const component = /* @__PURE__ */ jsxs(
    "box",
    {
      className: componentClassName(),
      onDestroy: () => {
        songIcon.drop();
        mediaLabel.drop();
        componentClassName.drop();
      },
      children: [
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "bar-button-icon media txt-icon bar",
            label: bind(songIcon).as((icn) => icn || "\u{F075A}")
          }
        ),
        /* @__PURE__ */ jsx2("label", { className: "bar-button-label media", label: mediaLabel() })
      ]
    }
  );
  return {
    component,
    isVis: bind(isVis2),
    boxClass: "media",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick10),
            bind(middleClick10),
            bind(scrollUp10),
            bind(scrollDown10),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openDropdownMenu(clicked, event, "mediamenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick10.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick10.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp10.get(), scrollDown10.get())
            );
          }
        );
      }
    }
  };
};

// src/components/bar/modules/menu/index.tsx
var { rightClick: rightClick11, middleClick: middleClick11, scrollUp: scrollUp11, scrollDown: scrollDown11, autoDetectIcon, icon: icon7 } = configuration_default.bar.launcher;
var Menu = () => {
  const iconBinding = Variable.derive(
    [autoDetectIcon, icon7],
    (autoDetect, iconValue) => autoDetect ? SystemUtilities.getDistroIcon() : iconValue
  );
  const componentClassName = bind(configuration_default.theme.bar.buttons.style).as((style3) => {
    const styleMap2 = {
      default: "style1",
      split: "style2",
      wave: "style3",
      wave2: "style3"
    };
    return `dashboard ${styleMap2[style3]}`;
  });
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      className: componentClassName,
      onDestroy: () => {
        iconBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("label", { className: "bar-menu_label bar-button_icon txt-icon bar", label: iconBinding() })
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "dashboard",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick11),
            bind(middleClick11),
            bind(scrollUp11),
            bind(scrollDown11),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openDropdownMenu(clicked, event, "dashboardmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick11.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick11.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp11.get(), scrollDown11.get())
            );
          }
        );
      }
    }
  };
};

// src/components/bar/modules/microphone/index.tsx
import AstalWp from "gi://AstalWp?version=0.1";
var inputHandler7 = InputHandlerService.getInstance();
var wireplumber = AstalWp.get_default();
var audioService = wireplumber.audio;
var { label: label8, mutedIcon, unmutedIcon, leftClick: leftClick5, rightClick: rightClick12, middleClick: middleClick12, scrollUp: scrollUp12, scrollDown: scrollDown12 } = configuration_default.bar.customModules.microphone;
var Microphone = () => {
  const iconBinding = Variable.derive(
    [
      bind(mutedIcon),
      bind(unmutedIcon),
      bind(audioService.defaultMicrophone, "volume"),
      bind(audioService.defaultMicrophone, "mute")
    ],
    (iconMuted, iconUnmuted, volume, isMuted) => {
      if (isMuted || volume === 0) {
        return iconMuted;
      }
      return iconUnmuted;
    }
  );
  const tooltipBinding = Variable.derive(
    [
      bind(mutedIcon),
      bind(unmutedIcon),
      bind(audioService.defaultMicrophone, "description"),
      bind(audioService.defaultMicrophone, "volume"),
      bind(audioService.defaultMicrophone, "mute")
    ],
    (iconMuted, iconUnmuted, description, volume, isMuted) => {
      const icon14 = isMuted || !volume ? iconMuted : iconUnmuted;
      return `${icon14} ${description}`;
    }
  );
  let inputHandlerBindings;
  const microphoneModule = Module({
    textIcon: iconBinding(),
    label: bind(audioService.defaultMicrophone, "volume").as((vol) => `${Math.round(vol * 100)}%`),
    tooltipText: tooltipBinding(),
    boxClass: "mic",
    showLabelBinding: bind(label8),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler7.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick5
          },
          onSecondaryClick: {
            cmd: rightClick12
          },
          onMiddleClick: {
            cmd: middleClick12
          },
          onScrollUp: {
            cmd: scrollUp12
          },
          onScrollDown: {
            cmd: scrollDown12
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
      }
    }
  });
  return microphoneModule;
};

// src/services/system/networkUsage/index.ts
import GLib4 from "gi://GLib";

// src/services/system/types.ts
var LABEL_TYPES = ["used/total", "used", "free", "percentage"];

// src/services/system/networkUsage/index.ts
var NetworkUsageService = class {
  _updateFrequency;
  _shouldRound = false;
  _interfaceName = Variable("");
  _rateUnit = Variable("auto");
  _previousNetUsage = { rx: 0, tx: 0, time: 0 };
  _networkPoller;
  _isInitialized = false;
  _network;
  constructor({ frequency } = {}) {
    this._updateFrequency = frequency ?? Variable(2e3);
    const defaultNetstatData = this._getDefaultNetstatData(this._rateUnit.get());
    this._network = Variable(defaultNetstatData);
    this._calculateUsage = this._calculateUsage.bind(this);
    this._networkPoller = new FunctionPoller(
      this._network,
      [],
      bind(this._updateFrequency),
      this._calculateUsage
    );
  }
  /**
   * Manually refreshes the network usage statistics
   */
  refresh() {
    this._network.set(this._calculateUsage());
  }
  /**
   * Gets the network usage data variable
   *
   * @returns Variable containing incoming and outgoing network rates
   */
  get network() {
    return this._network;
  }
  /**
   * Calculates network usage rates for the configured interface
   */
  _calculateUsage() {
    const rateUnit2 = this._rateUnit.get();
    const interfaceName = this._interfaceName.get();
    const DEFAULT_NETSTAT_DATA = this._getDefaultNetstatData(rateUnit2);
    try {
      const { rx, tx, name: name2 } = this._getNetworkUsage(interfaceName);
      const currentTime = Date.now();
      if (!name2) {
        return DEFAULT_NETSTAT_DATA;
      }
      if (this._previousNetUsage.time === 0) {
        this._previousNetUsage = { rx, tx, time: currentTime };
        return DEFAULT_NETSTAT_DATA;
      }
      const timeDiff = Math.max((currentTime - this._previousNetUsage.time) / 1e3, 1);
      const rxRate = (rx - this._previousNetUsage.rx) / timeDiff;
      const txRate = (tx - this._previousNetUsage.tx) / timeDiff;
      this._previousNetUsage = { rx, tx, time: currentTime };
      return {
        in: this._formatRate(rxRate, rateUnit2, this._shouldRound),
        out: this._formatRate(txRate, rateUnit2, this._shouldRound)
      };
    } catch (error) {
      console.error("Error calculating network usage:", error);
      return DEFAULT_NETSTAT_DATA;
    }
  }
  /**
   * Sets the network interface to monitor
   *
   * @param interfaceName - Name of the network interface (e.g., 'eth0', 'wlan0')
   */
  setInterface(interfaceName) {
    this._interfaceName.set(interfaceName);
    this._resetUsageHistory();
  }
  /**
   * Sets the rate unit for formatting network speeds
   *
   * @param unit - Unit to display rates in ('auto', 'KiB', 'MiB', 'GiB')
   */
  setRateUnit(unit5) {
    this._rateUnit.set(unit5);
  }
  /**
   * Sets whether to round the rates to whole numbers
   *
   * @param round - Whether to round rates to integers
   */
  setShouldRound(round6) {
    this._shouldRound = round6;
  }
  /**
   * Updates the polling frequency
   *
   * @param timerInMs - New polling interval in milliseconds
   */
  updateTimer(timerInMs) {
    this._updateFrequency.set(timerInMs);
  }
  /**
   * Initializes the network usage monitoring poller
   */
  initialize() {
    if (!this._isInitialized) {
      this._networkPoller.initialize();
      this._isInitialized = true;
    }
  }
  /**
   * Stops the network monitoring poller
   */
  stopPoller() {
    this._networkPoller.stop();
  }
  /**
   * Starts the network monitoring poller
   */
  startPoller() {
    this._networkPoller.start();
  }
  /**
   * Resets the usage history for accurate rate calculation
   */
  _resetUsageHistory() {
    this._previousNetUsage = { rx: 0, tx: 0, time: 0 };
  }
  /**
   * Formats the network rate based on the provided rate, type, and rounding option
   *
   * @param rate - Raw rate in bytes per second
   * @param type - Unit type to format to
   * @param round - Whether to round to whole numbers
   * @returns Formatted rate string with unit suffix
   */
  _formatRate(rate, type, round6) {
    const fixed = round6 ? 0 : 2;
    switch (true) {
      case type === "KiB":
        return `${(rate / 1024 /* KIBIBYTE */).toFixed(fixed)} KiB/s`;
      case type === "MiB":
        return `${(rate / 1048576 /* MEBIBYTE */).toFixed(fixed)} MiB/s`;
      case type === "GiB":
        return `${(rate / 1073741824 /* GIBIBYTE */).toFixed(fixed)} GiB/s`;
      case rate >= 1073741824 /* GIBIBYTE */:
        return `${(rate / 1073741824 /* GIBIBYTE */).toFixed(fixed)} GiB/s`;
      case rate >= 1048576 /* MEBIBYTE */:
        return `${(rate / 1048576 /* MEBIBYTE */).toFixed(fixed)} MiB/s`;
      case rate >= 1024 /* KIBIBYTE */:
        return `${(rate / 1024 /* KIBIBYTE */).toFixed(fixed)} KiB/s`;
      case rate >= 1 /* BYTE */:
      default:
        return `${rate.toFixed(fixed)} bytes/s`;
    }
  }
  /**
   * Parses a line of network interface data from /proc/net/dev
   *
   * @param line - Raw line from /proc/net/dev
   * @returns Parsed network usage data or null if invalid
   */
  _parseInterfaceData(line) {
    const trimmedLine = line.trim();
    if (!trimmedLine || trimmedLine.startsWith("Inter-") || trimmedLine.startsWith("face")) {
      return null;
    }
    const [iface, rx, , , , , , , , tx] = trimmedLine.split(/\s+/);
    const rxValue = parseInt(rx, 10);
    const txValue = parseInt(tx, 10);
    const cleanedIface = iface.replace(":", "");
    return { name: cleanedIface, rx: rxValue, tx: txValue };
  }
  /**
   * Validates a network interface for monitoring
   *
   * @param iface - Interface data to validate
   * @param interfaceName - Specific interface name to match (empty for auto)
   * @returns Whether the interface is valid for monitoring
   */
  _isValidInterface(iface, interfaceName) {
    if (!iface) return false;
    if (interfaceName) return iface.name === interfaceName;
    return iface.name !== "lo" && iface.rx > 0 && iface.tx > 0;
  }
  /**
   * Retrieves network usage for the specified interface from /proc/net/dev
   *
   * @param interfaceName - Name of interface to monitor (empty for auto-detect)
   * @returns Network usage statistics
   */
  _getNetworkUsage(interfaceName = "") {
    const [success, data] = GLib4.file_get_contents("/proc/net/dev");
    const defaultStats = { name: "", rx: 0, tx: 0 };
    if (!success) {
      console.error("Failed to read /proc/net/dev");
      return defaultStats;
    }
    const lines = new TextDecoder("utf-8").decode(data).split("\n");
    for (const line of lines) {
      const iface = this._parseInterfaceData(line);
      if (this._isValidInterface(iface, interfaceName)) {
        return iface ?? defaultStats;
      }
    }
    return { name: "", rx: 0, tx: 0 };
  }
  /**
   * Gets default network statistics data for initialization
   *
   * @param dataType - Rate unit type
   * @returns Default network resource data
   */
  _getDefaultNetstatData = (dataType) => {
    if (dataType === "auto") {
      return { in: "0 Kib/s", out: "0 Kib/s" };
    }
    return { in: `0 ${dataType}/s`, out: `0 ${dataType}/s` };
  };
  /**
   * Cleans up resources and stops monitoring
   */
  destroy() {
    this._networkPoller.stop();
    this._network.drop();
    this._interfaceName.drop();
    this._rateUnit.drop();
    this._updateFrequency.drop();
  }
};
var networkUsage_default = NetworkUsageService;

// src/components/bar/modules/netstat/index.tsx
import AstalNetwork from "gi://AstalNetwork?version=0.1";

// src/components/bar/modules/netstat/helpers.ts
var { networkInterface, rateUnit, round: round3, pollingInterval: pollingInterval5 } = configuration_default.bar.customModules.netstat;
var setupNetworkServiceBindings = () => {
  const networkService15 = new networkUsage_default();
  Variable.derive([bind(pollingInterval5)], (interval3) => {
    networkService15.updateTimer(interval3);
  })();
  Variable.derive([bind(networkInterface)], (interfaceName) => {
    networkService15.setInterface(interfaceName);
  })();
  Variable.derive([bind(rateUnit)], (unit5) => {
    networkService15.setRateUnit(unit5);
  })();
  Variable.derive([bind(round3)], (shouldRound) => {
    networkService15.setShouldRound(shouldRound);
  })();
};
var cycleArray = (array, current, direction) => {
  const currentIndex = array.indexOf(current);
  const nextIndex = direction === "next" ? (currentIndex + 1) % array.length : (currentIndex - 1 + array.length) % array.length;
  return array[nextIndex];
};

// src/components/bar/modules/netstat/index.tsx
var inputHandler8 = InputHandlerService.getInstance();
var astalNetworkService = AstalNetwork.get_default();
var NETWORK_LABEL_TYPES = ["full", "in", "out"];
var {
  label: label9,
  labelType: labelType2,
  dynamicIcon,
  icon: icon8,
  networkInLabel,
  networkOutLabel,
  leftClick: leftClick6,
  rightClick: rightClick13,
  middleClick: middleClick13,
  pollingInterval: pollingInterval6
} = configuration_default.bar.customModules.netstat;
setupNetworkServiceBindings();
var networkService = new networkUsage_default({ frequency: pollingInterval6 });
var Netstat = () => {
  networkService.initialize();
  const renderNetworkLabel = (lblType, networkData) => {
    switch (lblType) {
      case "in":
        return `${networkInLabel.get()} ${networkData.in}`;
      case "out":
        return `${networkOutLabel.get()} ${networkData.out}`;
      default:
        return `${networkInLabel.get()} ${networkData.in} ${networkOutLabel.get()} ${networkData.out}`;
    }
  };
  const iconBinding = Variable.derive(
    [
      bind(astalNetworkService, "primary"),
      bind(astalNetworkService, "wifi"),
      bind(astalNetworkService, "wired")
    ],
    (primary, wifi, wired) => {
      if (primary === AstalNetwork.Primary.WIRED) {
        return wired?.icon_name;
      }
      return wifi?.icon_name;
    }
  );
  const labelBinding = Variable.derive(
    [bind(networkService.network), bind(labelType2)],
    (networkData, lblType) => renderNetworkLabel(lblType, networkData)
  );
  let inputHandlerBindings;
  const netstatModule = Module({
    useTextIcon: bind(dynamicIcon).as((useDynamicIcon) => !useDynamicIcon),
    icon: iconBinding(),
    textIcon: bind(icon8),
    label: labelBinding(),
    tooltipText: bind(labelType2).as((lblType) => {
      return lblType === "full" ? "Ingress / Egress" : lblType === "in" ? "Ingress" : "Egress";
    }),
    boxClass: "netstat",
    showLabelBinding: bind(label9),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler8.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick6
          },
          onSecondaryClick: {
            cmd: rightClick13
          },
          onMiddleClick: {
            cmd: middleClick13
          },
          onScrollUp: {
            fn: () => {
              const nextLabelType = cycleArray(NETWORK_LABEL_TYPES, labelType2.get(), "next");
              labelType2.set(nextLabelType);
            }
          },
          onScrollDown: {
            fn: () => {
              const prevLabelType = cycleArray(NETWORK_LABEL_TYPES, labelType2.get(), "prev");
              labelType2.set(prevLabelType);
            }
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        labelBinding.drop();
        iconBinding.drop();
        networkService.destroy();
      }
    }
  });
  return netstatModule;
};

// src/components/bar/modules/network/index.tsx
import AstalNetwork3 from "gi://AstalNetwork?version=0.1";

// src/components/bar/modules/network/helpers.ts
import AstalNetwork2 from "gi://AstalNetwork?version=0.1";
var wiredIcon = Variable("");
var wirelessIcon = Variable("");
var networkService2 = AstalNetwork2.get_default();
var wiredIconBinding;
var wirelessIconBinding;
var handleWiredIcon = () => {
  wiredIconBinding?.drop();
  wiredIconBinding = void 0;
  if (networkService2.wired === null) {
    return;
  }
  wiredIconBinding = Variable.derive([bind(networkService2.wired, "iconName")], (icon14) => {
    wiredIcon.set(icon14);
  });
};
var handleWirelessIcon = () => {
  wirelessIconBinding?.drop();
  wirelessIconBinding = void 0;
  if (networkService2.wifi === null) {
    return;
  }
  wirelessIconBinding = Variable.derive([bind(networkService2.wifi, "iconName")], (icon14) => {
    wirelessIcon.set(icon14);
  });
};
var formatFrequency = (frequency) => {
  return `${(frequency / 1e3).toFixed(2)}MHz`;
};
var formatWifiInfo = (wifi) => {
  return `Network: ${wifi.ssid} 
Signal Strength: ${wifi.strength}% 
Frequency: ${formatFrequency(wifi.frequency)}`;
};
Variable.derive([bind(networkService2, "state"), bind(networkService2, "connectivity")], () => {
  handleWiredIcon();
  handleWirelessIcon();
});

// src/components/bar/modules/network/index.tsx
var networkService3 = AstalNetwork3.get_default();
var { label: label10, truncation: truncation2, truncation_size: truncation_size2, rightClick: rightClick14, middleClick: middleClick14, scrollDown: scrollDown13, scrollUp: scrollUp13, showWifiInfo } = configuration_default.bar.network;
var Network = () => {
  const iconBinding = Variable.derive(
    [bind(networkService3, "primary"), bind(wiredIcon), bind(wirelessIcon)],
    (primaryNetwork, wiredIcon2, wifiIcon) => {
      return primaryNetwork === AstalNetwork3.Primary.WIRED ? wiredIcon2 : wifiIcon;
    }
  );
  const NetworkIcon = () => /* @__PURE__ */ jsx2("icon", { className: "bar-button-icon network-icon", icon: iconBinding() });
  const networkLabel = Variable.derive(
    [
      bind(networkService3, "primary"),
      bind(label10),
      bind(truncation2),
      bind(truncation_size2),
      bind(showWifiInfo),
      bind(networkService3, "state"),
      bind(networkService3, "connectivity"),
      ...networkService3.wifi !== null ? [bind(networkService3.wifi, "enabled")] : []
    ],
    (primaryNetwork, showLabel2, trunc, tSize, showWifiInfo2) => {
      if (!showLabel2) {
        return /* @__PURE__ */ jsx2("box", {});
      }
      if (primaryNetwork === AstalNetwork3.Primary.WIRED) {
        return /* @__PURE__ */ jsx2("label", { className: "bar-button-label network-label", label: "Wired".substring(0, tSize) });
      }
      const networkWifi = networkService3.wifi;
      if (networkWifi !== null) {
        if (!networkWifi.enabled) {
          return /* @__PURE__ */ jsx2("label", { className: "bar-button-label network-label", label: "Off" });
        }
        return /* @__PURE__ */ jsx2(
          "label",
          {
            className: "bar-button-label network-label",
            label: networkWifi.active_access_point !== null ? `${trunc ? networkWifi.ssid.substring(0, tSize) : networkWifi.ssid}` : "--",
            tooltipText: showWifiInfo2 && networkWifi.active_access_point !== null ? formatWifiInfo(networkWifi) : ""
          }
        );
      }
      return /* @__PURE__ */ jsx2("box", {});
    }
  );
  const componentClassName = Variable.derive(
    [bind(configuration_default.theme.bar.buttons.style), bind(configuration_default.bar.network.label)],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `network-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const component = /* @__PURE__ */ jsxs(
    "box",
    {
      vexpand: true,
      valign: Gtk4.Align.FILL,
      className: componentClassName(),
      onDestroy: () => {
        iconBinding.drop();
        networkLabel.drop();
        componentClassName.drop();
      },
      children: [
        /* @__PURE__ */ jsx2(NetworkIcon, {}),
        networkLabel()
      ]
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "network",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick14),
            bind(middleClick14),
            bind(scrollUp13),
            bind(scrollDown13),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openDropdownMenu(clicked, event, "networkmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick14.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick14.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp13.get(), scrollDown13.get())
            );
          }
        );
      }
    }
  };
};

// src/components/bar/modules/notifications/index.tsx
import AstalNotifd2 from "gi://AstalNotifd?version=0.1";

// src/lib/icons/helpers.ts
function lookUpIcon(name2, size = 16) {
  if (name2 === void 0) return null;
  return Gtk4.IconTheme.get_default().lookup_icon(name2, size, Gtk4.IconLookupFlags.USE_BUILTIN);
}
function iconExists(name2) {
  return lookUpIcon(name2) !== null;
}

// src/lib/shared/notifications/index.ts
var normalizeName = (name2) => name2.toLowerCase().replace(/\s+/g, "_");
var removingNotifications = Variable(false);
var isNotificationIgnored = (notification, filter2) => {
  if (!notification) {
    return false;
  }
  const notificationFilters = new Set(filter2.map(normalizeName));
  const normalizedAppName = normalizeName(notification.app_name);
  return notificationFilters.has(normalizedAppName);
};
var filterNotifications = (notifications, filter2) => {
  const filteredNotifications = notifications.filter((notif) => {
    return !isNotificationIgnored(notif, filter2);
  });
  return filteredNotifications;
};
var getNotificationIcon = (app_name, app_icon, app_entry) => {
  const icon14 = icons_default.fallback.notification;
  if (iconExists(app_name)) {
    return app_name;
  } else if (app_name && iconExists(app_name.toLowerCase())) {
    return app_name.toLowerCase();
  }
  if (app_icon && iconExists(app_icon)) {
    return app_icon;
  }
  if (app_entry && iconExists(app_entry)) {
    return app_entry;
  }
  return icon14;
};
var clearNotifications = async (notifications, delay) => {
  removingNotifications.set(true);
  for (const notification of notifications) {
    notification.dismiss();
    await new Promise((resolve) => setTimeout(resolve, delay));
  }
  removingNotifications.set(false);
};

// src/components/bar/modules/notifications/index.tsx
var notifdService = AstalNotifd2.get_default();
var { show_total, rightClick: rightClick15, middleClick: middleClick15, scrollUp: scrollUp14, scrollDown: scrollDown14, hideCountWhenZero } = configuration_default.bar.notifications;
var { ignore } = configuration_default.notifications;
var Notifications = () => {
  const componentClassName = Variable.derive(
    [bind(configuration_default.theme.bar.buttons.style), bind(show_total)],
    (style3, showTotal) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `notifications-container ${styleMap2[style3]} ${!showTotal ? "no-label" : ""}`;
    }
  );
  const boxChildren = Variable.derive(
    [
      bind(notifdService, "notifications"),
      bind(notifdService, "dontDisturb"),
      bind(show_total),
      bind(ignore),
      bind(hideCountWhenZero)
    ],
    (notif, dnd, showTotal, ignoredNotifs, hideCountForZero) => {
      const filteredNotifications = filterNotifications(notif, ignoredNotifs);
      const NotifIcon = () => /* @__PURE__ */ jsx2(
        "label",
        {
          halign: Gtk4.Align.CENTER,
          className: "bar-button-icon notifications txt-icon bar",
          label: dnd ? "\u{F009B}" : filteredNotifications.length > 0 ? "\u{F116B}" : "\u{F009A}"
        }
      );
      const NotifLabel = () => /* @__PURE__ */ jsx2(
        "label",
        {
          halign: Gtk4.Align.CENTER,
          className: "bar-button-label notifications",
          label: filteredNotifications.length.toString()
        }
      );
      if (showTotal) {
        if (hideCountForZero && filteredNotifications.length === 0) {
          return /* @__PURE__ */ jsx2(NotifIcon, {});
        }
        return /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(NotifIcon, {}),
          /* @__PURE__ */ jsx2(NotifLabel, {})
        ] });
      }
      return /* @__PURE__ */ jsx2(NotifIcon, {});
    }
  );
  const component = /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, className: componentClassName(), children: /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, className: "bar-notifications", children: boxChildren() }) });
  return {
    component,
    isVisible: true,
    boxClass: "notifications",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick15),
            bind(middleClick15),
            bind(scrollUp14),
            bind(scrollDown14),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openDropdownMenu(clicked, event, "notificationsmenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick15.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick15.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp14.get(), scrollDown14.get())
            );
          }
        );
      }
    }
  };
};

// src/components/bar/modules/power/index.tsx
var inputHandler9 = InputHandlerService.getInstance();
var { icon: icon9, leftClick: leftClick7, rightClick: rightClick16, middleClick: middleClick16, scrollUp: scrollUp15, scrollDown: scrollDown15 } = configuration_default.bar.customModules.power;
var Power = () => {
  let inputHandlerBindings;
  const powerModule = Module({
    tooltipText: "Power Menu",
    textIcon: bind(icon9),
    showLabelBinding: bind(Variable(false)),
    boxClass: "powermodule",
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler9.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick7
          },
          onSecondaryClick: {
            cmd: rightClick16
          },
          onMiddleClick: {
            cmd: middleClick16
          },
          onScrollUp: {
            cmd: scrollUp15
          },
          onScrollDown: {
            cmd: scrollDown15
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
      }
    }
  });
  return powerModule;
};

// src/lib/units/size/index.ts
var SizeConverter = class _SizeConverter {
  _value;
  _unit;
  constructor(value, unit5) {
    this._value = value;
    this._unit = unit5;
  }
  /**
   * Creates a converter from bytes
   * @param value - Size in bytes
   */
  static fromBytes(value) {
    return new _SizeConverter(value, "bytes");
  }
  /**
   * Creates a converter from kibibytes
   * @param value - Size in KiB
   */
  static fromKiB(value) {
    return new _SizeConverter(value, "kibibytes");
  }
  /**
   * Creates a converter from mebibytes
   * @param value - Size in MiB
   */
  static fromMiB(value) {
    return new _SizeConverter(value, "mebibytes");
  }
  /**
   * Creates a converter from gibibytes
   * @param value - Size in GiB
   */
  static fromGiB(value) {
    return new _SizeConverter(value, "gibibytes");
  }
  /**
   * Creates a converter from tebibytes
   * @param value - Size in TiB
   */
  static fromTiB(value) {
    return new _SizeConverter(value, "tebibytes");
  }
  /**
   * Converts the size to bytes (base unit)
   */
  _toBaseUnit() {
    switch (this._unit) {
      case "bytes":
        return this._value;
      case "kibibytes":
        return this._value * 1024;
      case "mebibytes":
        return this._value * 1024 ** 2;
      case "gibibytes":
        return this._value * 1024 ** 3;
      case "tebibytes":
        return this._value * 1024 ** 4;
    }
  }
  /**
   * Converts to bytes
   * @param precision - Number of decimal places (optional)
   */
  toBytes(precision) {
    const value = this._toBaseUnit();
    return precision !== void 0 ? Number(value.toFixed(precision)) : value;
  }
  /**
   * Converts to kibibytes
   * @param precision - Number of decimal places (optional)
   */
  toKiB(precision) {
    const bytes = this._toBaseUnit();
    const value = bytes / 1024;
    return precision !== void 0 ? Number(value.toFixed(precision)) : value;
  }
  /**
   * Converts to mebibytes
   * @param precision - Number of decimal places (optional)
   */
  toMiB(precision) {
    const bytes = this._toBaseUnit();
    const value = bytes / 1024 ** 2;
    return precision !== void 0 ? Number(value.toFixed(precision)) : value;
  }
  /**
   * Converts to gibibytes
   * @param precision - Number of decimal places (optional)
   */
  toGiB(precision) {
    const bytes = this._toBaseUnit();
    const value = bytes / 1024 ** 3;
    return precision !== void 0 ? Number(value.toFixed(precision)) : value;
  }
  /**
   * Converts to tebibytes
   * @param precision - Number of decimal places (optional)
   */
  toTiB(precision) {
    const bytes = this._toBaseUnit();
    const value = bytes / 1024 ** 4;
    return precision !== void 0 ? Number(value.toFixed(precision)) : value;
  }
  /**
   * Automatically converts to the most appropriate unit
   * @param precision - Number of decimal places (optional)
   */
  toAuto(precision) {
    const bytes = this._toBaseUnit();
    if (bytes >= 1024 ** 4) {
      return { value: this.toTiB(precision), unit: "tebibytes" };
    }
    if (bytes >= 1024 ** 3) {
      return { value: this.toGiB(precision), unit: "gibibytes" };
    }
    if (bytes >= 1024 ** 2) {
      return { value: this.toMiB(precision), unit: "mebibytes" };
    }
    if (bytes >= 1024) {
      return { value: this.toKiB(precision), unit: "kibibytes" };
    }
    return { value: this.toBytes(precision), unit: "bytes" };
  }
  /**
   * Formats the size with a specific unit and precision
   * @param unit - Target unit
   * @param precision - Number of decimal places (default: 2)
   */
  format(unit5, precision = 2) {
    let value;
    let symbol;
    switch (unit5) {
      case "bytes":
        value = this.toBytes();
        symbol = "B";
        break;
      case "kibibytes":
        value = this.toKiB();
        symbol = "KiB";
        break;
      case "mebibytes":
        value = this.toMiB();
        symbol = "MiB";
        break;
      case "gibibytes":
        value = this.toGiB();
        symbol = "GiB";
        break;
      case "tebibytes":
        value = this.toTiB();
        symbol = "TiB";
        break;
    }
    return `${value.toFixed(precision)} ${symbol}`;
  }
  /**
   * Formats to bytes
   * @param precision - Number of decimal places
   */
  formatBytes(precision = 0) {
    return this.format("bytes", precision);
  }
  /**
   * Formats to kibibytes
   * @param precision - Number of decimal places
   */
  formatKiB(precision = 2) {
    return this.format("kibibytes", precision);
  }
  /**
   * Formats to mebibytes
   * @param precision - Number of decimal places
   */
  formatMiB(precision = 2) {
    return this.format("mebibytes", precision);
  }
  /**
   * Formats to gibibytes
   * @param precision - Number of decimal places
   */
  formatGiB(precision = 2) {
    return this.format("gibibytes", precision);
  }
  /**
   * Formats to tebibytes
   * @param precision - Number of decimal places
   */
  formatTiB(precision = 2) {
    return this.format("tebibytes", precision);
  }
  /**
   * Automatically formats to the most appropriate unit
   * @param precision - Number of decimal places
   */
  formatAuto(precision = 2) {
    const { unit: unit5 } = this.toAuto();
    return this.format(unit5, precision);
  }
};

// src/components/bar/utils/systemResource/index.ts
var renderResourceLabel = (lblType, resourceUsage, round6, unitType) => {
  const { used, total, percentage, free } = resourceUsage;
  const precision = round6 ? 0 : 2;
  if (lblType === "used/total") {
    const totalConverter = SizeConverter.fromBytes(total);
    const usedConverter = SizeConverter.fromBytes(used);
    const { unit: unit5 } = totalConverter.toAuto();
    const sizeUnit = unitType ?? unit5;
    let usedValue;
    let totalValue;
    switch (sizeUnit) {
      case "tebibytes":
        usedValue = usedConverter.toTiB(precision);
        totalValue = totalConverter.formatTiB(precision);
        return `${usedValue}/${totalValue}`;
      case "gibibytes":
        usedValue = usedConverter.toGiB(precision);
        totalValue = totalConverter.formatGiB(precision);
        return `${usedValue}/${totalValue}`;
      case "mebibytes":
        usedValue = usedConverter.toMiB(precision);
        totalValue = totalConverter.formatMiB(precision);
        return `${usedValue}/${totalValue}`;
      case "kibibytes":
        usedValue = usedConverter.toKiB(precision);
        totalValue = totalConverter.formatKiB(precision);
        return `${usedValue}/${totalValue}`;
      default:
        usedValue = usedConverter.toBytes(precision);
        totalValue = totalConverter.formatBytes(precision);
        return `${usedValue}/${totalValue}`;
    }
  }
  if (lblType === "used") {
    return SizeConverter.fromBytes(used).formatAuto(precision);
  }
  if (lblType === "free") {
    return SizeConverter.fromBytes(free).formatAuto(precision);
  }
  return `${percentage}%`;
};
var formatTooltip = (dataType, lblTyp) => {
  switch (lblTyp) {
    case "used":
      return `Used ${dataType}`;
    case "free":
      return `Free ${dataType}`;
    case "used/total":
      return `Used/Total ${dataType}`;
    case "percentage":
      return `Percentage ${dataType} Usage`;
    default:
      return "";
  }
};

// src/services/system/ramUsage/index.ts
var RamUsageService = class {
  _updateFrequency;
  _ramPoller;
  _isInitialized = false;
  _ram = Variable({ total: 0, used: 0, percentage: 0, free: 0 });
  constructor({ frequency } = {}) {
    this._updateFrequency = frequency ?? Variable(2e3);
    this._calculateUsage = this._calculateUsage.bind(this);
    this._ramPoller = new FunctionPoller(
      this._ram,
      [bind(this._updateFrequency)],
      bind(this._updateFrequency),
      this._calculateUsage
    );
  }
  /**
   * Manually refreshes the RAM usage statistics
   */
  refresh() {
    this._ram.set(this._calculateUsage());
  }
  /**
   * Gets the RAM usage data variable
   *
   * @returns Variable containing RAM statistics (total, used, free, percentage)
   */
  get ram() {
    return this._ram;
  }
  /**
   * Calculates current RAM usage by parsing /proc/meminfo
   *
   * @returns RAM usage statistics including total, used, free, and percentage
   */
  _calculateUsage() {
    try {
      const [success, meminfoBytes] = default2.file_get_contents("/proc/meminfo");
      if (!success || meminfoBytes === void 0) {
        throw new Error("Failed to read /proc/meminfo or file content is null.");
      }
      const meminfo = new TextDecoder("utf-8").decode(meminfoBytes);
      const totalMatch = meminfo.match(/MemTotal:\s+(\d+)/);
      const availableMatch = meminfo.match(/MemAvailable:\s+(\d+)/);
      if (!totalMatch || !availableMatch) {
        throw new Error("Failed to parse /proc/meminfo for memory values.");
      }
      const totalRamInBytes = parseInt(totalMatch[1], 10) * 1024;
      const availableRamInBytes = parseInt(availableMatch[1], 10) * 1024;
      let usedRam = totalRamInBytes - availableRamInBytes;
      usedRam = isNaN(usedRam) || usedRam < 0 ? 0 : usedRam;
      return {
        percentage: this._divide([totalRamInBytes, usedRam]),
        total: totalRamInBytes,
        used: usedRam,
        free: availableRamInBytes
      };
    } catch (error) {
      console.error("Error calculating RAM usage:", error);
      return { total: 0, used: 0, percentage: 0, free: 0 };
    }
  }
  /**
   * Calculates percentage of RAM used
   *
   * @param values - Tuple of [total, used] RAM values
   * @returns RAM usage percentage with 2 decimal places
   */
  _divide([total, used]) {
    const percentageTotal = used / total * 100;
    return total > 0 ? parseFloat(percentageTotal.toFixed(2)) : 0;
  }
  /**
   * Updates the polling frequency
   *
   * @param timerInMs - New polling interval in milliseconds
   */
  updateTimer(timerInMs) {
    this._updateFrequency.set(timerInMs);
  }
  /**
   * Initializes the RAM usage monitoring
   */
  initialize() {
    if (!this._isInitialized) {
      this._ramPoller.initialize();
      this._isInitialized = true;
    }
  }
  /**
   * Stops the RAM usage polling
   */
  stopPoller() {
    this._ramPoller.stop();
  }
  /**
   * Starts the RAM usage polling
   */
  startPoller() {
    this._ramPoller.start();
  }
  /**
   * Cleans up resources and stops monitoring
   */
  destroy() {
    this._ramPoller.stop();
    this._ram.drop();
    this._updateFrequency.drop();
  }
};
var ramUsage_default = RamUsageService;

// src/components/bar/modules/ram/index.tsx
var inputHandler10 = InputHandlerService.getInstance();
var { label: label11, labelType: labelType3, round: round4, leftClick: leftClick8, rightClick: rightClick17, middleClick: middleClick17, pollingInterval: pollingInterval7, icon: icon10 } = configuration_default.bar.customModules.ram;
var ramService = new ramUsage_default({ frequency: pollingInterval7 });
var Ram = () => {
  ramService.initialize();
  const labelBinding = Variable.derive(
    [bind(ramService.ram), bind(labelType3), bind(round4)],
    (rmUsg, lblTyp, round6) => {
      const returnValue = renderResourceLabel(lblTyp, rmUsg, round6);
      return returnValue;
    }
  );
  let inputHandlerBindings;
  const ramModule = Module({
    textIcon: bind(icon10),
    label: labelBinding(),
    tooltipText: bind(labelType3).as((lblTyp) => {
      return formatTooltip("RAM", lblTyp);
    }),
    boxClass: "ram",
    showLabelBinding: bind(label11),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler10.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick8
          },
          onSecondaryClick: {
            cmd: rightClick17
          },
          onMiddleClick: {
            cmd: middleClick17
          },
          onScrollUp: {
            fn: () => {
              labelType3.set(
                LABEL_TYPES[(LABEL_TYPES.indexOf(labelType3.get()) + 1) % LABEL_TYPES.length]
              );
            }
          },
          onScrollDown: {
            fn: () => {
              labelType3.set(
                LABEL_TYPES[(LABEL_TYPES.indexOf(labelType3.get()) - 1 + LABEL_TYPES.length) % LABEL_TYPES.length]
              );
            }
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        labelBinding.drop();
        ramService.destroy();
      }
    }
  });
  return ramModule;
};

// src/components/shared/Separator.tsx
var Separator = class extends astalify(Gtk4.Separator) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Separator.
   * @param props - The properties for the Separator component.
   * @memberof Separator
   */
  constructor(props) {
    super(props);
  }
};
var Separator_default = Separator;

// src/components/bar/modules/separator/index.tsx
var ModuleSeparator = () => {
  return /* @__PURE__ */ jsx2(Separator_default, { className: "bar-module-separator" });
};

// src/services/system/storage/index.ts
import GTop2 from "gi://GTop";
var StorageService = class {
  _updateFrequency;
  _shouldRound;
  _storagePoller;
  _pathsToMonitor;
  _isInitialized = false;
  _storage = Variable({ total: 0, used: 0, percentage: 0, free: 0 });
  _statBreakdown = Variable({
    total: { total: 0, used: 0, percentage: 0, free: 0 },
    drives: []
  });
  /**
   * Creates a new storage monitoring service
   * @param frequency - Optional polling frequency variable
   * @param round - Optional rounding preference variable
   * @param pathsToMonitor - Optional array of mount paths to monitor
   */
  constructor({ frequency, round: round6, pathsToMonitor }) {
    this._updateFrequency = frequency ?? Variable(2e3);
    this._shouldRound = round6 ?? Variable(false);
    this._pathsToMonitor = pathsToMonitor ?? Variable(["/"]);
    this._pathsToMonitor.set(unique(this._pathsToMonitor.get()));
    this._storagePoller = new FunctionPoller(
      this._statBreakdown,
      [bind(this._updateFrequency), bind(this._pathsToMonitor), bind(this._shouldRound)],
      bind(this._updateFrequency),
      this._calculateMultiDriveUsage.bind(this)
    );
  }
  /**
   * Starts the storage monitoring poller and performs initial data collection
   */
  initialize() {
    if (!this._isInitialized) {
      this._storagePoller.initialize();
      this._isInitialized = true;
      this._statBreakdown.subscribe(() => {
        this._storage.set(this._statBreakdown.get().total);
      });
      this.refresh();
    }
  }
  /**
   * Manually triggers a storage data update outside the polling cycle
   */
  refresh() {
    const multiDriveData = this._calculateMultiDriveUsage();
    this._statBreakdown.set(multiDriveData);
    this._storage.set(multiDriveData.total);
  }
  /**
   * Gets storage data for a specific drive by path
   * @param path - The mount path of the drive
   */
  getDriveInfo(path) {
    const data = this._statBreakdown.get();
    return data.drives.find((drive) => drive.path === path);
  }
  /**
   * Stops the automatic polling without destroying the service
   */
  stopPoller() {
    this._storagePoller.stop();
  }
  /**
   * Resumes automatic polling after it has been stopped
   */
  startPoller() {
    this._storagePoller.start();
  }
  /**
   * Cleans up all resources and stops monitoring
   */
  destroy() {
    this._storagePoller.stop();
    this._storage.drop();
    this._statBreakdown.drop();
    this._pathsToMonitor.drop();
    this._updateFrequency.drop();
  }
  /**
   * Gets the aggregated storage data across all monitored drives
   */
  get storage() {
    return this._storage;
  }
  /**
   * Gets the detailed multi-drive storage data including individual drives
   */
  get statBreakdown() {
    return this._statBreakdown;
  }
  /**
   * Updates the paths to monitor for storage usage
   * @param paths - Array of mount paths to monitor
   */
  set pathsToMonitor(paths3) {
    this._pathsToMonitor.set(unique(paths3));
  }
  /**
   * Sets whether percentage values should be rounded to whole numbers
   * @param round - True to round percentages, false for 2 decimal places
   */
  set round(round6) {
    this._shouldRound.set(round6);
  }
  /**
   * Updates the polling interval
   * @param timerInMs - Interval in milliseconds between updates
   */
  set frequency(timerInMs) {
    this._updateFrequency.set(timerInMs);
  }
  /**
   * Calculates storage usage for multiple drives and returns both individual and total data
   */
  _calculateMultiDriveUsage() {
    try {
      const paths3 = this._pathsToMonitor.get();
      const drives = this._collectDriveData(paths3);
      const total = this._calculateTotalUsage(drives);
      return { total, drives };
    } catch (error) {
      console.error("Error calculating multi-drive storage usage:", error);
      return this._getEmptyStorageData();
    }
  }
  /**
   * Collects storage data for each monitored drive
   * @param paths - Array of mount paths to monitor
   */
  _collectDriveData(paths3) {
    return paths3.map((path) => this._getDriveUsage(path)).filter((drive) => drive !== null);
  }
  /**
   * Gets storage usage for a single drive
   * @param path - The mount path of the drive
   */
  _getDriveUsage(path) {
    try {
      const fsUsage = new GTop2.glibtop_fsusage();
      GTop2.glibtop_get_fsusage(fsUsage, path);
      const total = fsUsage.blocks * fsUsage.block_size;
      const available2 = fsUsage.bavail * fsUsage.block_size;
      const used = total - available2;
      if (total === 0) return null;
      return {
        path,
        name: this._extractDriveName(path),
        total,
        used,
        free: available2,
        percentage: this._calculatePercentage(total, used)
      };
    } catch (error) {
      console.error(`Error getting storage info for ${path}:`, error);
      return null;
    }
  }
  /**
   * Extracts a readable name from a mount path
   * @param path - The mount path
   */
  _extractDriveName(path) {
    return path.split("/").filter(Boolean).pop() || path;
  }
  /**
   * Calculates total usage across all drives
   * @param drives - Array of drive data
   */
  _calculateTotalUsage(drives) {
    const totals = drives.reduce(
      (acc, drive) => ({
        total: acc.total + drive.total,
        used: acc.used + drive.used,
        free: acc.free + drive.free
      }),
      { total: 0, used: 0, free: 0 }
    );
    return {
      ...totals,
      percentage: this._calculatePercentage(totals.total, totals.used)
    };
  }
  /**
   * Calculates percentage with rounding support
   * @param total - Total amount
   * @param used - Used amount
   */
  _calculatePercentage(total, used) {
    if (total === 0) return 0;
    const percentage = used / total * 100;
    const shouldRound = this._shouldRound.get();
    return shouldRound ? Math.round(percentage) : parseFloat(percentage.toFixed(2));
  }
  /**
   * Returns empty storage data structure
   */
  _getEmptyStorageData() {
    return {
      total: { total: 0, used: 0, percentage: 0, free: 0 },
      drives: []
    };
  }
};
var storage_default3 = StorageService;

// src/components/bar/modules/storage/helpers/tooltipFormatters.ts
function formatStorageTooltip(paths3, storageService3, style3, round6, sizeUnits) {
  const driveData = paths3.map((path) => storageService3.getDriveInfo(path)).filter((usage) => usage !== void 0);
  switch (style3) {
    case "percentage-bar":
      return formatPercentageBarStyle(driveData, round6, sizeUnits);
    case "tree":
      return formatTreeStyle(driveData, round6, sizeUnits);
    case "simple":
    default:
      return formatSimpleStyle(driveData, round6, sizeUnits);
  }
}
function generatePercentBar(percentage) {
  const filledBlocks = Math.round(percentage / 10);
  const emptyBlocks = 10 - filledBlocks;
  return "\u25B0".repeat(filledBlocks) + "\u25B1".repeat(emptyBlocks);
}
function formatPercentageBarStyle(drives, round6, sizeUnits) {
  return drives.map((usage) => {
    const lbl = renderResourceLabel("used/total", usage, round6, sizeUnits);
    const percentBar = generatePercentBar(usage.percentage);
    const displayName = usage.path === "/" ? "\u25C9 System" : `\u25C9 ${usage.name}`;
    return `${displayName}
    ${percentBar}  ${usage.percentage.toFixed(1)}%
    ${lbl}`;
  }).join("\n\n");
}
function formatTreeStyle(drives, round6, sizeUnits) {
  return drives.map((usage) => {
    const lbl = renderResourceLabel("used/total", usage, round6, sizeUnits);
    const displayName = usage.path === "/" ? "System" : usage.name;
    return `\u2022 ${displayName}: ${usage.percentage.toFixed(1)}%
  \u2514\u2500 ${lbl}`;
  }).join("\n");
}
function formatSimpleStyle(drives, round6, sizeUnits) {
  return drives.map((usage) => {
    const lbl = renderResourceLabel("used/total", usage, round6, sizeUnits);
    const displayName = usage.path === "/" ? "System" : usage.name;
    return `[${displayName}]: ${lbl}`;
  }).join("\n");
}

// src/components/bar/modules/storage/index.tsx
var inputHandler11 = InputHandlerService.getInstance();
var {
  label: label12,
  labelType: labelType4,
  icon: icon11,
  round: round5,
  leftClick: leftClick9,
  rightClick: rightClick18,
  middleClick: middleClick18,
  pollingInterval: pollingInterval8,
  units,
  tooltipStyle,
  paths
} = configuration_default.bar.customModules.storage;
var storageService = new storage_default3({ frequency: pollingInterval8, round: round5, pathsToMonitor: paths });
var Storage = () => {
  const tooltipText = Variable("");
  storageService.initialize();
  const labelBinding = Variable.derive(
    [bind(storageService.storage), bind(labelType4), bind(paths), bind(tooltipStyle)],
    (storage, lblTyp, filePaths) => {
      const storageUnitToUse = units.get();
      const sizeUnits = storageUnitToUse !== "auto" ? storageUnitToUse : void 0;
      const tooltipFormatted = formatStorageTooltip(
        filePaths,
        storageService,
        tooltipStyle.get(),
        round5.get(),
        sizeUnits
      );
      tooltipText.set(tooltipFormatted);
      return renderResourceLabel(lblTyp, storage, round5.get(), sizeUnits);
    }
  );
  let inputHandlerBindings;
  const storageModule = Module({
    textIcon: bind(icon11),
    label: labelBinding(),
    tooltipText: bind(tooltipText),
    boxClass: "storage",
    showLabelBinding: bind(label12),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler11.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick9
          },
          onSecondaryClick: {
            cmd: rightClick18
          },
          onMiddleClick: {
            cmd: middleClick18
          },
          onScrollUp: {
            fn: () => {
              labelType4.set(
                LABEL_TYPES[(LABEL_TYPES.indexOf(labelType4.get()) + 1) % LABEL_TYPES.length]
              );
            }
          },
          onScrollDown: {
            fn: () => {
              labelType4.set(
                LABEL_TYPES[(LABEL_TYPES.indexOf(labelType4.get()) - 1 + LABEL_TYPES.length) % LABEL_TYPES.length]
              );
            }
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        labelBinding.drop();
      }
    }
  });
  return storageModule;
};

// src/components/bar/modules/submap/helpers/index.ts
import AstalHyprland5 from "gi://AstalHyprland?version=0.1";
var hyprlandService5 = AstalHyprland5.get_default();
var isSubmapEnabled = (submap, enabled2, disabled) => {
  return submap !== "default" ? enabled2 : disabled;
};
var getInitialSubmap = (submapStatus2) => {
  let submap = hyprlandService5.message("submap");
  const newLineCarriage = /\n/g;
  submap = submap.replace(newLineCarriage, "");
  if (submap === "unknown request") {
    submap = "default";
  }
  submapStatus2.set(submap);
};

// src/components/bar/modules/submap/index.tsx
import AstalHyprland6 from "gi://AstalHyprland?version=0.1";

// src/lib/string/formatters.ts
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function toTitleCase(str) {
  return str.toLowerCase().replace(/(?:^|\s|-|_)\w/g, (match) => match.toUpperCase()).replace(/[-_]/g, " ");
}

// src/components/bar/modules/submap/index.tsx
var inputHandler12 = InputHandlerService.getInstance();
var hyprlandService6 = AstalHyprland6.get_default();
var {
  label: label13,
  showSubmapName,
  enabledIcon,
  disabledIcon,
  enabledText,
  disabledText,
  leftClick: leftClick10,
  rightClick: rightClick19,
  middleClick: middleClick19,
  scrollUp: scrollUp16,
  scrollDown: scrollDown16
} = configuration_default.bar.customModules.submap;
var submapStatus = Variable("default");
hyprlandService6.connect("submap", (_, currentSubmap) => {
  if (currentSubmap.length === 0) {
    submapStatus.set("default");
  } else {
    submapStatus.set(currentSubmap);
  }
});
getInitialSubmap(submapStatus);
var Submap = () => {
  const submapLabel = Variable.derive(
    [bind(submapStatus), bind(enabledText), bind(disabledText), bind(showSubmapName)],
    (status, enabled2, disabled, showSmName) => {
      if (showSmName) {
        return capitalizeFirstLetter(status);
      }
      return isSubmapEnabled(status, enabled2, disabled);
    }
  );
  const submapIcon = Variable.derive(
    [bind(submapStatus), bind(enabledIcon), bind(disabledIcon)],
    (status, enabled2, disabled) => {
      return isSubmapEnabled(status, enabled2, disabled);
    }
  );
  let inputHandlerBindings;
  const submapModule = Module({
    textIcon: submapIcon(),
    tooltipText: submapLabel(),
    label: submapLabel(),
    showLabelBinding: bind(label13),
    boxClass: "submap",
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler12.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick10
          },
          onSecondaryClick: {
            cmd: rightClick19
          },
          onMiddleClick: {
            cmd: middleClick19
          },
          onScrollUp: {
            cmd: scrollUp16
          },
          onScrollDown: {
            cmd: scrollDown16
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        submapLabel.drop();
        submapIcon.drop();
      }
    }
  });
  return submapModule;
};

// src/components/bar/modules/systray/index.tsx
import AstalTray from "gi://AstalTray?version=0.1";
var systemtray = AstalTray.get_default();
var { ignore: ignore2, customIcons } = configuration_default.bar.systray;
var createMenu = (menuModel, actionGroup) => {
  const menu = Gtk4.Menu.new_from_model(menuModel);
  menu.insert_action_group("dbusmenu", actionGroup);
  return menu;
};
var MenuCustomIcon = ({ iconLabel, iconColor, item }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "systray-icon txt-icon",
      label: iconLabel,
      css: iconColor ? `color: ${iconColor}` : "",
      tooltipMarkup: bind(item, "tooltipMarkup")
    }
  );
};
var MenuDefaultIcon = ({ item }) => {
  return /* @__PURE__ */ jsx2(
    "icon",
    {
      className: "systray-icon",
      gicon: bind(item, "gicon"),
      tooltipMarkup: bind(item, "tooltipMarkup")
    }
  );
};
var MenuEntry = ({ item, child }) => {
  let menu;
  const entryBinding = Variable.derive(
    [bind(item, "menuModel"), bind(item, "actionGroup")],
    (menuModel, actionGroup) => {
      if (menuModel === null) {
        return console.error(`Menu Model not found for ${item.id}`);
      }
      if (actionGroup === null) {
        return console.error(`Action Group not found for ${item.id}`);
      }
      menu = createMenu(menuModel, actionGroup);
    }
  );
  return /* @__PURE__ */ jsx2(
    "button",
    {
      cursor: "pointer",
      onClick: (self, event) => {
        if (isPrimaryClick(event)) {
          item.activate(0, 0);
        }
        if (isSecondaryClick(event)) {
          menu?.popup_at_widget(self, Gdk.Gravity.NORTH, Gdk.Gravity.SOUTH, null);
        }
        if (isMiddleClick(event)) {
          SystemUtilities.notify({ summary: "App Name", body: item.id });
        }
      },
      onDestroy: () => {
        menu?.destroy();
        entryBinding.drop();
      },
      children: child
    }
  );
};
var SysTray = () => {
  const isVis4 = Variable(false);
  const componentChildren = Variable.derive(
    [bind(systemtray, "items"), bind(ignore2), bind(customIcons)],
    (items, ignored2, custIcons) => {
      const filteredTray = items.filter(({ id }) => !ignored2.includes(id) && id !== null);
      isVis4.set(filteredTray.length > 0);
      return filteredTray.map((item) => {
        const matchedCustomIcon = Object.keys(custIcons).find(
          (iconRegex) => item.id.match(iconRegex)
        );
        if (matchedCustomIcon !== void 0) {
          const iconLabel = custIcons[matchedCustomIcon].icon || "\u{F082B}";
          const iconColor = custIcons[matchedCustomIcon].color;
          return /* @__PURE__ */ jsx2(MenuEntry, { item, children: /* @__PURE__ */ jsx2(MenuCustomIcon, { iconLabel, iconColor, item }) });
        }
        return /* @__PURE__ */ jsx2(MenuEntry, { item, children: /* @__PURE__ */ jsx2(MenuDefaultIcon, { item }) });
      });
    }
  );
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      className: "systray-container",
      onDestroy: () => {
        isVis4.drop();
        componentChildren.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "systray",
    isVis: bind(isVis4),
    isBox: true,
    props: {}
  };
};

// src/lib/poller/BashPoller.ts
var BashPoller = class {
  /**
   * Creates an instance of BashPoller.
   *
   * @param _targetVariable - The target variable to poll.
   * @param _trackers - An array of trackers to monitor.
   * @param _pollingInterval - The interval at which polling occurs.
   * @param _updateCommand - The command to update the target variable.
   * @param _pollingFunction - The function to execute during each poll.
   * @param params - Additional parameters for the polling function.
   *
   * @example
   *
   * ```ts
   * //##################### EXAMPLE ##########################
   *  const updatesPoller = new BashPoller<string, []>(
   *    pendingUpdates,
   *    [bind(padZero), bind(postInputUpdater)],
   *    bind(pollingInterval),
   *    updateCommand.value,
   *    processUpdateCount,
   *  );
   * //#######################################################
   *
   * ```
   */
  constructor(_targetVariable, _trackers, _pollingInterval, _updateCommand, _pollingFunction, ...params) {
    this._targetVariable = _targetVariable;
    this._trackers = _trackers;
    this._pollingInterval = _pollingInterval;
    this._updateCommand = _updateCommand;
    this._pollingFunction = _pollingFunction;
    this._params = params;
    this._poller = new Poller(this._pollingInterval, this._trackers, this.execute);
  }
  _poller;
  _params;
  /**
   * Executes the bash command specified in the updateCommand property.
   *
   * The result of the command is processed by the pollingFunction and
   * assigned to the targetVariable.
   */
  execute = async () => {
    try {
      const res = await execAsync(`bash -c "${this._updateCommand}"`);
      this._targetVariable.set(await this._pollingFunction(res, ...this._params));
    } catch (error) {
      console.error(`Error executing bash command "${this._updateCommand}":`, error);
    }
  };
  /**
   * Starts the polling process.
   */
  start() {
    this._poller.start();
  }
  /**
   * Stops the polling process.
   */
  stop() {
    this._poller.stop();
  }
  /**
   * Initializes the poller with the specified module.
   *
   * @param moduleName - The name of the module to initialize.
   */
  initialize(moduleName) {
    this._poller.initialize(moduleName);
  }
};

// src/components/bar/modules/updates/index.tsx
var inputHandler13 = InputHandlerService.getInstance();
var {
  updateCommand,
  updateTooltipCommand,
  extendedTooltip,
  label: label14,
  padZero,
  autoHide,
  pollingInterval: pollingInterval9,
  icon: icon12,
  leftClick: leftClick11,
  rightClick: rightClick20,
  middleClick: middleClick20,
  scrollUp: scrollUp17,
  scrollDown: scrollDown17
} = configuration_default.bar.customModules.updates;
var pendingUpdates = Variable("0");
var pendingUpdatesTooltip = Variable("");
var postInputUpdater = Variable(true);
var isVis3 = Variable(!autoHide.get());
var processUpdateCount = (updateCount) => {
  if (!padZero.get()) return updateCount;
  return `${updateCount.padStart(2, "0")}`;
};
var processUpdateTooltip = (updateTooltip, updateCount) => {
  const defaultTooltip = updateCount.get() + " updates available";
  if (!extendedTooltip.get() || !updateTooltip) return defaultTooltip;
  return defaultTooltip + "\n\n" + updateTooltip;
};
var updatesPoller = new BashPoller(
  pendingUpdates,
  [bind(padZero), bind(postInputUpdater), bind(updateCommand)],
  bind(pollingInterval9),
  updateCommand.get(),
  processUpdateCount
);
var tooltipPoller = new BashPoller(
  pendingUpdatesTooltip,
  [bind(extendedTooltip), bind(postInputUpdater), bind(updateTooltipCommand)],
  bind(pollingInterval9),
  updateTooltipCommand.get(),
  processUpdateTooltip,
  pendingUpdates
);
updatesPoller.initialize("updates");
tooltipPoller.initialize("updates");
Variable.derive([bind(autoHide)], (autoHideModule) => {
  isVis3.set(!autoHideModule || autoHideModule && parseFloat(pendingUpdates.get()) > 0);
});
var updatesIcon = Variable.derive(
  [bind(icon12.pending), bind(icon12.updated), bind(pendingUpdates)],
  (pendingIcon, updatedIcon, pUpdates) => {
    isVis3.set(!autoHide.get() || autoHide.get() && parseFloat(pUpdates) > 0);
    return parseFloat(pUpdates) === 0 ? updatedIcon : pendingIcon;
  }
);
var Updates = () => {
  let inputHandlerBindings;
  const updatesModule = Module({
    textIcon: updatesIcon(),
    tooltipText: bind(pendingUpdatesTooltip),
    boxClass: "updates",
    isVis: bind(isVis3),
    label: bind(pendingUpdates),
    showLabelBinding: bind(label14),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler13.attachHandlers(
          self,
          {
            onPrimaryClick: {
              cmd: leftClick11
            },
            onSecondaryClick: {
              cmd: rightClick20
            },
            onMiddleClick: {
              cmd: middleClick20
            },
            onScrollUp: {
              cmd: scrollUp17
            },
            onScrollDown: {
              cmd: scrollDown17
            }
          },
          postInputUpdater
        );
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
      }
    }
  });
  return updatesModule;
};

// src/components/bar/modules/volume/helpers/index.ts
var icons = {
  101: "\u{F057E}",
  66: "\u{F057E}",
  34: "\u{F0580}",
  1: "\u{F057F}",
  0: "\u{F075F}"
};
var getIcon = (isMuted, vol) => {
  if (isMuted) return icons[0];
  const foundVol = [101, 66, 34, 1, 0].find((threshold) => threshold <= vol * 100);
  if (foundVol !== void 0) {
    return icons[foundVol];
  }
  return icons[101];
};

// src/components/bar/modules/volume/index.tsx
import AstalWp2 from "gi://AstalWp?version=0.1";
var wireplumber2 = AstalWp2.get_default();
var audioService2 = wireplumber2?.audio;
var { rightClick: rightClick21, middleClick: middleClick21, scrollUp: scrollUp18, scrollDown: scrollDown18 } = configuration_default.bar.volume;
var Volume = () => {
  const VolumeIcon = ({ isMuted, volume }) => {
    return /* @__PURE__ */ jsx2("label", { className: "bar-button-icon volume txt-icon bar", label: getIcon(isMuted, volume) });
  };
  const VolumeLabel = ({ volume }) => {
    return /* @__PURE__ */ jsx2("label", { className: "bar-button-label volume", label: `${Math.round(volume * 100)}%` });
  };
  const componentTooltip = Variable.derive(
    [
      bind(audioService2.defaultSpeaker, "description"),
      bind(audioService2.defaultSpeaker, "volume"),
      bind(audioService2.defaultSpeaker, "mute")
    ],
    (desc, vol, isMuted) => {
      return `${getIcon(isMuted, vol)} ${desc}`;
    }
  );
  const componentClassName = Variable.derive(
    [configuration_default.theme.bar.buttons.style, configuration_default.bar.volume.label],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `volume-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const componentChildren = Variable.derive(
    [
      bind(configuration_default.bar.volume.label),
      bind(audioService2.defaultSpeaker, "volume"),
      bind(audioService2.defaultSpeaker, "mute")
    ],
    (showLabel2, vol, isMuted) => {
      if (showLabel2) {
        return /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(VolumeIcon, { isMuted, volume: vol }),
          /* @__PURE__ */ jsx2(VolumeLabel, { volume: vol })
        ] });
      }
      return /* @__PURE__ */ jsx2(VolumeIcon, { isMuted, volume: vol });
    }
  );
  const component = /* @__PURE__ */ jsx2(
    "box",
    {
      vexpand: true,
      tooltipText: componentTooltip(),
      className: componentClassName(),
      onDestroy: () => {
        componentTooltip.drop();
        componentClassName.drop();
        componentChildren.drop();
      },
      children: componentChildren()
    }
  );
  return {
    component,
    isVisible: true,
    boxClass: "volume",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick21),
            bind(middleClick21),
            bind(scrollUp18),
            bind(scrollDown18),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                openDropdownMenu(clicked, event, "audiomenu");
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick21.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick21.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp18.get(), scrollDown18.get())
            );
          }
        );
      }
    }
  };
};

// src/services/weather/adapters/weatherApi/mapper.ts
var WeatherApiStatusMapper = class {
  _WEATHER_API_STATUS_MAP = {
    warning: "WARNING",
    sunny: "SUNNY",
    clear: "CLEAR",
    partly_cloudy: "PARTLY CLOUDY",
    partly_cloudy_night: "PARTLY CLOUDY NIGHT",
    cloudy: "CLOUDY",
    overcast: "PARTLY CLOUDY",
    mist: "FOG",
    patchy_rain_nearby: "LIGHT RAIN",
    patchy_rain_possible: "LIGHT RAIN",
    patchy_snow_possible: "SNOW",
    patchy_sleet_possible: "SLEET",
    patchy_freezing_drizzle_possible: "SLEET",
    thundery_outbreaks_possible: "THUNDERSTORM",
    blowing_snow: "HEAVY SNOW",
    blizzard: "HEAVY SNOW",
    fog: "FOG",
    freezing_fog: "FOG",
    patchy_light_drizzle: "LIGHT RAIN",
    light_drizzle: "LIGHT RAIN",
    freezing_drizzle: "SLEET",
    heavy_freezing_drizzle: "SLEET",
    patchy_light_rain: "LIGHT RAIN",
    light_rain: "LIGHT RAIN",
    moderate_rain_at_times: "RAIN",
    moderate_rain: "LIGHT RAIN",
    heavy_rain_at_times: "HEAVY RAIN",
    heavy_rain: "HEAVY RAIN",
    light_freezing_rain: "SLEET",
    moderate_or_heavy_freezing_rain: "SLEET",
    light_sleet: "SLEET",
    moderate_or_heavy_sleet: "SLEET",
    patchy_light_snow: "SNOW",
    light_snow: "SNOW",
    patchy_moderate_snow: "SNOW",
    moderate_snow: "HEAVY SNOW",
    patchy_heavy_snow: "HEAVY SNOW",
    heavy_snow: "HEAVY SNOW",
    ice_pellets: "HAIL",
    light_rain_shower: "HEAVY RAIN",
    moderate_or_heavy_rain_shower: "HEAVY RAIN",
    torrential_rain_shower: "HEAVY RAIN",
    light_sleet_showers: "SLEET",
    moderate_or_heavy_sleet_showers: "SLEET",
    light_snow_showers: "SNOW",
    moderate_or_heavy_snow_showers: "SNOW",
    light_showers_of_ice_pellets: "HAIL",
    moderate_or_heavy_showers_of_ice_pellets: "HAIL",
    patchy_light_rain_with_thunder: "THUNDERSTORM",
    moderate_or_heavy_rain_with_thunder: "THUNDERSTORM",
    moderate_or_heavy_rain_in_area_with_thunder: "THUNDERSTORM",
    patchy_light_snow_with_thunder: "HEAVY SNOW",
    moderate_or_heavy_snow_with_thunder: "HEAVY SNOW"
  };
  /**
   * Maps weather API status strings to standardized WeatherStatus
   *
   * @param status - The weather status string from the API
   * @returns The mapped WeatherStatus
   */
  toStatus(status) {
    const snakeCasedStatus = status.toLowerCase().replace(" ", "_");
    return this._WEATHER_API_STATUS_MAP[snakeCasedStatus] ?? "WARNING";
  }
};

// src/services/weather/adapters/weatherApi/index.ts
var WeatherApiAdapter = class {
  _statusMapper;
  constructor() {
    this._statusMapper = new WeatherApiStatusMapper();
  }
  /**
   * Transforms WeatherAPI.com's response structure to the standard format
   *
   * @param data - Raw response from WeatherAPI.com
   * @returns Normalized weather data
   */
  toStandardFormat(data) {
    return {
      location: this._mapLocation(data),
      current: this._mapCurrentWeather(data),
      forecast: data.forecast.forecastday.map(this._mapDailyForecast.bind(this)),
      lastUpdated: /* @__PURE__ */ new Date()
    };
  }
  /**
   * Maps WeatherAPI location data to standard format
   *
   * @param data - WeatherAPI response data
   * @returns Standardized location information
   */
  _mapLocation(data) {
    const location4 = data.location;
    return {
      name: location4.name,
      region: location4.region
    };
  }
  /**
   * Maps current weather conditions to standard format
   *
   * @param data - WeatherAPI response data
   * @returns Standardized current weather data
   */
  _mapCurrentWeather(data) {
    const currentWeather = data.current;
    const currentRainChance = data.forecast.forecastday[0].hour[0].chance_of_rain;
    return {
      temperature: currentWeather.temp_c,
      condition: {
        text: this._statusMapper.toStatus(currentWeather.condition.text),
        isDay: currentWeather.is_day === 1
      },
      wind: {
        speed: currentWeather.wind_kph,
        direction: currentWeather.wind_dir
      },
      chanceOfRain: currentRainChance,
      humidity: currentWeather.humidity,
      feelsLike: currentWeather.feelslike_c
    };
  }
  /**
   * Maps daily forecast data to standard format
   *
   * @param forecastDay - WeatherAPI forecast day data
   * @returns Standardized daily forecast
   */
  _mapDailyForecast(forecastDay) {
    return {
      date: new Date(forecastDay.date),
      tempMin: forecastDay.day.mintemp_c,
      tempMax: forecastDay.day.maxtemp_c,
      condition: {
        text: this._statusMapper.toStatus(forecastDay.day.condition.text)
      },
      chanceOfRain: forecastDay.day.daily_chance_of_rain,
      hourly: forecastDay.hour.map(this._mapHourlyForecast.bind(this))
    };
  }
  /**
   * Maps hourly forecast data to standard format
   *
   * @param hourlyForecast - WeatherAPI hourly forecast data
   * @returns Standardized hourly forecast
   */
  _mapHourlyForecast(hourlyForecast) {
    return {
      time: new Date(hourlyForecast.time),
      temperature: hourlyForecast.temp_c,
      condition: {
        text: this._statusMapper.toStatus(hourlyForecast.condition.text.trim()),
        isDay: hourlyForecast.is_day === 1
      },
      chanceOfRain: hourlyForecast.chance_of_rain
    };
  }
};

// src/services/weather/adapters/registry.ts
var weatherProviders = {
  weatherapi: {
    name: "WeatherAPI.com",
    baseUrl: "https://api.weatherapi.com/v1",
    adapter: new WeatherApiAdapter(),
    formatUrl: (location4, apiKey) => `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${location4}&days=1&aqi=no&alerts=no`
  }
};
function getWeatherProvider(providerId) {
  return weatherProviders[providerId];
}

// src/services/weather/keyManager/index.ts
var { EXISTS, IS_REGULAR } = default2.FileTest;
var WeatherApiKeyManager = class {
  weatherApiKey = Variable("");
  _apiKeyUserInput = configuration_default.menus.clock.weather.key;
  constructor() {
    this._mountWeatherKey(this._apiKeyUserInput.get());
    this._apiKeyUserInput.subscribe((key) => {
      this._mountWeatherKey(key);
    });
  }
  /**
   * Updates the weather API key variable with the processed key value
   *
   * @param key - The API key input which could be a direct key or file path
   */
  _mountWeatherKey(key) {
    const fetchedKey = this._getWeatherKey(key);
    this.weatherApiKey.set(fetchedKey);
  }
  /**
   * Retrieves the weather API key from a file if it exists and is valid.
   *
   * @param apiKey - The path to the file containing the weather API key.
   * @returns The weather API key if found, otherwise the original apiKey.
   */
  _getWeatherKey(apiKey) {
    const weatherKey = apiKey;
    const keyIsAFilePath = default2.file_test(weatherKey, EXISTS) && default2.file_test(weatherKey, IS_REGULAR);
    if (!keyIsAFilePath) {
      return apiKey;
    }
    try {
      const fileContentArray = default2.file_get_contents(weatherKey)[1];
      const fileContent = new TextDecoder().decode(fileContentArray);
      if (!fileContent) {
        console.error("weather_api_key file is empty");
        return "";
      }
      const parsedContent = JSON.parse(fileContent);
      if (parsedContent.weather_api_key !== void 0) {
        return parsedContent.weather_api_key;
      }
      console.error("weather_api_key is missing in the JSON content");
      return "";
    } catch (error) {
      console.error(`Failed to read or parse weather key file: ${error}`);
      return "";
    }
  }
};

// src/lib/httpClient/index.ts
import Soup from "gi://Soup?version=3.0";

// src/lib/httpClient/HttpError.ts
var HttpError = class extends Error {
  status;
  data;
  url;
  method;
  constructor(options2) {
    const { status, message, data, url, method } = options2;
    const errorMessage = message ? `: ${message}` : "";
    const response = `HTTP ${status}${errorMessage}`;
    super(response);
    this.name = "HttpError";
    this.status = status;
    this.data = data;
    this.url = url;
    this.method = method;
  }
};

// src/lib/httpClient/index.ts
var HttpClient = class {
  _session;
  constructor(defaultTimeout = 30) {
    this._session = new Soup.Session();
    this._session.timeout = defaultTimeout;
    this._session.user_agent = "HyprPanel/1.0";
  }
  /*******************************************
   *              HTTP Methods               *
   *******************************************/
  /**
   * Performs an HTTP GET request
   * @param url - Target URL for the request
   * @param options - Optional configuration for the request
   */
  async get(url, options2) {
    return this._request("GET", url, options2);
  }
  /**
   * Performs an HTTP POST request
   * @param url - Target URL for the request
   * @param data - Request payload to send
   * @param options - Optional configuration for the request
   */
  async post(url, data, options2) {
    return this._request("POST", url, { ...options2, body: data });
  }
  /**
   * Performs an HTTP PUT request
   * @param url - Target URL for the request
   * @param data - Request payload to send
   * @param options - Optional configuration for the request
   */
  async put(url, data, options2) {
    return this._request("PUT", url, { ...options2, body: data });
  }
  /**
   * Performs an HTTP PATCH request
   * @param url - Target URL for the request
   * @param data - Request payload with partial updates
   * @param options - Optional configuration for the request
   */
  async patch(url, data, options2) {
    return this._request("PATCH", url, { ...options2, body: data });
  }
  /**
   * Performs an HTTP DELETE request
   * @param url - Target URL for the request
   * @param options - Optional configuration for the request
   */
  async delete(url, options2) {
    return this._request("DELETE", url, options2);
  }
  /*******************************************
   *           SOUP Infrastructure           *
   *******************************************/
  /**
   * Internal request handler for all HTTP methods
   * @param method - HTTP method to use
   * @param url - Target URL for the request
   * @param options - Configuration options for the request
   * @private
   */
  async _request(method, url, options2 = {}) {
    const requestPromise = new Promise((resolve, reject) => {
      const message = Soup.Message.new(method, url);
      if (!message) {
        return reject(new Error(`Failed to create request for ${url}`));
      }
      this._assignHeaders(message, options2);
      this._constructBodyIfExists(method, options2, message);
      if (options2.timeout) {
        this._session.timeout = options2.timeout / 1e3;
      }
      this._sendRequest(resolve, reject, message, options2);
    });
    return requestPromise;
  }
  /**
   * Constructs and sets the request body for HTTP methods that support it
   * @param method - HTTP method being used
   * @param options - Request options containing the body
   * @param message - Soup message to attach the body to
   */
  _constructBodyIfExists(method, options2, message) {
    const canContainBody = ["POST", "PUT", "PATCH"].includes(method);
    if (options2.body && canContainBody) {
      let body;
      let contentType = options2.headers?.["Content-Type"] || "application/json";
      if (typeof options2.body === "object") {
        body = JSON.stringify(options2.body);
      } else {
        body = options2.body;
        contentType = contentType || "text/plain";
      }
      const textEncoder = new TextEncoder();
      const bytes = new default2.Bytes(textEncoder.encode(body));
      message.set_request_body_from_bytes(contentType, bytes);
    }
  }
  /**
   * Assigns headers to the request message
   * @param message - Soup message to add headers to
   * @param options - Request options containing headers
   */
  _assignHeaders(message, options2) {
    const headers = message.get_request_headers();
    if (options2.headers) {
      Object.entries(options2.headers).forEach(([key, value]) => {
        headers.append(key, value);
      });
    }
    return headers;
  }
  /**
   * Sends the HTTP request and handles the response
   * @param resolve - Promise resolve callback
   * @param reject - Promise reject callback
   * @param message - Prepared Soup message to send
   * @param options - Request configuration options
   */
  _sendRequest(resolve, reject, message, options2) {
    const cancellable = options2.signal ?? null;
    try {
      const bytes = this._session.send_and_read(message, cancellable);
      const {
        response: responseText,
        headers: responseHeaders,
        status
      } = this._decodeResponseSync(message, bytes);
      const responseData = this._parseReponseData(options2, responseText);
      const response = {
        data: responseData,
        status,
        headers: responseHeaders
      };
      if (status >= 400) {
        const httpError = new HttpError({
          status,
          data: responseData,
          url: message.get_uri().to_string(),
          method: message.get_method()
        });
        return reject(httpError);
      }
      return resolve(response);
    } catch (error) {
      reject(error);
    }
  }
  /**
   * Decodes the response bytes into text and extracts response metadata
   * @param message - Soup message containing the response
   * @param bytes - Response bytes from the sync request
   */
  _decodeResponseSync(message, bytes) {
    if (!bytes) {
      throw new Error("No response received");
    }
    const decoder = new TextDecoder();
    const byteData = bytes.get_data();
    const responseText = byteData ? decoder.decode(byteData) : "";
    const status = message.get_status();
    const responseHeaders = {};
    message.get_response_headers().foreach((name2, value) => {
      responseHeaders[name2] = value;
    });
    return {
      response: responseText,
      status,
      headers: responseHeaders
    };
  }
  /**
   * Parses response text based on the expected response type
   * @param options - Request options containing responseType preference
   * @param responseText - Raw response text to parse
   */
  _parseReponseData(options2, responseText) {
    if (!responseText) {
      return "";
    }
    if (options2.responseType === "text") {
      return responseText;
    }
    try {
      const parsedResponseText = JSON.parse(responseText);
      return parsedResponseText;
    } catch (e) {
      errorHandler(`Failed to parse JSON response: ${e}`);
    }
  }
};
var httpClient = new HttpClient();

// src/services/weather/types/index.ts
var WeatherIcon = /* @__PURE__ */ ((WeatherIcon2) => {
  WeatherIcon2["WARNING"] = "\u{F0F2F}";
  WeatherIcon2["SUNNY"] = "\u{F0599}";
  WeatherIcon2["CLEAR"] = "\u{F0594}";
  WeatherIcon2["PARTLY CLOUDY"] = "\u{F0595}";
  WeatherIcon2["PARTLY CLOUDY NIGHT"] = "\u{F0F31}";
  WeatherIcon2["CLOUDY"] = "\u{F0590}";
  WeatherIcon2["FOG"] = "\u{F0591}";
  WeatherIcon2["LIGHT RAIN"] = "\u{F0F33}";
  WeatherIcon2["RAIN"] = "\u{F0597}";
  WeatherIcon2["HEAVY RAIN"] = "\u{F0596}";
  WeatherIcon2["SNOW"] = "\u{F0F34}";
  WeatherIcon2["HEAVY SNOW"] = "\u{F0F36}";
  WeatherIcon2["SLEET"] = "\u{F067F}";
  WeatherIcon2["HAIL"] = "\u{F0592}";
  WeatherIcon2["THUNDERSTORM"] = "\u{F067E}";
  return WeatherIcon2;
})(WeatherIcon || {});

// src/services/weather/default.ts
var DEFAULT_WEATHER = {
  location: {
    name: "Unknown",
    region: "",
    country: ""
  },
  current: {
    temperature: 0,
    feelsLike: 0,
    condition: {
      text: "WARNING",
      isDay: true
    },
    wind: {
      speed: 0,
      direction: "N",
      degree: 0
    },
    humidity: 0
  },
  forecast: [
    {
      date: /* @__PURE__ */ new Date(),
      tempMin: 0,
      tempMax: 0,
      condition: {
        text: "WARNING",
        isDay: true
      },
      chanceOfRain: 0,
      hourly: []
    }
  ],
  lastUpdated: /* @__PURE__ */ new Date(),
  provider: "none"
};

// src/lib/units/speed/index.ts
var SpeedConverter = class _SpeedConverter {
  _value;
  _unit;
  static _TO_MPS = {
    mps: 1,
    kph: 0.277778,
    mph: 0.44704,
    knots: 0.514444
  };
  static _LABELS = {
    mps: "m/s",
    kph: "km/h",
    mph: "mph",
    knots: "kn"
  };
  constructor(value, unit5) {
    this._value = value;
    this._unit = unit5;
  }
  /**
   * Creates a converter from meters per second
   * @param value - Value in m/s
   */
  static fromMps(value) {
    return new _SpeedConverter(value, "mps");
  }
  /**
   * Creates a converter from kilometers per hour
   * @param value - Value in km/h
   */
  static fromKph(value) {
    return new _SpeedConverter(value, "kph");
  }
  /**
   * Creates a converter from miles per hour
   * @param value - Value in mph
   */
  static fromMph(value) {
    return new _SpeedConverter(value, "mph");
  }
  /**
   * Creates a converter from knots
   * @param value - Value in knots
   */
  static fromKnots(value) {
    return new _SpeedConverter(value, "knots");
  }
  /**
   * Converts to m/s (base unit)
   */
  _toBaseUnit() {
    return this._value * _SpeedConverter._TO_MPS[this._unit];
  }
  /**
   * Converts from m/s to target unit
   */
  _fromBaseUnit(targetUnit) {
    return this._toBaseUnit() / _SpeedConverter._TO_MPS[targetUnit];
  }
  /**
   * Converts to meters per second
   */
  toMps() {
    return this._toBaseUnit();
  }
  /**
   * Converts to kilometers per hour
   */
  toKph() {
    return this._fromBaseUnit("kph");
  }
  /**
   * Converts to miles per hour
   */
  toMph() {
    return this._fromBaseUnit("mph");
  }
  /**
   * Converts to knots
   */
  toKnots() {
    return this._fromBaseUnit("knots");
  }
  /**
   * Formats to meters per second
   * @param precision - Number of decimal places
   */
  formatMps(precision = 1) {
    return `${this.toMps().toFixed(precision)} ${_SpeedConverter._LABELS.mps}`;
  }
  /**
   * Formats to kilometers per hour
   * @param precision - Number of decimal places
   */
  formatKph(precision = 0) {
    return `${this.toKph().toFixed(precision)} ${_SpeedConverter._LABELS.kph}`;
  }
  /**
   * Formats to miles per hour
   * @param precision - Number of decimal places
   */
  formatMph(precision = 0) {
    return `${this.toMph().toFixed(precision)} ${_SpeedConverter._LABELS.mph}`;
  }
  /**
   * Formats to knots
   * @param precision - Number of decimal places
   */
  formatKnots(precision = 0) {
    return `${this.toKnots().toFixed(precision)} ${_SpeedConverter._LABELS.knots}`;
  }
};

// src/services/weather/index.ts
var WeatherService = class _WeatherService {
  static instance;
  _currentProvider = "weatherapi";
  _location;
  _intervalFrequency;
  _interval = null;
  _unitType = Variable("imperial");
  _weatherData = Variable(DEFAULT_WEATHER);
  _temperature = Variable(this._getTemperature());
  _rainChance = Variable(this._getRainChance());
  _windCondition = Variable(this._getWindConditions());
  _statusIcon = Variable(this._getWeatherStatusIcon());
  _gaugeIcon = Variable(this._getGaugeIcon());
  constructor() {
    const { interval: interval3, location: location4 } = configuration_default.menus.clock.weather;
    this._intervalFrequency = interval3;
    this._location = location4;
    this._initializeConfigTracker();
    this._initializeWeatherTracker();
  }
  /**
   * Gets the singleton instance of WeatherService
   *
   * @returns The WeatherService instance
   */
  static getInstance() {
    if (_WeatherService.instance === void 0) {
      _WeatherService.instance = new _WeatherService();
    }
    return _WeatherService.instance;
  }
  /**
   * Changes the active weather provider
   *
   * @param providerId - Provider identifier (e.g., 'weatherapi', 'openweathermap')
   */
  setProvider(providerId) {
    const provider = getWeatherProvider(providerId);
    if (!provider) {
      throw new Error(`Weather provider '${providerId}' not found`);
    }
    this._currentProvider = providerId;
    const weatherKeyManager = new WeatherApiKeyManager();
    const weatherKey = weatherKeyManager.weatherApiKey.get();
    if (weatherKey && this._location.get()) {
      this._initializeWeatherPolling(this._intervalFrequency.get(), this._location.get(), weatherKey);
    }
  }
  /**
   * Gets the complete weather data variable
   *
   * @returns Variable containing all weather information
   */
  get weatherData() {
    return this._weatherData;
  }
  /**
   * Gets the formatted temperature string variable
   *
   * @returns Variable containing temperature with unit
   */
  get temperature() {
    return this._temperature;
  }
  /**
   * Gets the rain probability percentage variable
   *
   * @returns Variable containing rain chance percentage
   */
  get rainChance() {
    return this._rainChance;
  }
  /**
   * Gets the formatted wind conditions variable
   *
   * @returns Variable containing wind speed with unit
   */
  get windCondition() {
    return this._windCondition;
  }
  /**
   * Gets the weather condition icon variable
   *
   * @returns Variable containing weather icon enum value
   */
  get statusIcon() {
    return this._statusIcon;
  }
  /**
   * Gets the temperature gauge icon and color variable
   *
   * @returns Variable containing gauge icon and color class
   */
  get gaugeIcon() {
    return this._gaugeIcon;
  }
  /**
   * Gets the current temperature unit type
   *
   * @returns Current unit type ('imperial' or 'metric')
   */
  get unit() {
    return this._unitType.get();
  }
  /**
   * Sets the temperature unit type
   *
   * @param unitType - New unit type ('imperial' or 'metric')
   */
  set unit(unitType) {
    this._unitType.set(unitType);
  }
  /**
   * Gets the temperature from the weather data in the specified unit.
   *
   * @returns - The temperature formatted as a string with the appropriate unit.
   */
  _getTemperature() {
    const { temperature: temperature3 } = this.weatherData.get().current;
    const tempConverter = TemperatureConverter.fromCelsius(temperature3);
    const isImperial = this._unitType.get() === "imperial";
    return isImperial ? tempConverter.formatFahrenheit() : tempConverter.formatCelsius();
  }
  /**
   * Gets the appropriate weather icon for a condition
   *
   * @returns Weather icon
   */
  _getWeatherStatusIcon() {
    const { condition } = this.weatherData.get().current;
    if (condition.text === "PARTLY CLOUDY NIGHT" && !condition.isDay) {
      return "\u{F0F31}" /* PARTLY CLOUDY NIGHT */;
    }
    return WeatherIcon[condition.text] ?? "\u{F0F2F}" /* WARNING */;
  }
  /**
   * Returns the weather gauge icon and color class based on the temperature in Celsius.
   *
   * @returns - An object containing the weather icon and color class.
   */
  _getGaugeIcon() {
    const { temperature: temperature3 } = this.weatherData.get().current;
    const icons2 = {
      38: "\uF2C7",
      24: "\uF2C8",
      10: "\uF2C9",
      [-4]: "\uF2CA",
      [-18]: "\uF2CB"
    };
    const colors = {
      38: "weather-color red",
      24: "weather-color orange",
      10: "weather-color lavender",
      [-4]: "weather-color blue",
      [-18]: "weather-color sky"
    };
    const threshold = temperature3 < -18 ? -18 : [38, 24, 10, -4, -18].find((threshold2) => threshold2 <= temperature3) ?? 10;
    const icon14 = icons2[threshold || 10];
    const color2 = colors[threshold || 10];
    return {
      icon: icon14,
      color: color2
    };
  }
  /**
   * Gets the wind conditions from the weather data in the specified unit.
   *
   * @returns - The wind conditions formatted as a string with the appropriate unit.
   */
  _getWindConditions() {
    const windConditions = this.weatherData.get().current.wind;
    const isImperial = this._unitType.get() === "imperial";
    const windSpeed = windConditions?.speed ?? 0;
    const speedConverter = SpeedConverter.fromKph(windSpeed);
    return isImperial ? speedConverter.formatMph() : speedConverter.formatKph();
  }
  /**
   * Gets the chance of rain from the weather forecast data.
   *
   * @returns - The chance of rain formatted as a percentage string.
   */
  _getRainChance() {
    const chanceOfRain = this.weatherData.get().current.chanceOfRain;
    if (!chanceOfRain) {
      return 0;
    }
    return chanceOfRain;
  }
  /**
   * Sets up configuration tracking for dynamic weather updates
   */
  _initializeConfigTracker() {
    const weatherKeyManager = new WeatherApiKeyManager();
    Variable.derive(
      [bind(weatherKeyManager.weatherApiKey), bind(this._intervalFrequency), bind(this._location)],
      (weatherKey, weatherInterval, loc) => {
        if (!weatherKey) {
          return this._weatherData.set(DEFAULT_WEATHER);
        }
        this._initializeWeatherPolling(weatherInterval, loc, weatherKey);
      }
    )();
  }
  /**
   * Sets up weather data tracking to update derived values
   */
  _initializeWeatherTracker() {
    Variable.derive([bind(this._weatherData), bind(this._unitType)], () => {
      this._statusIcon.set(this._getWeatherStatusIcon());
      this._temperature.set(this._getTemperature());
      this._rainChance.set(this._getRainChance());
      this._windCondition.set(this._getWindConditions());
      this._statusIcon.set(this._getWeatherStatusIcon());
      this._gaugeIcon.set(this._getGaugeIcon());
    });
  }
  /**
   * Sets up a weather update interval function.
   *
   * @param weatherInterval - The interval in milliseconds at which to fetch weather updates
   * @param loc - The location for which to fetch weather data
   * @param weatherKey - The API key for accessing the weather service
   */
  _initializeWeatherPolling(weatherInterval, loc, weatherKey) {
    if (this._interval !== null) {
      this._interval.cancel();
    }
    const provider = getWeatherProvider(this._currentProvider);
    if (!provider) {
      console.error(`Weather provider '${this._currentProvider}' not found`);
      return;
    }
    this._interval = interval(weatherInterval, async () => {
      this._fetchWeatherData(provider, loc, weatherKey);
    });
  }
  /**
   * Fetches weather data from the specified provider
   *
   * @param provider - The weather provider to use
   * @param loc - The location to fetch weather for
   * @param weatherKey - The API key for authentication
   */
  async _fetchWeatherData(provider, loc, weatherKey) {
    const formattedLocation = loc.replaceAll(" ", "%20");
    const url = provider.formatUrl?.(formattedLocation, weatherKey) || `${provider.baseUrl}?location=${formattedLocation}&key=${weatherKey}`;
    try {
      const response = await httpClient.get(url);
      if (response.data && provider.adapter) {
        const transformedData = provider.adapter.toStandardFormat(response.data);
        this._weatherData.set(transformedData);
      } else {
        this._weatherData.set(DEFAULT_WEATHER);
      }
    } catch (error) {
      console.error(`Failed to fetch weather from ${provider.name}: ${error}`);
      this._weatherData.set(DEFAULT_WEATHER);
    }
  }
};

// src/components/bar/modules/weather/index.tsx
var inputHandler14 = InputHandlerService.getInstance();
var weatherService = WeatherService.getInstance();
var { label: label15, unit: unit2, leftClick: leftClick12, rightClick: rightClick22, middleClick: middleClick22, scrollUp: scrollUp19, scrollDown: scrollDown19 } = configuration_default.bar.customModules.weather;
var Weather2 = () => {
  const iconBinding = Variable.derive([bind(weatherService.statusIcon)], (icon14) => {
    return icon14;
  });
  const labelBinding = Variable.derive([bind(weatherService.temperature), bind(unit2)], (temp) => {
    return temp;
  });
  let inputHandlerBindings;
  const weatherModule = Module({
    textIcon: iconBinding(),
    tooltipText: bind(weatherService.weatherData).as(
      (wthr) => `Weather Status: ${toTitleCase(wthr.current.condition.text)}`
    ),
    boxClass: "weather-custom",
    label: labelBinding(),
    showLabelBinding: bind(label15),
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler14.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick12
          },
          onSecondaryClick: {
            cmd: rightClick22
          },
          onMiddleClick: {
            cmd: middleClick22
          },
          onScrollUp: {
            cmd: scrollUp19
          },
          onScrollDown: {
            cmd: scrollDown19
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        iconBinding.drop();
        labelBinding.drop();
      }
    }
  });
  return weatherModule;
};

// src/components/bar/modules/window_title/index.tsx
import AstalHyprland8 from "gi://AstalHyprland?version=0.1";

// src/components/bar/modules/window_title/helpers/appIcons.ts
var defaultWindowTitleMap = [
  // Misc
  ["kitty", "\u{F011B}", "Kitty Terminal"],
  ["firefox", "\u{F0239}", "Firefox"],
  ["microsoft-edge", "\u{F01E9}", "Edge"],
  ["discord", "\uF1FF", "Discord"],
  ["vesktop", "\uF1FF", "Vesktop"],
  ["org.kde.dolphin", "\uF07C", "Dolphin"],
  ["plex", "\u{F06BA}", "Plex"],
  ["steam", "\uF1B6", "Steam"],
  ["spotify", "\u{F04C7}", "Spotify"],
  ["ristretto", "\u{F02E9}", "Ristretto"],
  ["obsidian", "\u{F14E7}", "Obsidian"],
  ["rofi", "\uEA6D", "Rofi"],
  ["qBittorrent$", "\uF0ED", "QBittorrent"],
  // Browsers
  ["google-chrome", "\uF268", "Google Chrome"],
  ["brave-browser", "\u{F059F}", "Brave Browser"],
  ["chromium", "\uF268", "Chromium"],
  ["opera", "\uF26A", "Opera"],
  ["vivaldi", "\u{F059F}", "Vivaldi"],
  ["waterfox", "\u{F059F}", "Waterfox"],
  ["thorium", "\u{F059F}", "Thorium"],
  ["tor-browser", "\uF371", "Tor Browser"],
  ["floorp", "\u{F0239}", "Floorp"],
  ["zen", "\uEBF8", "Zen Browser"],
  // Terminals
  ["gnome-terminal", "\uE795", "GNOME Terminal"],
  ["konsole", "\uE795", "Konsole"],
  ["alacritty", "\uE795", "Alacritty"],
  ["wezterm", "\uE795", "Wezterm"],
  ["foot", "\u{F0F52}", "Foot Terminal"],
  ["tilix", "\uE795", "Tilix"],
  ["xterm", "\uE795", "XTerm"],
  ["urxvt", "\uE795", "URxvt"],
  ["com.mitchellh.ghostty", "\u{F02A0}", "Ghostty"],
  ["^st$", "\uE795", "st Terminal"],
  // Development Tools
  ["code", "\u{F0A1E}", "Visual Studio Code"],
  ["vscode", "\u{F0A1E}", "VS Code"],
  ["sublime-text", "\uE7AA", "Sublime Text"],
  ["atom", "\uE764", "Atom"],
  ["android-studio", "\u{F0034}", "Android Studio"],
  ["jetbrains-idea", "\uE7B5", "IntelliJ IDEA"],
  ["jetbrains-pycharm", "\uE877", "PyCharm"],
  ["jetbrains-webstorm", "\uE8E4", "WebStorm"],
  ["jetbrains-phpstorm", "\uE862", "PhpStorm"],
  ["eclipse", "\uE79E", "Eclipse"],
  ["netbeans", "\uE79B", "NetBeans"],
  ["docker", "\uF21F", "Docker"],
  ["vim", "\uE7C5", "Vim"],
  ["neovim", "\uF36F", "Neovim"],
  ["neovide", "\uF36F", "Neovide"],
  ["emacs", "\uE632", "Emacs"],
  // Communication Tools
  ["slack", "\u{F04B1}", "Slack"],
  ["telegram-desktop", "\uF2C6", "Telegram"],
  ["org.telegram.desktop", "\uE217", "Telegram"],
  ["whatsapp", "\u{F05A3}", "WhatsApp"],
  ["teams", "\u{F02BB}", "Microsoft Teams"],
  ["skype", "\u{F04AF}", "Skype"],
  ["thunderbird", "\uF370", "Thunderbird"],
  // File Managers
  ["nautilus", "\u{F0770}", "Files (Nautilus)"],
  ["thunar", "\u{F0770}", "Thunar"],
  ["pcmanfm", "\u{F0770}", "PCManFM"],
  ["nemo", "\u{F0770}", "Nemo"],
  ["ranger", "\u{F0770}", "Ranger"],
  ["doublecmd", "\u{F0770}", "Double Commander"],
  ["krusader", "\u{F0770}", "Krusader"],
  // Media Players
  ["vlc", "\u{F057C}", "VLC Media Player"],
  ["mpv", "\uF36E", "MPV"],
  ["rhythmbox", "\u{F04C3}", "Rhythmbox"],
  // Graphics Tools
  ["gimp", "\uF338", "GIMP"],
  ["inkscape", "\uF33B", "Inkscape"],
  ["krita", "\uF33D", "Krita"],
  ["blender", "\u{F00AB}", "Blender"],
  // Video Editing
  ["kdenlive", "\uF33C", "Kdenlive"],
  // Games and Gaming Platforms
  ["lutris", "\u{F0EB5}", "Lutris"],
  ["heroic", "\u{F0EB5}", "Heroic Games Launcher"],
  ["minecraft", "\u{F0373}", "Minecraft"],
  ["csgo", "\u{F0EB5}", "CS:GO"],
  ["dota2", "\u{F0EB5}", "Dota 2"],
  // Office and Productivity
  ["evernote", "\uEF98", "Evernote"],
  ["sioyek", "\uE28A", "Sioyek"],
  // Cloud Services and Sync
  ["dropbox", "\u{F01E3}", "Dropbox"]
];
var overrides = {
  kitty: "\uF489"
};
var defaultApplicationIconMap = defaultWindowTitleMap.reduce(
  (iconMapAccumulator, windowTitles) => {
    const currentIconMap = iconMapAccumulator;
    const appName = windowTitles[0];
    const appIcon = windowTitles[1];
    if (!(appName in currentIconMap)) {
      currentIconMap[appName] = appIcon;
    }
    return currentIconMap;
  },
  overrides
);

// src/components/bar/modules/window_title/helpers/title.ts
import AstalHyprland7 from "gi://AstalHyprland?version=0.1";
var { title_map: userDefinedTitles } = configuration_default.bar.windowtitle;
var hyprlandService7 = AstalHyprland7.get_default();
var clientBinding;
var clientTitle = Variable("");
function trackClientUpdates(client) {
  clientBinding?.drop();
  clientBinding = void 0;
  if (client === null) {
    return;
  }
  clientBinding = Variable.derive([bind(client, "title")], (currentTitle) => {
    clientTitle.set(currentTitle);
  });
}
Variable.derive([bind(hyprlandService7, "focusedClient")], (client) => {
  trackClientUpdates(client);
});
var getWindowMatch = (hyprlandClient) => {
  if (!hyprlandClient?.class) {
    return {
      icon: "\u{F01C4}",
      label: "Desktop"
    };
  }
  const clientClass = hyprlandClient.class.toLowerCase();
  const potentialWindowTitles = [...userDefinedTitles.get(), ...defaultWindowTitleMap];
  const windowMatch = potentialWindowTitles.find((title) => RegExp(title[0]).test(clientClass));
  return {
    icon: windowMatch ? windowMatch[1] : "\u{F08C6}",
    label: windowMatch ? windowMatch[2] : `${capitalizeFirstLetter(hyprlandClient.class ?? "Unknown")}`
  };
};
var getTitle = (client, useCustomTitle, useClassName) => {
  if (client === null || useCustomTitle) return getWindowMatch(client).label;
  const title = client.title;
  if (!title || useClassName) return client.class;
  if (title.length === 0 || title.match(/^ *$/)) {
    return client.class;
  }
  return title;
};
var truncateTitle = (title, max_size) => {
  if (max_size > 0 && title.length > max_size) {
    return title.substring(0, max_size).trim() + "...";
  }
  return title;
};

// src/components/bar/modules/window_title/index.tsx
var hyprlandService8 = AstalHyprland8.get_default();
var { leftClick: leftClick13, rightClick: rightClick23, middleClick: middleClick23, scrollDown: scrollDown20, scrollUp: scrollUp20 } = configuration_default.bar.windowtitle;
var ClientTitle = () => {
  const { custom_title, class_name, label: label16, icon: icon14, truncation: truncation3, truncation_size: truncation_size3 } = configuration_default.bar.windowtitle;
  const ClientIcon = ({ client }) => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        className: "bar-button-icon windowtitle txt-icon bar",
        label: getWindowMatch(client).icon
      }
    );
  };
  const ClientLabel = ({
    client,
    useCustomTitle,
    useClassName,
    showIcon: showIcon4,
    truncate,
    truncationSize
  }) => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        className: `bar-button-label windowtitle ${showIcon4 ? "" : "no-icon"}`,
        label: truncateTitle(
          getTitle(client, useCustomTitle, useClassName),
          truncate ? truncationSize : -1
        )
      }
    );
  };
  const componentClassName = Variable.derive(
    [bind(configuration_default.theme.bar.buttons.style), bind(label16)],
    (style3, showLabel2) => {
      const styleMap2 = {
        default: "style1",
        split: "style2",
        wave: "style3",
        wave2: "style3"
      };
      return `windowtitle-container ${styleMap2[style3]} ${!showLabel2 ? "no-label" : ""}`;
    }
  );
  const componentChildren = Variable.derive(
    [
      bind(hyprlandService8, "focusedClient"),
      bind(custom_title),
      bind(class_name),
      bind(label16),
      bind(icon14),
      bind(truncation3),
      bind(truncation_size3),
      bind(clientTitle)
    ],
    (client, useCustomTitle, useClassName, showLabel2, showIcon4, truncate, truncationSize) => {
      const children = [];
      if (showIcon4) {
        children.push(/* @__PURE__ */ jsx2(ClientIcon, { client }));
      }
      if (showLabel2) {
        children.push(
          /* @__PURE__ */ jsx2(
            ClientLabel,
            {
              client,
              useCustomTitle,
              useClassName,
              truncate,
              truncationSize,
              showIcon: showIcon4
            }
          )
        );
      }
      return children;
    }
  );
  const component = /* @__PURE__ */ jsx2("box", { className: componentClassName(), children: componentChildren() });
  return {
    component,
    isVisible: true,
    boxClass: "windowtitle",
    props: {
      setup: (self) => {
        let disconnectFunctions = [];
        Variable.derive(
          [
            bind(rightClick23),
            bind(middleClick23),
            bind(scrollUp20),
            bind(scrollDown20),
            bind(configuration_default.bar.scrollSpeed)
          ],
          () => {
            disconnectFunctions.forEach((disconnect) => disconnect());
            disconnectFunctions = [];
            const throttledHandler = throttledScrollHandler(configuration_default.bar.scrollSpeed.get());
            disconnectFunctions.push(
              onPrimaryClick(self, (clicked, event) => {
                runAsyncCommand(leftClick13.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onSecondaryClick(self, (clicked, event) => {
                runAsyncCommand(rightClick23.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onMiddleClick(self, (clicked, event) => {
                runAsyncCommand(middleClick23.get(), { clicked, event });
              })
            );
            disconnectFunctions.push(
              onScroll(self, throttledHandler, scrollUp20.get(), scrollDown20.get())
            );
          }
        );
      }
    }
  };
};

// src/components/bar/modules/workspaces/helpers/utils.ts
import AstalHyprland10 from "gi://AstalHyprland?version=0.1";

// src/services/workspace/index.ts
import AstalHyprland9 from "gi://AstalHyprland?version=0.1";
var hyprlandService9 = AstalHyprland9.get_default();
var WorkspaceService = class _WorkspaceService {
  static instance;
  _ignored = configuration_default.bar.workspaces.ignored;
  workspaceRules = Variable(this._getWorkspaceMonitorMap());
  forceUpdater = Variable(true);
  constructor() {
  }
  /**
   * Gets the singleton instance of WorkspaceService
   *
   * @returns The WorkspaceService instance
   */
  static getInstance() {
    if (_WorkspaceService.instance === void 0) {
      _WorkspaceService.instance = new _WorkspaceService();
    }
    return _WorkspaceService.instance;
  }
  /** Computes which workspace numbers should be rendered for a given monitor.
   *
   * This function consolidates both active and all possible workspaces (based on rules),
   * then filters them by the selected monitor if `isMonitorSpecific` is set to `true`.
   *
   * @param totalWorkspaces - The total number of workspaces (a fallback if workspace rules are not enforced).
   * @param workspaceInstances - A list of Hyprland workspace objects.
   * @param workspaceMonitorRules - The map of monitor names to assigned workspace numbers.
   * @param monitorId - The numeric identifier of the monitor.
   * @param isMonitorSpecific - If `true`, only include the workspaces that match this monitor.
   * @param hyprlandMonitorInstances - A list of Hyprland monitor objects.
   *
   * @returns An array of workspace numbers that should be shown.
   */
  getWorkspaces(totalWorkspaces, workspaceInstances, workspaceMonitorRules, monitorId, isMonitorSpecific, hyprlandMonitorInstances) {
    let allPotentialWorkspaces = range(totalWorkspaces || 8);
    const allWorkspaceInstances = workspaceInstances ?? [];
    const activeWorkspaceIds = allWorkspaceInstances.map((workspaceInstance) => workspaceInstance.id);
    const monitorReferencesForActiveWorkspaces = allWorkspaceInstances.map((workspaceInstance) => {
      return {
        id: workspaceInstance.monitor?.id ?? -1,
        name: workspaceInstance.monitor?.name ?? ""
      };
    });
    const currentMonitorInstance = hyprlandMonitorInstances.find((monitorObj) => monitorObj.id === monitorId) || monitorReferencesForActiveWorkspaces.find((monitorObj) => monitorObj.id === monitorId);
    const allWorkspacesWithRules = Object.keys(workspaceMonitorRules).reduce(
      (accumulator, monitorName) => {
        return [...accumulator, ...workspaceMonitorRules[monitorName]];
      },
      []
    );
    const activeWorkspacesForCurrentMonitor = activeWorkspaceIds.filter((workspaceId) => {
      const metadataForWorkspace = allWorkspaceInstances.find(
        (workspaceObj) => workspaceObj.id === workspaceId
      );
      if (metadataForWorkspace) {
        return metadataForWorkspace?.monitor?.id === monitorId;
      }
      if (currentMonitorInstance && Object.hasOwnProperty.call(workspaceMonitorRules, currentMonitorInstance.name) && allWorkspacesWithRules.includes(workspaceId)) {
        return workspaceMonitorRules[currentMonitorInstance.name].includes(workspaceId);
      }
      return false;
    });
    if (isMonitorSpecific) {
      const validWorkspaceNumbers = range(totalWorkspaces).filter((workspaceNumber) => {
        return this._isWorkspaceValidForMonitor(
          workspaceNumber,
          workspaceMonitorRules,
          monitorId,
          allWorkspaceInstances,
          hyprlandMonitorInstances
        );
      });
      allPotentialWorkspaces = unique([...activeWorkspacesForCurrentMonitor, ...validWorkspaceNumbers]);
    } else {
      allPotentialWorkspaces = unique([...allPotentialWorkspaces, ...activeWorkspaceIds]);
    }
    return allPotentialWorkspaces.filter((workspace) => !this._isWorkspaceIgnored(workspace)).sort((a, b) => a - b);
  }
  /**
   * Navigates to the next workspace in the current monitor.
   */
  goToNextWorkspace() {
    this._navigateWorkspace("next");
  }
  /**
   * Navigates to the previous workspace in the current monitor.
   */
  goToPreviousWorkspace() {
    this._navigateWorkspace("prev");
  }
  /**
   * Gets a new set of workspace rules. Used to update stale rules.
   */
  refreshWorkspaceRules() {
    this.workspaceRules.set(this._getWorkspaceMonitorMap());
  }
  /**
   * Forces a UI update by toggling the forceUpdater variable
   */
  forceAnUpdate() {
    this.forceUpdater.set(!this.forceUpdater.get());
  }
  /**
   * Checks whether a given workspace is valid (assigned) for the specified monitor.
   *
   * This function inspects the workspace rules object to determine if the current workspace belongs
   * to the target monitor. If no workspace rules exist, the function defaults to returning `true`.
   *
   * @param workspaceId - The number representing the current workspace.
   * @param workspaceMonitorRules - The map of monitor names to assigned workspace numbers.
   * @param monitorId - The numeric identifier for the monitor.
   * @param workspaceList - A list of Hyprland workspace objects.
   * @param monitorList - A list of Hyprland monitor objects.
   *
   * @returns `true` if the workspace is assigned to the monitor or if no rules exist. Otherwise, `false`.
   */
  _isWorkspaceValidForMonitor(workspaceId, workspaceMonitorRules, monitorId, workspaceList, monitorList) {
    const monitorNameMap = {};
    const allWorkspaceInstances = workspaceList ?? [];
    const workspaceMonitorReferences = allWorkspaceInstances.filter((workspaceInstance) => workspaceInstance !== null).map((workspaceInstance) => {
      return {
        id: workspaceInstance.monitor?.id,
        name: workspaceInstance.monitor?.name
      };
    });
    const mergedMonitorInstances = [
      ...new Map(
        [...workspaceMonitorReferences, ...monitorList].map((monitorCandidate) => [
          monitorCandidate.id,
          monitorCandidate
        ])
      ).values()
    ];
    mergedMonitorInstances.forEach((monitorInstance) => {
      monitorNameMap[monitorInstance.id] = monitorInstance.name;
    });
    const currentMonitorName = monitorNameMap[monitorId];
    const currentMonitorWorkspaceRules = workspaceMonitorRules[currentMonitorName] ?? [];
    const activeWorkspaceIds = new Set(allWorkspaceInstances.map((ws) => ws.id));
    const filteredWorkspaceRules = currentMonitorWorkspaceRules.filter(
      (ws) => !activeWorkspaceIds.has(ws)
    );
    if (filteredWorkspaceRules === void 0) {
      return false;
    }
    return filteredWorkspaceRules.includes(workspaceId);
  }
  /**
   * Changes the active workspace in the specified direction ('next' or 'prev').
   *
   * This function uses the current monitor's set of active or assigned workspaces and
   * cycles through them in the chosen direction. It also respects the list of ignored
   * workspaces, skipping any that match the ignored pattern.
   *
   * @param direction - The direction to navigate ('next' or 'prev').
   * @param currentMonitorWorkspacesVariable - A Variable containing an array of workspace numbers for the current monitor.
   * @param onlyActiveWorkspaces - Whether to only include active (occupied) workspaces when navigating.
   * @param ignoredWorkspacesVariable - A Variable that contains the ignored workspaces pattern.
   */
  _navigateWorkspace(direction) {
    const allHyprlandWorkspaces = hyprlandService9.get_workspaces() ?? [];
    const activeWorkspaceIds = allHyprlandWorkspaces.filter(
      (workspaceInstance) => hyprlandService9.focusedMonitor.id === workspaceInstance.monitor?.id
    ).map((workspaceInstance) => workspaceInstance.id);
    const assignedOrOccupiedWorkspaces = activeWorkspaceIds.sort((a, b) => a - b);
    if (assignedOrOccupiedWorkspaces.length === 0) {
      return;
    }
    const workspaceIndex = assignedOrOccupiedWorkspaces.indexOf(hyprlandService9.focusedWorkspace?.id);
    const step = direction === "next" ? 1 : -1;
    let newIndex = (workspaceIndex + step + assignedOrOccupiedWorkspaces.length) % assignedOrOccupiedWorkspaces.length;
    let attempts = 0;
    while (attempts < assignedOrOccupiedWorkspaces.length) {
      const targetWorkspaceNumber = assignedOrOccupiedWorkspaces[newIndex];
      if (!this._isWorkspaceIgnored(targetWorkspaceNumber)) {
        hyprlandService9.dispatch("workspace", targetWorkspaceNumber.toString());
        return;
      }
      newIndex = (newIndex + step + assignedOrOccupiedWorkspaces.length) % assignedOrOccupiedWorkspaces.length;
      attempts++;
    }
  }
  /**
   * Fetches a map of monitors to the workspace numbers that belong to them.
   *
   * This function communicates with the Hyprland service to retrieve workspace rules in JSON format.
   * Those rules are parsed, and a map of monitor names to lists of assigned workspace numbers is constructed.
   *
   * @returns An object where each key is a monitor name, and each value is an array of workspace numbers.
   */
  _getWorkspaceMonitorMap() {
    try {
      const rulesResponse = hyprlandService9.message("j/workspacerules");
      const workspaceMonitorRules = {};
      const parsedWorkspaceRules = JSON.parse(rulesResponse);
      parsedWorkspaceRules.forEach((rule) => {
        const workspaceNumber = parseInt(rule.workspaceString, 10);
        if (rule.monitor === void 0 || isNaN(workspaceNumber)) {
          return;
        }
        const doesMonitorExistInRules = Object.hasOwnProperty.call(
          workspaceMonitorRules,
          rule.monitor
        );
        if (doesMonitorExistInRules) {
          workspaceMonitorRules[rule.monitor].push(workspaceNumber);
        } else {
          workspaceMonitorRules[rule.monitor] = [workspaceNumber];
        }
      });
      return workspaceMonitorRules;
    } catch (error) {
      console.error(error);
      return {};
    }
  }
  /**
   * Checks if a workspace number should be ignored based on a regular expression.
   *
   * @param workspaceNumber - The numeric representation of the workspace to check.
   * @returns `true` if the workspace should be ignored, otherwise `false`.
   */
  _isWorkspaceIgnored(workspaceNumber) {
    if (this._ignored.get() === "") {
      return false;
    }
    const ignoredWorkspacesRegex = new RegExp(this._ignored.get());
    return ignoredWorkspacesRegex.test(workspaceNumber.toString());
  }
};

// src/components/bar/modules/workspaces/helpers/utils.ts
var workspaceService = WorkspaceService.getInstance();
var hyprlandService10 = AstalHyprland10.get_default();
var { reverse_scroll } = configuration_default.bar.workspaces;
function throttle(func, limit) {
  let isThrottleActive;
  return function(...args) {
    if (!isThrottleActive) {
      func.apply(this, args);
      isThrottleActive = true;
      setTimeout(() => {
        isThrottleActive = false;
      }, limit);
    }
  };
}
function initThrottledScrollHandlers(scrollSpeed) {
  const throttledScrollUp = throttle(() => {
    if (reverse_scroll.get()) {
      workspaceService.goToPreviousWorkspace();
    } else {
      workspaceService.goToNextWorkspace();
    }
  }, 200 / scrollSpeed);
  const throttledScrollDown = throttle(() => {
    if (reverse_scroll.get()) {
      workspaceService.goToNextWorkspace();
    } else {
      workspaceService.goToPreviousWorkspace();
    }
  }, 200 / scrollSpeed);
  return { throttledScrollUp, throttledScrollDown };
}
function initWorkspaceEvents() {
  hyprlandService10.connect("config-reloaded", () => {
    workspaceService.refreshWorkspaceRules();
  });
  hyprlandService10.connect("client-moved", () => {
    workspaceService.forceAnUpdate();
  });
  hyprlandService10.connect("client-added", () => {
    workspaceService.forceAnUpdate();
  });
  hyprlandService10.connect("client-removed", () => {
    workspaceService.forceAnUpdate();
  });
}

// src/components/bar/modules/workspaces/helpers/index.ts
import AstalHyprland11 from "gi://AstalHyprland?version=0.1";
var hyprlandService11 = AstalHyprland11.get_default();
var { monochrome, background } = configuration_default.theme.bar.buttons;
var { background: wsBackground, active } = configuration_default.theme.bar.buttons.workspaces;
var { showWsIcons, showAllActive, numbered_active_indicator: wsActiveIndicator } = configuration_default.bar.workspaces;
var isWorkspaceActiveOnMonitor = (monitor3, i) => {
  return showAllActive.get() && hyprlandService11.get_monitor(monitor3)?.activeWorkspace?.id === i;
};
var getWsIcon = (wsIconMap, i) => {
  const iconEntry = wsIconMap[i];
  const defaultIcon = `${i}`;
  if (iconEntry === void 0) {
    return defaultIcon;
  }
  if (typeof iconEntry === "string" && iconEntry !== "") {
    return iconEntry;
  }
  const hasIcon = typeof iconEntry === "object" && "icon" in iconEntry && iconEntry.icon !== "";
  if (hasIcon) {
    return iconEntry.icon;
  }
  return defaultIcon;
};
var getWsColor = (wsIconMap, i, smartHighlight2, monitor3) => {
  const iconEntry = wsIconMap[i];
  const hasColor = typeof iconEntry === "object" && "color" in iconEntry && isValidGjsColor(iconEntry.color);
  if (iconEntry === void 0) {
    return "";
  }
  if (showWsIcons.get() && smartHighlight2 && wsActiveIndicator.get() === "highlight" && (hyprlandService11.focusedWorkspace?.id === i || isWorkspaceActiveOnMonitor(monitor3, i))) {
    const iconColor = monochrome.get() ? background.get() : wsBackground.get();
    const iconBackground = hasColor && isValidGjsColor(iconEntry.color) ? iconEntry.color : active.get();
    const colorCss = `color: ${iconColor};`;
    const backgroundCss = `background: ${iconBackground};`;
    return colorCss + backgroundCss;
  }
  if (hasColor && isValidGjsColor(iconEntry.color)) {
    return `color: ${iconEntry.color}; border-bottom-color: ${iconEntry.color};`;
  }
  return "";
};
var getAppIcon = (workspaceIndex, removeDuplicateIcons, { iconMap: userDefinedIconMap, defaultIcon, emptyIcon }) => {
  const workspaceClients = hyprlandService11.get_clients().filter((client) => client?.workspace?.id === workspaceIndex).map((client) => [client.class, client.title]);
  if (!workspaceClients.length) {
    return emptyIcon;
  }
  const findIconForClient = (clientClass, clientTitle2) => {
    const appIconMap = { ...userDefinedIconMap, ...defaultApplicationIconMap };
    const iconEntry = Object.entries(appIconMap).find(([matcher]) => {
      if (matcher.startsWith("class:")) {
        return new RegExp(matcher.substring(6)).test(clientClass);
      }
      if (matcher.startsWith("title:")) {
        return new RegExp(matcher.substring(6)).test(clientTitle2);
      }
      return new RegExp(matcher, "i").test(clientClass);
    });
    return iconEntry?.[1] ?? defaultIcon;
  };
  let icons2 = workspaceClients.reduce((iconAccumulator, [clientClass, clientTitle2]) => {
    const icon14 = findIconForClient(clientClass, clientTitle2);
    if (icon14 !== void 0) {
      iconAccumulator.push(icon14);
    }
    return iconAccumulator;
  }, []);
  if (icons2.length) {
    if (removeDuplicateIcons) {
      icons2 = unique(icons2);
    }
    return icons2.join(" ");
  }
  return defaultIcon;
};
var renderClassnames = (showIcons, showNumbered, numberedActiveIndicator, showWsIcons4, smartHighlight2, monitor3, i) => {
  const isWorkspaceActive = hyprlandService11.focusedWorkspace?.id === i || isWorkspaceActiveOnMonitor(monitor3, i);
  const isActive2 = isWorkspaceActive ? "active" : "";
  if (showIcons) {
    return `workspace-icon txt-icon bar ${isActive2}`;
  }
  if (showNumbered || showWsIcons4) {
    const numActiveInd = isWorkspaceActive ? numberedActiveIndicator : "";
    const wsIconClass = showWsIcons4 ? "txt-icon" : "";
    const smartHighlightClass = smartHighlight2 ? "smart-highlight" : "";
    const className = `workspace-number can_${numberedActiveIndicator} ${numActiveInd} ${wsIconClass} ${smartHighlightClass} ${isActive2}`;
    return className.trim();
  }
  return `default ${isActive2}`;
};
var renderLabel = (showIcons, availableIndicator, activeIndicator, occupiedIndicator, showAppIcons, appIcons, workspaceMask2, showWorkspaceIcons, wsIconMap, i, index, monitor3) => {
  if (showAppIcons) {
    return appIcons;
  }
  if (showIcons) {
    if (hyprlandService11.focusedWorkspace?.id === i || isWorkspaceActiveOnMonitor(monitor3, i)) {
      return activeIndicator;
    }
    if ((hyprlandService11.get_workspace(i)?.get_clients().length || 0) > 0) {
      return occupiedIndicator;
    }
    if (monitor3 !== -1) {
      return availableIndicator;
    }
  }
  if (showWorkspaceIcons) {
    return getWsIcon(wsIconMap, i);
  }
  return workspaceMask2 ? `${index + 1}` : `${i}`;
};

// src/components/bar/modules/workspaces/workspaces.tsx
import AstalHyprland12 from "gi://AstalHyprland?version=0.1";
var workspaceService2 = WorkspaceService.getInstance();
var hyprlandService12 = AstalHyprland12.get_default();
var {
  workspaces,
  monitorSpecific,
  workspaceMask,
  spacing,
  ignored,
  showAllActive: showAllActive2,
  show_icons,
  show_numbered,
  numbered_active_indicator,
  workspaceIconMap,
  showWsIcons: showWsIcons2,
  showApplicationIcons,
  applicationIconOncePerWorkspace,
  applicationIconMap,
  applicationIconEmptyWorkspace,
  applicationIconFallback
} = configuration_default.bar.workspaces;
var { available, active: active2, occupied } = configuration_default.bar.workspaces.icons;
var { matugen: matugen2 } = configuration_default.theme;
var { smartHighlight } = configuration_default.theme.bar.buttons.workspaces;
initWorkspaceEvents();
var WorkspaceModule = ({ monitor: monitor3 }) => {
  const boxChildren = Variable.derive(
    [
      bind(monitorSpecific),
      bind(hyprlandService12, "workspaces"),
      bind(workspaceMask),
      bind(workspaces),
      bind(show_icons),
      bind(available),
      bind(active2),
      bind(occupied),
      bind(show_numbered),
      bind(numbered_active_indicator),
      bind(spacing),
      bind(workspaceIconMap),
      bind(showWsIcons2),
      bind(showApplicationIcons),
      bind(applicationIconOncePerWorkspace),
      bind(applicationIconMap),
      bind(applicationIconEmptyWorkspace),
      bind(applicationIconFallback),
      bind(matugen2),
      bind(smartHighlight),
      bind(hyprlandService12, "clients"),
      bind(hyprlandService12, "monitors"),
      bind(ignored),
      bind(showAllActive2),
      bind(hyprlandService12, "focusedWorkspace"),
      bind(workspaceService2.workspaceRules),
      bind(workspaceService2.forceUpdater)
    ],
    (isMonitorSpecific, workspaceList, workspaceMaskFlag, totalWorkspaces, displayIcons, availableStatus, activeStatus, occupiedStatus, displayNumbered, numberedActiveIndicator, spacingValue, workspaceIconMapping, displayWorkspaceIcons, displayApplicationIcons, appIconOncePerWorkspace, applicationIconMapping, applicationIconEmptyWorkspace2, applicationIconFallback2, matugenEnabled, smartHighlightEnabled, clients, monitorList) => {
      const wsRules = workspaceService2.workspaceRules.get();
      const workspacesToRender = workspaceService2.getWorkspaces(
        totalWorkspaces,
        workspaceList,
        wsRules,
        monitor3,
        isMonitorSpecific,
        monitorList
      );
      return workspacesToRender.map((wsId, index) => {
        const appIcons = displayApplicationIcons ? getAppIcon(wsId, appIconOncePerWorkspace, {
          iconMap: applicationIconMapping,
          defaultIcon: applicationIconFallback2,
          emptyIcon: applicationIconEmptyWorkspace2
        }) : "";
        return /* @__PURE__ */ jsx2(
          "button",
          {
            className: "workspace-button",
            onClick: (_, event) => {
              if (isPrimaryClick(event)) {
                hyprlandService12.dispatch("workspace", wsId.toString());
              }
            },
            children: /* @__PURE__ */ jsx2(
              "label",
              {
                valign: Gtk4.Align.CENTER,
                css: `margin: 0rem ${0.375 * spacingValue}rem;${displayWorkspaceIcons && !matugenEnabled ? getWsColor(workspaceIconMapping, wsId, smartHighlightEnabled, monitor3) : ""}`,
                className: renderClassnames(
                  displayIcons,
                  displayNumbered,
                  numberedActiveIndicator,
                  displayWorkspaceIcons,
                  smartHighlightEnabled,
                  monitor3,
                  wsId
                ),
                label: renderLabel(
                  displayIcons,
                  availableStatus,
                  activeStatus,
                  occupiedStatus,
                  displayApplicationIcons,
                  appIcons,
                  workspaceMaskFlag,
                  displayWorkspaceIcons,
                  workspaceIconMapping,
                  wsId,
                  index,
                  monitor3
                ),
                setup: (self) => {
                  const currentWsClients = clients.filter(
                    (client) => client?.workspace?.id === wsId
                  );
                  self.toggleClassName("occupied", currentWsClients.length > 0);
                }
              }
            )
          }
        );
      });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      onDestroy: () => {
        boxChildren.drop();
      },
      children: boxChildren()
    }
  );
};

// src/components/bar/modules/workspaces/index.tsx
var { scroll_speed } = configuration_default.bar.workspaces;
var Workspaces = (monitor3 = -1) => {
  const component = /* @__PURE__ */ jsx2("box", { className: "workspaces-box-container", children: /* @__PURE__ */ jsx2(WorkspaceModule, { monitor: monitor3 }) });
  return {
    component,
    isVisible: true,
    boxClass: "workspaces",
    isBox: true,
    props: {
      setup: (self) => {
        let scrollHandlers;
        Variable.derive([bind(scroll_speed)], (scroll_speed2) => {
          if (scrollHandlers) {
            self.disconnect(scrollHandlers);
          }
          const { throttledScrollUp, throttledScrollDown } = initThrottledScrollHandlers(scroll_speed2);
          scrollHandlers = self.connect("scroll-event", (_, event) => {
            if (isScrollUp(event)) {
              throttledScrollUp();
            }
            if (isScrollDown(event)) {
              throttledScrollDown();
            }
          });
        });
      }
    }
  };
};

// src/components/bar/modules/worldclock/index.tsx
var inputHandler15 = InputHandlerService.getInstance();
var {
  format: format3,
  formatDiffDate,
  divider,
  tz,
  icon: icon13,
  showIcon: showIcon3,
  leftClick: leftClick14,
  rightClick: rightClick24,
  middleClick: middleClick24,
  scrollUp: scrollUp21,
  scrollDown: scrollDown21
} = configuration_default.bar.customModules.worldclock;
var WorldClock = () => {
  const iconBinding = Variable.derive([bind(icon13), bind(showIcon3)], (timeIcon, showTimeIcon) => {
    if (!showTimeIcon) {
      return "";
    }
    return timeIcon;
  });
  const timeBinding = Variable.derive(
    [systemTime, format3, formatDiffDate, tz, divider],
    (localSystemTime, timeFormat, differentDayFormat, targetTimeZones, timeDivider) => targetTimeZones.map((timeZoneId) => {
      const targetTimezone = default2.TimeZone.new(timeZoneId);
      const timeInTargetZone = localSystemTime.to_timezone(targetTimezone);
      if (timeInTargetZone === null) {
        return "Invalid TimeZone";
      }
      const isTargetZoneSameDay = timeInTargetZone.get_day_of_year() === localSystemTime.get_day_of_year();
      const formatForTimeZone = isTargetZoneSameDay ? timeFormat : differentDayFormat;
      return timeInTargetZone.format(formatForTimeZone);
    }).join(timeDivider)
  );
  let inputHandlerBindings;
  const microphoneModule = Module({
    textIcon: iconBinding(),
    label: timeBinding(),
    boxClass: "worldclock",
    props: {
      setup: (self) => {
        inputHandlerBindings = inputHandler15.attachHandlers(self, {
          onPrimaryClick: {
            cmd: leftClick14
          },
          onSecondaryClick: {
            cmd: rightClick24
          },
          onMiddleClick: {
            cmd: middleClick24
          },
          onScrollUp: {
            cmd: scrollUp21
          },
          onScrollDown: {
            cmd: scrollDown21
          }
        });
      },
      onDestroy: () => {
        inputHandlerBindings.drop();
        timeBinding.drop();
        iconBinding.drop();
      }
    }
  });
  return microphoneModule;
};

// src/components/bar/shared/widgetContainer/index.tsx
var computeVisible = (child) => {
  if (child.isVis !== void 0) {
    return child.isVis;
  }
  return child.isVisible ?? true;
};
var WidgetContainer = (child) => {
  const buttonClassName = bind(configuration_default.theme.bar.buttons.style).as((style3) => {
    const styleMap2 = {
      default: "style1",
      split: "style2",
      wave: "style3",
      wave2: "style4"
    };
    const boxClassName = Object.hasOwnProperty.call(child, "boxClass") ? child.boxClass : "";
    return `bar_item_box_visible ${styleMap2[style3]} ${boxClassName}`;
  });
  if (child.isBox === true) {
    return /* @__PURE__ */ jsx2("eventbox", { visible: computeVisible(child), ...child.props, children: /* @__PURE__ */ jsx2("box", { className: buttonClassName, children: child.component }) });
  }
  return /* @__PURE__ */ jsx2("button", { className: buttonClassName, visible: computeVisible(child), ...child.props, children: child.component });
};

// src/components/bar/layout/coreWidgets.tsx
function getCoreWidgets() {
  return {
    battery: () => WidgetContainer(BatteryLabel()),
    dashboard: () => WidgetContainer(Menu()),
    workspaces: (monitor3) => WidgetContainer(Workspaces(monitor3)),
    windowtitle: () => WidgetContainer(ClientTitle()),
    media: () => WidgetContainer(Media()),
    notifications: () => WidgetContainer(Notifications()),
    volume: () => WidgetContainer(Volume()),
    network: () => WidgetContainer(Network()),
    bluetooth: () => WidgetContainer(Bluetooth()),
    clock: () => WidgetContainer(Clock()),
    systray: () => WidgetContainer(SysTray()),
    microphone: () => WidgetContainer(Microphone()),
    ram: () => WidgetContainer(Ram()),
    cpu: () => WidgetContainer(Cpu()),
    cputemp: () => WidgetContainer(CpuTemp()),
    storage: () => WidgetContainer(Storage()),
    netstat: () => WidgetContainer(Netstat()),
    kbinput: () => WidgetContainer(KbInput()),
    updates: () => WidgetContainer(Updates()),
    submap: () => WidgetContainer(Submap()),
    weather: () => WidgetContainer(Weather2()),
    power: () => WidgetContainer(Power()),
    hyprsunset: () => WidgetContainer(Hyprsunset()),
    hypridle: () => WidgetContainer(Hypridle()),
    cava: () => WidgetContainer(Cava()),
    worldclock: () => WidgetContainer(WorldClock()),
    separator: () => ModuleSeparator()
  };
}

// src/lib/validation/types.ts
function isPrimitive(value) {
  return value === null || typeof value !== "object" && typeof value !== "function";
}

// src/components/bar/customModules/module_container/helpers/utils.ts
function parseCommandOutputJson(moduleName, cmdOutput) {
  try {
    if (typeof cmdOutput !== "string") {
      throw new Error("Input must be a string");
    }
    return JSON.parse(cmdOutput);
  } catch {
    throw new Error(`The command output for the following module is not valid JSON: ${moduleName}`);
  }
}

// src/components/bar/customModules/module_container/helpers/icon.ts
var ERROR_ICON = "\uF071";
function getIcon2(moduleName, commandOutput, moduleIcon) {
  if (Array.isArray(moduleIcon)) {
    return getIconFromArray(moduleName, commandOutput, moduleIcon);
  }
  if (typeof moduleIcon === "object") {
    return getIconFromObject(moduleName, commandOutput, moduleIcon);
  }
  return moduleIcon;
}
function getIconFromObject(moduleName, commandOutput, iconObject) {
  try {
    const commandResults = parseCommandOutputJson(moduleName, commandOutput);
    if (!isPrimitive(commandResults?.alt) || commandResults?.alt === void 0) {
      console.error(`Expected 'alt' to be a primitive for module: ${moduleName}`);
      return ERROR_ICON;
    }
    const resultsAltText = String(commandResults?.alt);
    const correspondingAltIcon = iconObject[resultsAltText];
    if (correspondingAltIcon === void 0) {
      console.error(`Corresponding icon ${resultsAltText} not found for module: ${moduleName}`);
      return typeof iconObject.default === "string" ? iconObject.default : ERROR_ICON;
    }
    if (typeof correspondingAltIcon !== "string") {
      console.error(`Corresponding icon ${resultsAltText} is not a string for module: ${moduleName}`);
      return ERROR_ICON;
    }
    return correspondingAltIcon;
  } catch {
    return ERROR_ICON;
  }
}
function getIconFromArray(moduleName, commandOutput, iconArray) {
  try {
    const commandResults = parseCommandOutputJson(moduleName, commandOutput);
    const resultsPercentage = commandResults?.percentage;
    if (typeof resultsPercentage !== "number") {
      console.error(`Expected percentage to be a number for module: ${moduleName}`);
      return ERROR_ICON;
    }
    if (isNaN(resultsPercentage) || resultsPercentage > 100) {
      console.error(`Expected percentage to be between 1-100 for module: ${moduleName}`);
      return ERROR_ICON;
    }
    const step = 100 / iconArray.length;
    const iconForStep = iconArray.find((_, index) => resultsPercentage <= step * (index + 1));
    return iconForStep ?? ERROR_ICON;
  } catch {
    return ERROR_ICON;
  }
}

// src/components/bar/customModules/module_container/helpers/label.ts
function getLabel(moduleName, commandOutput, labelConfig) {
  const processedCommandOutput = tryParseJson(moduleName, commandOutput);
  const regexForTemplateVariables = /\{([^{}]*)\}/g;
  return labelConfig.replace(regexForTemplateVariables, (_, path) => {
    return getValueForTemplateVariable(path, processedCommandOutput);
  });
}
function getValueForTemplateVariable(templatePath, commandOutput) {
  if (typeof commandOutput === "string") {
    return getTemplateValueForStringOutput(templatePath, commandOutput);
  }
  if (typeof commandOutput === "object" && commandOutput !== null) {
    return getTemplateValueForObjectOutput(templatePath, commandOutput);
  }
  return "";
}
function getTemplateValueForStringOutput(templatePath, commandOutput) {
  if (templatePath === "") {
    return commandOutput;
  }
  return "";
}
function getTemplateValueForObjectOutput(templatePath, commandOutput) {
  const pathParts = templatePath.split(".");
  function isRecord(value) {
    return value !== null && !Array.isArray(value) && typeof value === "object";
  }
  try {
    const result = pathParts.reduce((acc, part) => {
      if (!isRecord(acc)) {
        throw new Error("Path unreachable");
      }
      return acc[part];
    }, commandOutput);
    return isPrimitive(result) && result !== void 0 ? String(result) : "";
  } catch {
    return "";
  }
}
function tryParseJson(moduleName, commandOutput) {
  try {
    if (typeof commandOutput !== "string") {
      console.error(
        `Expected command output to be a string but found ${typeof commandOutput} for module: ${moduleName}`
      );
      return "";
    }
    const parsedCommand = JSON.parse(commandOutput);
    if (typeof parsedCommand === "object" && parsedCommand !== null && !Array.isArray(parsedCommand)) {
      return parsedCommand;
    }
    return commandOutput;
  } catch {
    return commandOutput;
  }
}

// src/components/bar/customModules/module_container/setup.ts
var inputHandler16 = InputHandlerService.getInstance();
function initCommandPoller(commandOutput, pollingInterval11, moduleExecute, moduleInterval) {
  const commandPoller = new BashPoller(
    commandOutput,
    [],
    bind(pollingInterval11),
    moduleExecute || "",
    (commandResult) => commandResult
  );
  if (moduleInterval >= 0) {
    commandPoller.initialize();
  }
  return commandPoller;
}
function initActionListener(actionExecutionListener, moduleExecuteOnAction, commandOutput) {
  actionExecutionListener.subscribe(() => {
    if (typeof moduleExecuteOnAction !== "string" || !moduleExecuteOnAction.length) {
      return;
    }
    execAsync(moduleExecuteOnAction).then((cmdOutput) => {
      commandOutput.set(cmdOutput);
    });
  });
}
function setupModuleInteractions(element, moduleActions, actionListener, moduleScrollThreshold) {
  const scrollThreshold = moduleScrollThreshold >= 0 ? moduleScrollThreshold : 1;
  inputHandler16.attachHandlers(
    element,
    {
      onPrimaryClick: {
        cmd: Variable(moduleActions?.onLeftClick ?? "")
      },
      onSecondaryClick: {
        cmd: Variable(moduleActions?.onRightClick ?? "")
      },
      onMiddleClick: {
        cmd: Variable(moduleActions?.onMiddleClick ?? "")
      },
      onScrollUp: {
        cmd: Variable(moduleActions?.onScrollUp ?? "")
      },
      onScrollDown: {
        cmd: Variable(moduleActions?.onScrollDown ?? "")
      }
    },
    actionListener,
    scrollThreshold
  );
}

// src/components/bar/customModules/module_container/index.tsx
var ModuleContainer = (moduleName, moduleMetadata) => {
  const {
    icon: moduleIcon = "",
    label: moduleLabel = "",
    tooltip: moduleTooltip = "",
    truncationSize: moduleTruncation = -1,
    execute: moduleExecute = "",
    executeOnAction: moduleExecuteOnAction = "",
    interval: moduleInterval = -1,
    hideOnEmpty: moduleHideOnEmpty = false,
    scrollThreshold: moduleScrollThreshold = 4,
    actions: moduleActions = {}
  } = moduleMetadata;
  const pollingInterval11 = Variable(moduleInterval);
  const actionExecutionListener = Variable(true);
  const commandOutput = Variable("");
  const commandPoller = initCommandPoller(commandOutput, pollingInterval11, moduleExecute, moduleInterval);
  initActionListener(actionExecutionListener, moduleExecuteOnAction, commandOutput);
  const module = Module({
    textIcon: bind(commandOutput).as((cmdOutput) => getIcon2(moduleName, cmdOutput, moduleIcon)),
    tooltipText: bind(commandOutput).as((cmdOutput) => getLabel(moduleName, cmdOutput, moduleTooltip)),
    boxClass: `cmodule-${moduleName.replace(/custom\//, "")}`,
    label: bind(commandOutput).as((cmdOutput) => getLabel(moduleName, cmdOutput, moduleLabel)),
    truncationSize: bind(Variable(typeof moduleTruncation === "number" ? moduleTruncation : -1)),
    props: {
      setup: (self) => setupModuleInteractions(self, moduleActions, actionExecutionListener, moduleScrollThreshold),
      onDestroy: () => {
        commandPoller.stop();
      }
    },
    isVis: bind(commandOutput).as((cmdOutput) => moduleHideOnEmpty ? cmdOutput.length > 0 : true)
  });
  return module;
};

// src/components/bar/customModules/index.ts
var CustomModules = class {
  constructor() {
  }
  static async build() {
    const customModuleMap = await this._getCustomModules();
    const customModuleComponents = {};
    try {
      Object.entries(customModuleMap).map(([moduleName, moduleMetadata]) => {
        if (!moduleName.startsWith("custom/")) {
          return;
        }
        customModuleComponents[moduleName] = () => WidgetContainer(ModuleContainer(moduleName, moduleMetadata));
      });
      return customModuleComponents;
    } catch (error) {
      console.error(`Failed to build custom modules in ${CONFIG_DIR}: ${error}`);
      throw new Error(`Failed to build custom modules in ${CONFIG_DIR}: ${error}`);
    }
  }
  static async _getCustomModules() {
    try {
      const filesInConfigDir = await this._getFilesInConfigDir();
      const modulesFile = filesInConfigDir.find((file) => file.match(/^modules(\.json)?$/));
      const pathToModulesFile = `${CONFIG_DIR}/${modulesFile}`;
      const customModulesFileContent = await readFileAsync(pathToModulesFile);
      const modulesObject = JSON.parse(customModulesFileContent);
      return modulesObject;
    } catch (error) {
      throw new Error(`Failed to parse modules file in ${CONFIG_DIR}: ${error}`);
    }
  }
  static async _getFilesInConfigDir() {
    const file = Gio.File.new_for_path(CONFIG_DIR);
    const enumerator = file.enumerate_children("standard::*", Gio.FileQueryInfoFlags.NONE, null);
    const fileNames = [];
    for (const info of enumerator) {
      const fileType = info.get_file_type();
      const fileName = info.get_name();
      if (fileType === Gio.FileType.REGULAR) {
        fileNames.push(fileName);
      }
    }
    enumerator.close(null);
    return fileNames;
  }
};

// src/components/bar/layout/WidgetRegistry.tsx
var WidgetRegistry = class {
  _widgets = {};
  _initialized = false;
  constructor(coreWidgets) {
    this._widgets = { ...coreWidgets };
  }
  /**
   * Initialize the registry with core and custom widgets
   */
  async initialize() {
    if (this._initialized) return;
    try {
      const customWidgets = await CustomModules.build();
      this._widgets = {
        ...this._widgets,
        ...customWidgets
      };
      this._initialized = true;
    } catch (error) {
      console.error("Failed to initialize widget registry:", error);
      throw error;
    }
  }
  /**
   * Check if a widget is registered
   */
  hasWidget(name2) {
    return Object.keys(this._widgets).includes(name2);
  }
  /**
   * Create an instance of a widget
   */
  createWidget(name2, monitor3) {
    if (!this.hasWidget(name2)) {
      console.error(`Widget "${name2}" not found`);
      return /* @__PURE__ */ jsx2("box", {});
    }
    return this._widgets[name2](monitor3);
  }
};

// src/components/bar/index.tsx
var gdkMonitorService = new GdkMonitorService();
var widgetRegistry = new WidgetRegistry(getCoreWidgets());
var Bar = async (monitor3) => {
  await widgetRegistry.initialize();
  const hyprlandMonitor = gdkMonitorService.mapGdkToHyprland(monitor3);
  const barLayout = new BarLayout(monitor3, hyprlandMonitor, widgetRegistry);
  return barLayout.render();
};

// src/components/notifications/helpers.ts
import AstalNotifd3 from "gi://AstalNotifd?version=0.1";
import AstalHyprland13 from "gi://AstalHyprland?version=0.1";
var notifdService2 = AstalNotifd3.get_default();
var hyprlandService13 = AstalHyprland13.get_default();
var { ignore: ignore3, timeout: popupTimeout, autoDismiss } = configuration_default.notifications;
var notifHasImg = (notification) => {
  return notification.image && notification.image.length || notification.appIcon ? true : false;
};
var trackActiveMonitor = (curMonitor2) => {
  Variable.derive([bind(hyprlandService13, "focusedMonitor")], (monitor3) => {
    curMonitor2.set(monitor3.id);
  });
};
var trackPopupNotifications = (popupNotifications2) => {
  notifdService2.connect("notified", (_, id) => {
    const notification = notifdService2.get_notification(id);
    const doNotDisturb = notifdService2.dontDisturb;
    if (isNotificationIgnored(notification, ignore3.get())) {
      notification.dismiss();
      return;
    }
    if (doNotDisturb) {
      return;
    }
    popupNotifications2.set([...popupNotifications2.get(), notification]);
    timeout(popupTimeout.get(), () => {
      dropNotificationPopup(notification, popupNotifications2);
    });
  });
  notifdService2.connect("resolved", (_, id) => {
    const filteredPopups = popupNotifications2.get().filter((popupNotif) => popupNotif.id !== id);
    popupNotifications2.set(filteredPopups);
  });
};
var dropNotificationPopup = (notificationToDismiss, popupNotifications2) => {
  const currentPopups = popupNotifications2.get();
  const undismissedNotifications = currentPopups.filter(
    (popupNotif) => popupNotif.id !== notificationToDismiss.id
  );
  popupNotifications2.set(undismissedNotifications);
};
var trackAutoTimeout = () => {
  autoDismiss.subscribe((shouldAutoDismiss) => {
    notifdService2.set_ignore_timeout(!shouldAutoDismiss);
  });
};

// src/components/notifications/index.tsx
import AstalHyprland14 from "gi://AstalHyprland?version=0.1";

// src/lib/window/positioning.ts
function getPosition(pos) {
  const positionMap = {
    top: Astal7.WindowAnchor.TOP,
    "top right": Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.RIGHT,
    "top left": Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.LEFT,
    bottom: Astal7.WindowAnchor.BOTTOM,
    "bottom right": Astal7.WindowAnchor.BOTTOM | Astal7.WindowAnchor.RIGHT,
    "bottom left": Astal7.WindowAnchor.BOTTOM | Astal7.WindowAnchor.LEFT,
    right: Astal7.WindowAnchor.RIGHT,
    left: Astal7.WindowAnchor.LEFT
  };
  return positionMap[pos] ?? Astal7.WindowAnchor.TOP;
}

// src/components/notifications/Actions/index.tsx
var ActionButton = ({ notification, action }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "notification-action-buttons",
      hexpand: true,
      onClick: (_, event) => {
        if (!isPrimaryClick(event)) {
          return;
        }
        if (action.id.includes("scriptAction:-")) {
          execAsync(`${action.id.replace("scriptAction:-", "")}`).catch(
            (err) => console.error(err)
          );
          notification.dismiss();
        } else {
          notification.invoke(action.id);
          notification.dismiss();
        }
      },
      children: /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, hexpand: true, children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "notification-action-buttons-label",
          label: action.label,
          hexpand: true,
          max_width_chars: 15,
          truncate: true,
          wrap: true
        }
      ) })
    }
  );
};
var Actions = ({ notification, showActions }) => {
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
      revealChild: showActions ? false : true,
      children: /* @__PURE__ */ jsx2("eventbox", { children: /* @__PURE__ */ jsx2("box", { className: "notification-card-actions", hexpand: true, valign: Gtk4.Align.END, children: notification.get_actions().map((action) => {
        return /* @__PURE__ */ jsx2(ActionButton, { notification, action });
      }) }) })
    }
  );
};

// src/components/notifications/Body/index.tsx
var Body = ({ notification }) => {
  return /* @__PURE__ */ jsx2("box", { className: "notification-card-body", valign: Gtk4.Align.START, hexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "notification-card-body-label",
      halign: Gtk4.Align.START,
      label: notification.body,
      maxWidthChars: !notifHasImg(notification) ? 35 : 28,
      lines: 2,
      truncate: true,
      wrap: true,
      justify: Gtk4.Justification.LEFT,
      hexpand: true,
      useMarkup: true,
      onRealize: (self) => self.set_markup(notification.body)
    }
  ) });
};

// src/components/notifications/CloseButton/index.tsx
var CloseButton = ({ notification }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "close-notification-button",
      onClick: () => {
        notification.dismiss();
      },
      children: /* @__PURE__ */ jsx2("label", { className: "txt-icon notification-close", label: "\u{F015C}", halign: Gtk4.Align.CENTER })
    }
  );
};

// src/components/notifications/Header/index.tsx
var { military } = configuration_default.menus.clock.time;
var Header = ({ notification }) => {
  return /* @__PURE__ */ jsxs("box", { vertical: false, hexpand: true, children: [
    /* @__PURE__ */ jsx2(NotificationIcon, { notification }),
    /* @__PURE__ */ jsx2(SummaryLabel, { notification }),
    /* @__PURE__ */ jsx2(TimeLabel, { notification })
  ] });
};
var NotificationIcon = ({ notification }) => {
  const { appName, appIcon, desktopEntry } = notification;
  return /* @__PURE__ */ jsx2("box", { className: "notification-card-header", halign: Gtk4.Align.START, children: /* @__PURE__ */ jsx2("box", { css: "min-width: 2rem; min-height: 2rem; ", children: /* @__PURE__ */ jsx2(
    "icon",
    {
      className: "notification-icon",
      icon: getNotificationIcon(appName, appIcon, desktopEntry)
    }
  ) }) });
};
var SummaryLabel = ({ notification }) => {
  return /* @__PURE__ */ jsx2("box", { className: "notification-card-header", halign: Gtk4.Align.START, valign: Gtk4.Align.START, hexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "notification-card-header-label",
      halign: Gtk4.Align.START,
      onRealize: (self) => self.set_markup(notification.summary),
      label: notification.summary,
      maxWidthChars: !notifHasImg(notification) ? 30 : 19,
      hexpand: true,
      vexpand: true,
      truncate: true,
      wrap: true
    }
  ) });
};
var TimeLabel = ({ notification }) => {
  const time2 = (time3, format4 = "%I:%M %p") => {
    return default2.DateTime.new_from_unix_local(time3).format(military.get() ? "%H:%M" : format4) ?? "--";
  };
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification-card-header menu",
      halign: Gtk4.Align.END,
      valign: Gtk4.Align.START,
      hexpand: true,
      children: /* @__PURE__ */ jsx2("label", { className: "notification-time", label: time2(notification.time), vexpand: true })
    }
  );
};

// src/components/notifications/Image/index.tsx
var ImageItem = ({ notification }) => {
  if (notification.appIcon && !isAnImage(notification.appIcon)) {
    return /* @__PURE__ */ jsx2(
      "icon",
      {
        className: "notification-card-image icon",
        halign: Gtk4.Align.CENTER,
        vexpand: false,
        icon: notification.appIcon
      }
    );
  }
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification-card-image",
      halign: Gtk4.Align.CENTER,
      vexpand: false,
      css: `
                background-image: url('${notification.image || notification.appIcon}');
            `
    }
  );
};
var Image = ({ notification }) => {
  if (!notifHasImg(notification)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification-card-image-container",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      vexpand: false,
      children: /* @__PURE__ */ jsx2(ImageItem, { notification })
    }
  );
};

// src/components/notifications/Notification/index.tsx
var NotificationContent = ({ actionBox, notification }) => {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: `notification-card-content ${!notifHasImg(notification) ? "noimg" : ""}`,
      hexpand: true,
      vertical: true,
      children: [
        /* @__PURE__ */ jsx2(Header, { notification }),
        /* @__PURE__ */ jsx2(Body, { notification }),
        actionBox
      ]
    }
  );
};
var NotificationCard = ({
  notification,
  showActions,
  ...props
}) => {
  const actionBox = notification.get_actions().length ? /* @__PURE__ */ jsx2(Actions, { notification, showActions }) : null;
  return /* @__PURE__ */ jsx2(
    "eventbox",
    {
      onClick: (_, event) => {
        if (isSecondaryClick(event)) {
          notification.dismiss();
        }
      },
      onHover: () => {
        if (actionBox !== null && showActions === true) {
          actionBox.revealChild = true;
        }
      },
      onHoverLost: () => {
        if (actionBox !== null && showActions === true) {
          actionBox.revealChild = false;
        }
      },
      children: /* @__PURE__ */ jsxs("box", { className: "notification-card", ...props, hexpand: true, valign: Gtk4.Align.START, children: [
        /* @__PURE__ */ jsx2(Image, { notification }),
        /* @__PURE__ */ jsx2(NotificationContent, { notification, actionBox }),
        /* @__PURE__ */ jsx2(CloseButton, { notification })
      ] })
    }
  );
};

// src/components/notifications/index.tsx
var hyprlandService14 = AstalHyprland14.get_default();
var { position, monitor, active_monitor, showActionsOnHover, displayedTotal } = configuration_default.notifications;
var { tear } = configuration_default;
var curMonitor = Variable(monitor.get());
var popupNotifications = Variable([]);
trackActiveMonitor(curMonitor);
trackPopupNotifications(popupNotifications);
trackAutoTimeout();
var notifications_default5 = () => {
  const gdkMonitorMapper = new GdkMonitorService();
  const windowLayer = bind(tear).as((tear2) => tear2 ? Astal7.Layer.TOP : Astal7.Layer.OVERLAY);
  const windowAnchor = bind(position).as(getPosition);
  const windowMonitor = Variable.derive(
    [bind(hyprlandService14, "focusedMonitor"), bind(monitor), bind(active_monitor)],
    (focusedMonitor, monitor3, activeMonitor) => {
      gdkMonitorMapper.reset();
      if (activeMonitor === true) {
        const gdkMonitor2 = gdkMonitorMapper.mapHyprlandToGdk(focusedMonitor.id);
        return gdkMonitor2;
      }
      const gdkMonitor = gdkMonitorMapper.mapHyprlandToGdk(monitor3);
      return gdkMonitor;
    }
  );
  const notificationsBinding = Variable.derive(
    [bind(popupNotifications), bind(showActionsOnHover)],
    (notifications, showActions) => {
      const maxDisplayed = notifications.slice(0, displayedTotal.get());
      return maxDisplayed.map((notification) => {
        return /* @__PURE__ */ jsx2(NotificationCard, { notification, showActions });
      });
    }
  );
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: "notifications-window",
      namespace: "notifications-window",
      className: "notifications-window",
      layer: windowLayer,
      anchor: windowAnchor,
      exclusivity: Astal7.Exclusivity.NORMAL,
      monitor: windowMonitor(),
      onDestroy: () => {
        windowMonitor.drop();
        notificationsBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("box", { vertical: true, hexpand: true, className: "notification-card-container", children: notificationsBinding() })
    }
  );
};

// src/components/shared/RegularWindow.tsx
var RegularWindow = class extends astalify(Gtk4.Window) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Window.
   * @param props - The properties for the Window component.
   * @memberof Window
   */
  constructor(props) {
    super(props);
  }
};
var RegularWindow_default = RegularWindow;

// src/components/settings/side_effects/index.ts
var { show_numbered: show_numbered2, show_icons: show_icons2, showWsIcons: showWsIcons3, showApplicationIcons: showApplicationIcons2 } = configuration_default.bar.workspaces;
var { monochrome: monoBar } = configuration_default.theme.bar.buttons;
var { monochrome: monoMenu } = configuration_default.theme.bar.menus;
var { matugen: matugen3 } = configuration_default.theme;
var turnOffOptionVars = (sourceValue, optionsToDisable, ignoreVars) => {
  const toggleOffVars = (varsToToggle) => {
    const varsToNotToggle = ignoreVars?.map((curVar) => curVar.id) || [];
    varsToToggle.forEach((curVar) => {
      if (sourceValue.id !== curVar.id && !varsToNotToggle.includes(curVar.id)) {
        curVar.set(false);
      }
    });
  };
  if (sourceValue.get()) {
    const varsToToggleOff = optionsToDisable;
    toggleOffVars(varsToToggleOff);
  }
};
var workspaceOptsToDisable = [show_numbered2, show_icons2, showWsIcons3, showApplicationIcons2];
show_numbered2.subscribe(() => {
  turnOffOptionVars(show_numbered2, workspaceOptsToDisable);
});
show_icons2.subscribe(() => {
  turnOffOptionVars(show_icons2, workspaceOptsToDisable);
});
showWsIcons3.subscribe(() => {
  turnOffOptionVars(showWsIcons3, workspaceOptsToDisable, [showApplicationIcons2]);
});
showApplicationIcons2.subscribe(() => {
  turnOffOptionVars(showApplicationIcons2, workspaceOptsToDisable, [showWsIcons3]);
  if (showApplicationIcons2.get()) {
    showWsIcons3.set(true);
  }
});
matugen3.subscribe(() => {
  if (matugen3.get() === true) {
    monoBar.set(false);
    monoMenu.set(false);
  }
});

// src/components/settings/Header.tsx
var Header2 = () => {
  return /* @__PURE__ */ jsxs("centerbox", { className: "header", children: [
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "reset",
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            configuration_default.reset();
          }
        },
        tooltipText: "Reset All Settings",
        halign: Gtk4.Align.START,
        valign: Gtk4.Align.START,
        children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.refresh })
      }
    ),
    /* @__PURE__ */ jsx2("box", {}),
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "close",
        halign: Gtk4.Align.END,
        valign: Gtk4.Align.START,
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            app_default.get_window("settings-dialog")?.set_visible(false);
          }
        },
        children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.close })
      }
    )
  ] });
};

// src/components/settings/constants.ts
var StackTransitionMap = {
  none: Gtk4.StackTransitionType.NONE,
  crossfade: Gtk4.StackTransitionType.CROSSFADE,
  slide_right: Gtk4.StackTransitionType.SLIDE_RIGHT,
  slide_left: Gtk4.StackTransitionType.SLIDE_LEFT,
  slide_up: Gtk4.StackTransitionType.SLIDE_UP,
  slide_down: Gtk4.StackTransitionType.SLIDE_DOWN
};
var RevealerTransitionMap = {
  none: Gtk4.RevealerTransitionType.NONE,
  crossfade: Gtk4.RevealerTransitionType.CROSSFADE,
  slide_right: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
  slide_left: Gtk4.RevealerTransitionType.SLIDE_LEFT,
  slide_up: Gtk4.RevealerTransitionType.SLIDE_UP,
  slide_down: Gtk4.RevealerTransitionType.SLIDE_DOWN
};
var dropdownMenuList = [
  "dashboardmenu",
  "audiomenu",
  "mediamenu",
  "networkmenu",
  "bluetoothmenu",
  "notificationsmenu",
  "calendarmenu",
  "energymenu",
  "powerdropdownmenu",
  "settings-dialog"
];
var isDropdownMenu = (name2) => {
  return dropdownMenuList.includes(name2);
};

// src/components/settings/shared/Label.tsx
var Label2 = ({
  title: name2,
  subtitle: sub = "",
  subtitleLink = ""
}) => {
  const Subtitle = () => {
    if (subtitleLink.length) {
      return /* @__PURE__ */ jsx2(
        "button",
        {
          className: "options-sublabel-link",
          onClick: () => execAsync(`bash -c 'xdg-open ${subtitleLink}'`),
          halign: Gtk4.Align.START,
          valign: Gtk4.Align.CENTER,
          children: /* @__PURE__ */ jsx2("label", { label: sub })
        }
      );
    }
    return /* @__PURE__ */ jsx2(
      "label",
      {
        className: "options-sublabel",
        label: sub,
        halign: Gtk4.Align.START,
        valign: Gtk4.Align.CENTER
      }
    );
  };
  return /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.START, vertical: true, children: [
    /* @__PURE__ */ jsx2(
      "label",
      {
        className: "options-label",
        label: name2,
        halign: Gtk4.Align.START,
        valign: Gtk4.Align.CENTER
      }
    ),
    /* @__PURE__ */ jsx2(Subtitle, {})
  ] });
};

// src/components/settings/shared/Option/PropertyLabel.tsx
var PropertyLabel = ({ title, subtitle, subtitleLink }) => {
  return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, valign: Gtk4.Align.START, hexpand: true, children: /* @__PURE__ */ jsx2(Label2, { title, subtitle, subtitleLink }) });
};

// src/components/settings/shared/Option/ResetButton.tsx
var ResetButton = ({
  ...props
}) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "reset-options",
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          props.opt.reset();
        }
      },
      sensitive: bind(props.opt).as((v) => v !== props.opt.initial),
      valign: Gtk4.Align.START,
      children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.refresh })
    }
  );
};

// src/components/shared/SpinButton.tsx
var SpinButton = class extends astalify(Gtk4.SpinButton) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of SpinButton.
   * @param props - The properties for the SpinButton component.
   * @memberof SpinButton
   */
  constructor(props) {
    super(props);
  }
};
var SpinButton_default = SpinButton;

// src/components/settings/shared/inputs/number.tsx
var NumberInputter = ({
  opt: opt2,
  min,
  max,
  increment = 1,
  isUnsaved
}) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2("box", { className: "unsaved-icon-container", halign: Gtk4.Align.START, children: bind(isUnsaved).as((unsaved) => {
      if (unsaved) {
        return /* @__PURE__ */ jsx2(
          "icon",
          {
            className: "unsaved-icon",
            icon: icons_default.ui.warning,
            tooltipText: "Press 'Enter' to apply your changes."
          }
        );
      }
      return /* @__PURE__ */ jsx2("box", {});
    }) }),
    /* @__PURE__ */ jsx2(
      SpinButton_default,
      {
        onChanged: (self) => {
          const currentText = self.value;
          const optValue = opt2.get();
          isUnsaved.set(currentText !== optValue);
        },
        onActivate: (self) => {
          opt2.set(self.value);
        },
        setup: (self) => {
          self.set_range(min, max);
          self.set_increments(1 * increment, 5 * increment);
          useHook(self, opt2, () => {
            self.set_value(opt2.get());
            isUnsaved.set(Number(self.get_text()) !== opt2.get());
          });
          self.connect("key-release-event", () => {
            isUnsaved.set(Number(self.get_text()) !== opt2.get());
          });
        }
      }
    )
  ] });
};

// src/components/settings/shared/inputs/float.tsx
var FloatInputter = ({
  opt: opt2,
  isUnsaved,
  className
}) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2("box", { className: "unsaved-icon-container", children: bind(isUnsaved).as((unsaved) => {
      if (unsaved) {
        return /* @__PURE__ */ jsx2(
          "icon",
          {
            className: "unsaved-icon",
            icon: icons_default.ui.warning,
            tooltipText: "Press 'Enter' to apply your changes."
          }
        );
      }
      return /* @__PURE__ */ jsx2("box", {});
    }) }),
    /* @__PURE__ */ jsx2(
      "entry",
      {
        className,
        onChanged: (self) => {
          const currentText = parseFloat(self.text);
          const serializedOpt = parseFloat(opt2.get().toString());
          isUnsaved.set(currentText !== serializedOpt);
        },
        onActivate: (self) => {
          try {
            const parsedValue = parseFloat(self.text);
            opt2.set(parsedValue);
            isUnsaved.set(false);
          } catch (error) {
            console.error("Invalid JSON input:", error);
          }
        },
        setup: (self) => {
          self.text = opt2.get().toString();
          isUnsaved.set(self.text !== opt2.get().toString());
          self.hook(opt2, () => {
            self.text = opt2.get().toString();
            isUnsaved.set(self.text !== opt2.get().toString());
          });
        }
      }
    )
  ] });
};

// src/components/settings/shared/inputs/string.tsx
var StringInputter = ({
  opt: opt2,
  isUnsaved
}) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2("box", { className: "unsaved-icon-container", children: bind(isUnsaved).as((unsaved) => {
      if (unsaved) {
        return /* @__PURE__ */ jsx2(
          "icon",
          {
            className: "unsaved-icon",
            icon: icons_default.ui.warning,
            tooltipText: "Press 'Enter' to apply your changes."
          }
        );
      }
      return /* @__PURE__ */ jsx2("box", {});
    }) }),
    /* @__PURE__ */ jsx2(
      "entry",
      {
        className: bind(isUnsaved).as((unsaved) => unsaved ? "unsaved" : ""),
        onChanged: (self) => {
          const currentText = self.text;
          const optValue = opt2.get();
          isUnsaved.set(currentText !== optValue);
        },
        onActivate: (self) => {
          opt2.set(self.text);
        },
        setup: (self) => {
          self.text = opt2.get();
          isUnsaved.set(self.text !== opt2.get());
          self.hook(opt2, () => {
            isUnsaved.set(self.text !== opt2.get());
            self.text = opt2.get();
          });
        }
      }
    )
  ] });
};

// src/components/settings/shared/inputs/boolean.tsx
var BooleanInputter = ({
  opt: opt2,
  disabledBinding,
  dependencies
}) => /* @__PURE__ */ jsx2(
  "switch",
  {
    sensitive: disabledBinding !== void 0 ? bind(disabledBinding).as((disabled) => !disabled) : true,
    active: bind(opt2),
    setup: (self) => {
      self.connect("notify::active", () => {
        if (disabledBinding !== void 0 && disabledBinding.get()) {
          return;
        }
        if (self.active && dependencies !== void 0 && !dependencies.every((dep) => SystemUtilities.checkDependencies(dep))) {
          self.active = false;
          return;
        }
        opt2.set(self.active);
      });
    }
  }
);

// src/components/shared/FileChooserButton.tsx
var FileChooserButton = class extends astalify(Gtk4.FileChooserButton) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of FileChooserButton.
   * @param props - The properties for the FileChooserButton component.
   * @memberof FileChooserButton
   */
  constructor(props) {
    super(props);
  }
};
var FileChooserButton_default = FileChooserButton;

// src/components/settings/shared/inputs/image.tsx
var handleFileSet = (opt2) => (self) => {
  const uri = self.get_uri();
  if (uri === null) {
    return;
  }
  try {
    const decodedPath = decodeURIComponent(uri.replace("file://", ""));
    opt2.set(decodedPath);
  } catch (error) {
    console.error("Failed to decode URI:", error);
  }
};
var ImageInputter = ({
  opt: opt2
}) => {
  return /* @__PURE__ */ jsx2(
    FileChooserButton_default,
    {
      on_file_set: (self) => {
        return handleFileSet(opt2)(self);
      }
    }
  );
};

// src/components/settings/shared/FileChooser.ts
import Gtk5 from "gi://Gtk?version=3.0";
import Gio5 from "gi://Gio";

// src/lib/theme/useTheme.ts
import Gio4 from "gi://Gio";
var { restartCommand } = configuration_default.hyprpanel;
var hexColorPattern = /^#([0-9A-Fa-f]{6}|[0-9A-Fa-f]{8})$/;
function useTheme(filePath) {
  try {
    const importedConfig = loadJsonFile(filePath);
    if (!importedConfig) {
      return;
    }
    const optionsConfigFile = Gio4.File.new_for_path(CONFIG_FILE);
    const [optionsSuccess, optionsContent] = optionsConfigFile.load_contents(null);
    if (!optionsSuccess) {
      throw new Error("Failed to load theme file.");
    }
    let optionsConfig = JSON.parse(new TextDecoder("utf-8").decode(optionsContent));
    const filteredConfig = filterConfigForThemeOnly(importedConfig);
    optionsConfig = { ...optionsConfig, ...filteredConfig };
    saveConfigToFile(optionsConfig, CONFIG_FILE);
    SystemUtilities.bash(restartCommand.get());
  } catch (error) {
    errorHandler(error);
  }
}

// src/components/settings/shared/FileChooser.ts
var { restartCommand: restartCommand2 } = configuration_default.hyprpanel;
var whiteListedThemeProp = ["theme.bar.buttons.style"];
var loadJsonFile = (filePath) => {
  const file = Gio5.File.new_for_path(filePath);
  const [success, content] = file.load_contents(null);
  if (!success) {
    console.error(`Failed to import: ${filePath}`);
    return null;
  }
  const jsonString = new TextDecoder("utf-8").decode(content);
  return JSON.parse(jsonString);
};
var saveConfigToFile = (config, filePath) => {
  const file = Gio5.File.new_for_path(filePath);
  const outputStream = file.replace(null, false, Gio5.FileCreateFlags.NONE, null);
  const dataOutputStream = new Gio5.DataOutputStream({ base_stream: outputStream });
  const jsonString = JSON.stringify(config, null, 2);
  dataOutputStream.put_string(jsonString, null);
  dataOutputStream.close(null);
};
var filterConfigForThemeOnly = (config) => {
  const filteredConfig = {};
  for (const key in config) {
    const value = config[key];
    if (typeof value === "string" && hexColorPattern.test(value)) {
      filteredConfig[key] = config[key];
    } else if (whiteListedThemeProp.includes(key)) {
      filteredConfig[key] = config[key];
    }
  }
  return filteredConfig;
};
var saveFileDialog = (filePath, themeOnly) => {
  const filterHexColorPairs = (jsonObject) => {
    const filteredObject = {};
    for (const key in jsonObject) {
      const value = jsonObject[key];
      if (typeof value === "string" && isHexColor(value)) {
        filteredObject[key] = jsonObject[key];
      } else if (whiteListedThemeProp.includes(key)) {
        filteredObject[key] = jsonObject[key];
      }
    }
    return filteredObject;
  };
  const filterOutHexColorPairs = (jsonObject) => {
    const filteredObject = {};
    for (const key in jsonObject) {
      if (whiteListedThemeProp.includes(key)) {
        continue;
      }
      const value = jsonObject[key];
      if (!(typeof value === "string" && isHexColor(value))) {
        filteredObject[key] = jsonObject[key];
      }
    }
    return filteredObject;
  };
  const dialog = new Gtk5.FileChooserDialog({
    title: `Save Hyprpanel ${themeOnly ? "Theme" : "Config"}`,
    action: Gtk5.FileChooserAction.SAVE
  });
  dialog.add_button(Gtk5.STOCK_CANCEL, Gtk5.ResponseType.CANCEL);
  dialog.add_button(Gtk5.STOCK_SAVE, Gtk5.ResponseType.ACCEPT);
  dialog.set_current_name(themeOnly ? "hyprpanel_theme.json" : "hyprpanel_config.json");
  dialog.get_style_context().add_class("hyprpanel-file-chooser");
  const response = dialog.run();
  try {
    const original_file_path = filePath;
    const file = Gio5.File.new_for_path(original_file_path);
    const [success, content] = file.load_contents(null);
    if (!success) {
      console.error(`Could not find 'config.json' at ${TMP}`);
      return;
    }
    const jsonString = new TextDecoder("utf-8").decode(content);
    const jsonObject = JSON.parse(jsonString);
    const filteredJsonObject = themeOnly ? filterHexColorPairs(jsonObject) : filterOutHexColorPairs(jsonObject);
    const filteredContent = JSON.stringify(filteredJsonObject, null, 2);
    if (response === Gtk5.ResponseType.ACCEPT) {
      const file_path = dialog.get_filename();
      console.info(`Original file path: ${file_path}`);
      const getIncrementedFilePath = (filePath2) => {
        let increment = 1;
        const baseName = filePath2.replace(/(\.\w+)$/, "");
        const match = filePath2.match(/(\.\w+)$/);
        const extension = match ? match[0] : "";
        let newFilePath = filePath2;
        let file2 = Gio5.File.new_for_path(newFilePath);
        while (file2.query_exists(null)) {
          newFilePath = `${baseName}_${increment}${extension}`;
          file2 = Gio5.File.new_for_path(newFilePath);
          increment++;
        }
        return newFilePath;
      };
      const finalFilePath = getIncrementedFilePath(file_path);
      console.info(`File will be saved at: ${finalFilePath}`);
      try {
        const save_file = Gio5.File.new_for_path(finalFilePath);
        const outputStream = save_file.replace(null, false, Gio5.FileCreateFlags.NONE, null);
        const dataOutputStream = new Gio5.DataOutputStream({
          base_stream: outputStream
        });
        dataOutputStream.put_string(filteredContent, null);
        dataOutputStream.close(null);
        SystemUtilities.notify({
          summary: "File Saved Successfully",
          body: `At ${finalFilePath}.`,
          iconName: icons_default.ui.info
        });
      } catch (e) {
        if (e instanceof Error) {
          console.error("Failed to write to file:", e.message);
        }
      }
    }
    dialog.destroy();
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    dialog.destroy();
    SystemUtilities.notify({
      summary: `${themeOnly ? "Theme" : "Config"} Export Failed`,
      body: errorMessage ?? "An unknown error occurred.",
      iconName: icons_default.ui.warning
    });
  }
};
var importFiles = (themeOnly = false) => {
  const dialog = new Gtk5.FileChooserDialog({
    title: `Import Hyprpanel ${themeOnly ? "Theme" : "Config"}`,
    action: Gtk5.FileChooserAction.OPEN
  });
  dialog.set_current_folder(`${SRC_DIR}/themes`);
  dialog.add_button(Gtk5.STOCK_CANCEL, Gtk5.ResponseType.CANCEL);
  dialog.add_button(Gtk5.STOCK_OPEN, Gtk5.ResponseType.ACCEPT);
  dialog.get_style_context().add_class("hyprpanel-file-chooser");
  const response = dialog.run();
  try {
    if (response === Gtk5.ResponseType.CANCEL) {
      dialog.destroy();
      return;
    }
    if (response === Gtk5.ResponseType.ACCEPT) {
      const filePath = dialog.get_filename();
      if (filePath === null) {
        SystemUtilities.notify({
          summary: "Failed to import",
          body: "No file selected.",
          iconName: icons_default.ui.warning
        });
        return;
      }
      const importedConfig = loadJsonFile(filePath);
      if (!importedConfig) {
        dialog.destroy();
        return;
      }
      SystemUtilities.notify({
        summary: `Importing ${themeOnly ? "Theme" : "Config"}`,
        body: `Importing: ${filePath}`,
        iconName: icons_default.ui.info
      });
      const optionsConfigFile = Gio5.File.new_for_path(CONFIG_FILE);
      const [optionsSuccess, optionsContent] = optionsConfigFile.load_contents(null);
      if (!optionsSuccess) {
        console.error("Failed to read existing configuration file.");
        dialog.destroy();
        return;
      }
      let optionsConfig = JSON.parse(new TextDecoder("utf-8").decode(optionsContent));
      const filteredConfig = themeOnly ? filterConfigForThemeOnly(importedConfig) : filterConfigForNonTheme(importedConfig);
      optionsConfig = { ...optionsConfig, ...filteredConfig };
      saveConfigToFile(optionsConfig, CONFIG_FILE);
    }
    dialog.destroy();
    SystemUtilities.bash(restartCommand2.get());
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    dialog.destroy();
    SystemUtilities.notify({
      summary: `${themeOnly ? "Theme" : "Config"} Import Failed`,
      body: errorMessage ?? "An unknown error occurred.",
      iconName: icons_default.ui.warning
    });
  }
};
function filterConfigForNonTheme(config) {
  const filteredConfig = {};
  for (const key in config) {
    if (whiteListedThemeProp.includes(key)) {
      continue;
    }
    const value = config[key];
    if (!(typeof value === "string" && hexColorPattern.test(value))) {
      filteredConfig[key] = config[key];
    }
  }
  return filteredConfig;
}

// src/components/settings/shared/inputs/import.tsx
var ImportInputter = ({ exportData }) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "options-import",
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            importFiles(exportData?.themeOnly);
          }
        },
        children: /* @__PURE__ */ jsx2("label", { label: "import" })
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "options-export",
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            saveFileDialog(exportData?.filePath, exportData?.themeOnly);
          }
        },
        children: /* @__PURE__ */ jsx2("label", { label: "export" })
      }
    )
  ] });
};

// src/components/settings/shared/inputs/wallpaper.tsx
var wallpaperService2 = WallpaperService.getInstance();
var WallpaperInputter = ({
  opt: opt2
}) => {
  if (typeof opt2.get() === "string") {
    return /* @__PURE__ */ jsx2(
      FileChooserButton_default,
      {
        onFileSet: (self) => {
          const fileUri = self.get_uri();
          if (fileUri === null) {
            console.warn("Failed to set wallpaper: File URI is null.");
            return;
          }
          const filePath = decodeURIComponent(fileUri.replace("file://", ""));
          opt2.set(filePath);
          if (configuration_default.wallpaper.enable.get()) {
            wallpaperService2.setWallpaper(filePath);
          }
        }
      }
    );
  }
  return /* @__PURE__ */ jsx2("box", {});
};

// src/components/shared/ColorButton.tsx
var ColorButton = class extends astalify(Gtk4.ColorButton) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of ColorButton.
   * @param props - The properties for the ColorButton component.
   * @memberof ColorButton
   */
  constructor(props) {
    super(props);
  }
};
var ColorButton_default = ColorButton;

// src/components/settings/shared/inputs/color.tsx
var ColorInputter = ({
  opt: opt2
}) => {
  return /* @__PURE__ */ jsx2(
    ColorButton_default,
    {
      useAlpha: false,
      setup: (self) => {
        useHook(self, opt2, () => {
          const rgba = new Gdk.RGBA();
          rgba.parse(opt2.get());
          self.set_rgba(rgba);
        });
        self.connect("color-set", () => {
          const rgba = self.get_rgba();
          const hex = (n) => {
            const c = Math.floor(255 * n).toString(16);
            return c.length === 1 ? `0${c}` : c;
          };
          opt2.set(`#${hex(rgba.red)}${hex(rgba.green)}${hex(rgba.blue)}`);
        });
      }
    }
  );
};

// src/components/settings/shared/inputs/enum.tsx
var EnumInputter = ({
  opt: opt2,
  values
}) => {
  const step = (dir) => {
    const indexOfCurrentValue = values.findIndex((index) => index === opt2.get());
    opt2.set(
      dir > 0 ? indexOfCurrentValue + dir > values.length - 1 ? values[0] : values[indexOfCurrentValue + dir] : indexOfCurrentValue + dir < 0 ? values[values.length - 1] : values[indexOfCurrentValue + dir]
    );
  };
  return /* @__PURE__ */ jsxs("box", { className: "enum-setter", children: [
    /* @__PURE__ */ jsx2("label", { label: bind(opt2).as((option) => `${option}`) }),
    /* @__PURE__ */ jsx2(
      "button",
      {
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            step(-1);
          }
        },
        children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.arrow.left })
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            step(1);
          }
        },
        children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.ui.arrow.right })
      }
    )
  ] });
};

// src/components/shared/FontButton.tsx
var FontButton = class extends astalify(Gtk4.FontButton) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of FontButton.
   * @param props - The properties for the FontButton component.
   * @memberof FontButton
   */
  constructor(props) {
    super(props);
  }
};
var FontButton_default = FontButton;

// src/components/settings/shared/inputs/font/utils.ts
import Pango from "gi://Pango?version=1.0";
var DEFAULT_FONT_STYLE = "normal";
var styleMap = {
  [Pango.Style.NORMAL]: "normal",
  [Pango.Style.ITALIC]: "italic",
  [Pango.Style.OBLIQUE]: "oblique"
};
function styleToString(styleEnum) {
  return styleMap[styleEnum] ?? DEFAULT_FONT_STYLE;
}

// src/components/settings/shared/inputs/font/index.tsx
var FontInputter = ({
  fontFamily,
  fontStyle,
  fontLabel
}) => /* @__PURE__ */ jsx2(
  FontButton_default,
  {
    showSize: false,
    useSize: false,
    setup: (self) => {
      self.font = fontLabel?.get() ?? fontFamily.get();
      if (fontLabel) {
        self.hook(fontLabel, () => {
          self.font = fontLabel.get();
        });
      } else {
        self.hook(fontFamily, () => {
          self.font = fontFamily.get();
        });
      }
      self.connect("font-set", ({ fontDesc, font }) => {
        const selectedFontFamily = fontDesc.get_family();
        const selectedFontStyle = styleToString(fontDesc.get_style());
        fontFamily.set(selectedFontFamily);
        fontStyle?.set(selectedFontStyle);
        fontLabel?.set(font.split(" ").slice(0, -1).join(" "));
      });
    }
  }
);

// src/components/settings/shared/inputs/object/JsonPreview.tsx
var JsonPreview = ({ value, onClick, isExpanded }) => {
  return /* @__PURE__ */ jsx2("eventbox", { onClick, children: /* @__PURE__ */ jsxs(
    "box",
    {
      className: bind(isExpanded).as((expanded) => `json-preview ${expanded ? "expanded" : ""}`),
      hexpand: true,
      children: [
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "preview-text",
            label: value.as((val) => JSON.stringify(val)),
            halign: Gtk4.Align.START,
            truncate: true,
            hexpand: true,
            maxWidthChars: 55
          }
        ),
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "preview-icon txt-icon",
            label: bind(isExpanded).as((expanded) => expanded ? "\u{F0156}" : "\u{F03EB}")
          }
        )
      ]
    }
  ) });
};

// src/components/shared/SourceView.tsx
import GtkSource from "gi://GtkSource?version=3.0";
var SourceView = class extends astalify(GtkSource.View) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of SourceView.
   * @param props - The properties for the SourceView component
   */
  constructor(props) {
    super(props);
  }
  /**
   * Gets the GtkSource.Buffer associated with this view.
   * Overrides the base method to return the correct type.
   */
  get_buffer() {
    return super.get_buffer();
  }
};
var SourceView_default = SourceView;

// src/components/settings/shared/inputs/object/helpers/keyHandler.ts
function handleKeyPress(self, event, onSave) {
  const [, keyval] = event.get_keyval();
  const modifiers = event.get_state()[1];
  const ENTER_KEY = 65293;
  if (keyval === ENTER_KEY && modifiers & Gdk.ModifierType.CONTROL_MASK) {
    const buffer = self.get_buffer();
    const [start, end] = buffer.get_bounds();
    const text = buffer.get_text(start, end, true);
    onSave(text);
    return true;
  }
  return false;
}

// src/components/settings/shared/inputs/object/helpers/sourceViewSetup.ts
import GtkSource2 from "gi://GtkSource?version=3.0";
function setupSourceView(self, editorText, onTextChange) {
  const buffer = self.get_buffer();
  setupSyntaxHighlighting(buffer);
  setupTheme(buffer);
  setupTextHandling(self, buffer, editorText, onTextChange);
  setupEditorPreferences(self);
  setTimeout(() => self.grab_focus(), 100);
}
function setupSyntaxHighlighting(buffer) {
  const langManager = GtkSource2.LanguageManager.get_default();
  const jsonLang = langManager.get_language("json");
  if (jsonLang) {
    buffer.set_language(jsonLang);
  }
}
function setupTheme(buffer) {
  const styleManager = GtkSource2.StyleSchemeManager.get_default();
  const currentSearchPath = styleManager.get_search_path();
  const assetsPath = `${SRC_DIR}/assets`;
  styleManager.set_search_path([assetsPath, ...currentSearchPath]);
  const tokyoNight = styleManager.get_scheme("tokyo-night");
  if (tokyoNight) {
    buffer.set_style_scheme(tokyoNight);
  } else {
    const fallbackSchemes = ["solarized-dark", "cobalt", "oblivion"];
    for (const schemeName of fallbackSchemes) {
      const scheme = styleManager.get_scheme(schemeName);
      if (scheme) {
        buffer.set_style_scheme(scheme);
        console.debug(`Tokyo Night theme not found, using fallback: ${schemeName}`);
        break;
      }
    }
  }
}
function setupTextHandling(self, buffer, editorText, onTextChange) {
  buffer.set_text(editorText.get(), -1);
  buffer.connect("changed", () => {
    const [start, end] = buffer.get_bounds();
    const currentText = buffer.get_text(start, end, true);
    onTextChange(currentText);
  });
  self.hook(editorText, () => {
    const currentBuffer = self.get_buffer();
    const [start, end] = currentBuffer.get_bounds();
    const currentText = currentBuffer.get_text(start, end, true);
    if (currentText !== editorText.get()) {
      currentBuffer.set_text(editorText.get(), -1);
    }
  });
}
function setupEditorPreferences(self) {
  self.set_tab_width(2);
  self.set_insert_spaces_instead_of_tabs(true);
  self.set_auto_indent(true);
  self.set_smart_backspace(true);
  self.set_smart_home_end(GtkSource2.SmartHomeEndType.AFTER);
}

// src/components/settings/shared/inputs/object/helpers/useJsonEditor.ts
function useJsonEditor(opt2, isUnsaved) {
  const jsonError = Variable("");
  const showEditor = Variable(false);
  const editorText = Variable(JSON.stringify(opt2.get(), null, 2));
  const validateJson = (text) => {
    try {
      JSON.parse(text || "{}");
      jsonError.set("");
      return true;
    } catch (error) {
      if (error instanceof Error) {
        jsonError.set(`Invalid JSON: ${error.message}`);
      }
      return false;
    }
  };
  const handleOpen = () => {
    editorText.set(JSON.stringify(opt2.get(), null, 2));
    showEditor.set(!showEditor.get());
    jsonError.set("");
  };
  const handleSave = () => {
    const text = editorText.get();
    if (validateJson(text)) {
      try {
        const parsedValue = JSON.parse(text || "{}");
        opt2.set(parsedValue);
        isUnsaved.set(false);
        showEditor.set(false);
      } catch (error) {
        console.error("Unexpected error saving JSON:", error);
      }
    }
  };
  const handleTextChange = (text) => {
    editorText.set(text);
    validateJson(text);
    const serializedOpt = JSON.stringify(opt2.get(), null, 2);
    isUnsaved.set(text !== serializedOpt);
  };
  opt2.subscribe(() => {
    const newText = JSON.stringify(opt2.get(), null, 2);
    editorText.set(newText);
    isUnsaved.set(false);
    jsonError.set("");
  });
  return {
    jsonError,
    showEditor,
    editorText,
    handleOpen,
    handleSave,
    handleTextChange,
    validateJson
  };
}

// src/components/settings/shared/inputs/object/JsonEditor.tsx
var JsonEditor = ({ editorText, onSave, onTextChange }) => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      className: "json-editor-scrollable-container",
      children: /* @__PURE__ */ jsx2(
        SourceView_default,
        {
          className: "json-editor-sourceview",
          monospace: true,
          editable: true,
          canFocus: true,
          wrapMode: Gtk4.WrapMode.NONE,
          showLineNumbers: true,
          highlightCurrentLine: true,
          onKeyPressEvent: (self, event) => handleKeyPress(self, event, onSave),
          setup: (self) => setupSourceView(self, editorText, onTextChange)
        }
      )
    }
  );
};

// src/components/settings/shared/inputs/object/EditorControls.tsx
var EditorControls = ({ jsonError, onSave }) => {
  return /* @__PURE__ */ jsxs("box", { vertical: true, className: "editor-controls", children: [
    /* @__PURE__ */ jsx2(
      "revealer",
      {
        revealChild: bind(jsonError).as((err) => err.length > 0),
        transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
        children: /* @__PURE__ */ jsx2(
          "label",
          {
            className: "error-message",
            halign: Gtk4.Align.START,
            label: bind(jsonError),
            wrap: true,
            wrapMode: Gtk4.WrapMode.WORD,
            maxWidthChars: 50
          }
        )
      }
    ),
    /* @__PURE__ */ jsxs("box", { className: "controls-row", children: [
      /* @__PURE__ */ jsx2("label", { label: "Press Ctrl+Enter to save", className: "hint-text", halign: Gtk4.Align.START }),
      /* @__PURE__ */ jsx2("box", { hexpand: true }),
      /* @__PURE__ */ jsx2("button", { className: "save-button", onClick: onSave, children: /* @__PURE__ */ jsx2("box", { children: /* @__PURE__ */ jsx2("label", { label: "Save" }) }) })
    ] })
  ] });
};

// src/components/settings/shared/inputs/object/index.tsx
var ObjectInputter = ({
  opt: opt2,
  isUnsaved,
  className
}) => {
  const { jsonError, showEditor, editorText, handleOpen, handleSave, handleTextChange } = useJsonEditor(
    opt2,
    isUnsaved
  );
  return /* @__PURE__ */ jsxs("box", { className: "object-input-container", vertical: true, children: [
    /* @__PURE__ */ jsxs("box", { className: "unsaved-icon-container", children: [
      bind(isUnsaved).as(
        (unsaved) => unsaved ? /* @__PURE__ */ jsx2(
          "icon",
          {
            className: "unsaved-icon",
            icon: icons_default.ui.warning,
            tooltipText: "Unsaved changes"
          }
        ) : /* @__PURE__ */ jsx2("box", {})
      ),
      /* @__PURE__ */ jsx2(JsonPreview, { value: bind(opt2), onClick: handleOpen, isExpanded: bind(showEditor) })
    ] }),
    /* @__PURE__ */ jsx2(
      "revealer",
      {
        revealChild: bind(showEditor),
        transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
        transitionDuration: 200,
        children: /* @__PURE__ */ jsxs("box", { className: "json-editor-wrapper", vertical: true, children: [
          /* @__PURE__ */ jsx2(
            JsonEditor,
            {
              editorText,
              jsonError,
              onSave: handleSave,
              onTextChange: handleTextChange,
              className
            }
          ),
          /* @__PURE__ */ jsx2(EditorControls, { jsonError, onSave: handleSave })
        ] })
      }
    )
  ] });
};

// src/components/settings/shared/Inputter.tsx
var InputField = ({
  opt: opt2,
  fontStyle,
  fontLabel,
  type = typeof opt2.get(),
  enums = [],
  disabledBinding,
  dependencies,
  exportData,
  min = 0,
  max = 1e6,
  increment = 1,
  className = "",
  isUnsaved
}) => {
  switch (type) {
    case "number":
      return /* @__PURE__ */ jsx2(NumberInputter, { opt: opt2, min, max, increment, isUnsaved });
    case "float":
      return /* @__PURE__ */ jsx2(FloatInputter, { opt: opt2, isUnsaved, className });
    case "object":
      return /* @__PURE__ */ jsx2(ObjectInputter, { opt: opt2, isUnsaved, className });
    case "string":
      return /* @__PURE__ */ jsx2(StringInputter, { opt: opt2, isUnsaved });
    case "enum":
      return /* @__PURE__ */ jsx2(EnumInputter, { opt: opt2, values: enums });
    case "boolean":
      return /* @__PURE__ */ jsx2(BooleanInputter, { opt: opt2, disabledBinding, dependencies });
    case "img":
      return /* @__PURE__ */ jsx2(ImageInputter, { opt: opt2 });
    case "config_import":
      return /* @__PURE__ */ jsx2(ImportInputter, { exportData });
    case "wallpaper":
      return /* @__PURE__ */ jsx2(WallpaperInputter, { opt: opt2 });
    case "font":
      return /* @__PURE__ */ jsx2(FontInputter, { fontFamily: opt2, fontLabel, fontStyle });
    case "color":
      return /* @__PURE__ */ jsx2(ColorInputter, { opt: opt2 });
    default:
      return /* @__PURE__ */ jsx2("label", { label: `No setter with type ${type}` });
  }
};
var Inputter = ({
  opt: opt2,
  fontStyle,
  fontLabel,
  type = typeof opt2.get(),
  enums,
  disabledBinding,
  dependencies,
  exportData,
  min,
  max,
  increment,
  className,
  isUnsaved
}) => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: /export|import/.test(type || "") ? "" : "inputter-container",
      valign: Gtk4.Align.START,
      halign: Gtk4.Align.END,
      children: /* @__PURE__ */ jsx2(
        InputField,
        {
          type,
          opt: opt2,
          fontStyle,
          fontLabel,
          enums,
          disabledBinding,
          dependencies,
          exportData,
          min,
          max,
          increment,
          className,
          isUnsaved
        }
      )
    }
  );
};

// src/components/settings/shared/Option/SettingInput.tsx
var SettingInput = ({
  className,
  isUnsaved,
  ...props
}) => {
  return /* @__PURE__ */ jsx2(
    Inputter,
    {
      opt: props.opt,
      fontStyle: props.fontStyle,
      fontLabel: props.fontLabel,
      type: props.type,
      enums: props.enums,
      disabledBinding: props.disabledBinding,
      dependencies: props.dependencies,
      exportData: props.exportData,
      min: props.min,
      max: props.max,
      increment: props.increment,
      className,
      isUnsaved
    }
  );
};

// src/components/settings/shared/Option/index.tsx
var Option = ({
  className,
  ...props
}) => {
  const isUnsaved = Variable(false);
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "option-item",
      hexpand: true,
      onDestroy: () => {
        isUnsaved.drop();
      },
      children: [
        /* @__PURE__ */ jsx2(PropertyLabel, { title: props.title, subtitle: props.subtitle, subtitleLink: props.subtitleLink }),
        /* @__PURE__ */ jsx2(SettingInput, { isUnsaved, className, ...props }),
        /* @__PURE__ */ jsx2(ResetButton, { ...props })
      ]
    }
  );
};

// src/components/settings/shared/Header.tsx
var Header3 = ({ title }) => {
  return /* @__PURE__ */ jsxs("box", { className: "options-header", children: [
    /* @__PURE__ */ jsx2("label", { className: "label-name", label: title }),
    /* @__PURE__ */ jsx2(Separator_default, { className: "menu-separator", valign: Gtk4.Align.CENTER, hexpand: true })
  ] });
};

// src/components/settings/pages/theme/menus/index.tsx
var MenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "General Settings",
      className: "menu-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "General" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.dummy,
            title: "Theme",
            subtitle: "WARNING: Importing a theme will replace your current theme color settings.",
            type: "config_import",
            exportData: { filePath: CONFIG_FILE, themeOnly: true }
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.monochrome,
            title: "Use Global Colors",
            type: "boolean",
            disabledBinding: configuration_default.theme.matugen
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.wallpaper.pywal,
            title: "Generate Pywal Colors",
            subtitle: "Whether to also generate pywal colors with chosen wallpaper",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.wallpaper.enable,
            title: "Apply Wallpapers",
            subtitle: "Whether to apply the wallpaper or to only use it for Matugen color generation.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.wallpaper.image,
            title: "Wallpaper",
            subtitle: bind(configuration_default.wallpaper.image).as(
              (wallpaper) => wallpaper || "No Wallpaper Selected"
            ),
            type: "wallpaper"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.background, title: "Background Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.opacity,
            title: "Menu Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.cards, title: "Cards", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.card_radius, title: "Card Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.text, title: "Primary Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.dimtext, title: "Dim Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.feinttext, title: "Feint Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.label, title: "Label Color", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.border.size, title: "Border Width", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.border.radius, title: "Border Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.border.color, title: "Border Color", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Popover" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.popover.radius, title: "Popover Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.popover.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.popover.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "List Items" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.listitems.active,
            title: "Active",
            subtitle: "Items of a list (network name, bluetooth device name, playback device, etc.) when active or hovered.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.listitems.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Icons" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.icons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.icons.passive, title: "Passive", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Switch" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.switch.enabled, title: "Enabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.switch.disabled, title: "Disabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.switch.radius, title: "Switch Radius", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.switch.slider_radius,
            title: "Switch Puck Radius",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.switch.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Check/Radio Buttons" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.check_radio_button.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.check_radio_button.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Buttons" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.buttons.radius, title: "Button Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.buttons.default, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.buttons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.buttons.disabled, title: "Disabled", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.buttons.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Icon Buttons" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.iconbuttons.passive, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.iconbuttons.active,
            title: "Active/Hovered",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Progress Bar" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.progressbar.radius,
            title: "Progress Bar Radius",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.progressbar.foreground, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.progressbar.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Slider" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.slider.primary, title: "Primary", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.slider.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.slider.slider_radius,
            title: "Slider Puck Radius",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.slider.progress_radius,
            title: "Slider/Progress Bar Radius",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.slider.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Scroller" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.scroller.radius, title: "Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.scroller.width, title: "Width", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Dropdown Menu" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.dropdownmenu.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.dropdownmenu.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.dropdownmenu.divider, title: "Divider", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Tooltips" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.tooltip.radius, title: "Tooltip Radius", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.tooltip.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.tooltip.text, title: "Text", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/matugen.tsx
var Matugen = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Matugen Settings",
      className: "menu-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Matugen Settings" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.matugen,
            title: "Enable Matugen",
            type: "boolean",
            dependencies: ["matugen", "swww"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.matugen_settings.mode,
            title: "Matugen Theme",
            type: "enum",
            enums: ["light", "dark"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.matugen_settings.scheme_type,
            title: "Matugen Scheme",
            type: "enum",
            enums: [
              "content",
              "expressive",
              "fidelity",
              "fruit-salad",
              "monochrome",
              "neutral",
              "rainbow",
              "tonal-spot"
            ]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.matugen_settings.variation,
            title: "Matugen Variation",
            type: "enum",
            enums: [
              "standard_1",
              "standard_2",
              "standard_3",
              "monochrome_1",
              "monochrome_2",
              "monochrome_3",
              "vivid_1",
              "vivid_2",
              "vivid_3"
            ]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.matugen_settings.contrast,
            title: "Contrast",
            subtitle: "Range: -1 to 1 (Default: 0)",
            type: "float"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/bar/index.tsx
var BarTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Bar",
      className: "bar-theme-page paged-container",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: false,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "General" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.transparent, title: "Transparent", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.background, title: "Background Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.style,
            title: "Button Style",
            type: "enum",
            enums: ["default", "split", "wave", "wave2"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.opacity,
            title: "Background Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.border.color, title: "Bar Border Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.opacity,
            title: "Module Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.background_opacity,
            title: "Button Background Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.background_hover_opacity,
            title: "Button Background Hover Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.monochrome,
            title: "Use Global Colors",
            type: "boolean",
            disabledBinding: configuration_default.theme.matugen
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.background, title: "Button Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.borderColor, title: "Button Border", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.text, title: "Button Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.icon, title: "Button Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Separator" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.separator.color, title: "Color", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Dashboard Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.dashboard.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.dashboard.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.dashboard.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Workspaces" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.hover,
            title: "Workspace Hover Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.available,
            title: "Workspace Available Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.occupied,
            title: "Workspace Occupied Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.active,
            title: "Workspace Active Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.numbered_active_highlighted_text_color,
            title: "Highlighted Workspace Text Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.numbered_active_underline_color,
            title: "Workspace Underline Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.workspaces.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Window Title" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.windowtitle.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.windowtitle.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.windowtitle.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.windowtitle.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.windowtitle.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Media" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.media.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.media.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.media.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.media.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.media.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Volume" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.volume.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.volume.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.volume.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.volume.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.volume.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Network" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.network.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.network.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.network.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.network.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.network.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Bluetooth" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.bluetooth.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.bluetooth.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.bluetooth.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.bluetooth.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.bluetooth.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "System Tray" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.systray.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.systray.customIcon,
            title: "Custom Icons",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.systray.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Battery" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.battery.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.battery.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.battery.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.battery.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.battery.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Clock" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.clock.background, title: "Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.clock.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.clock.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.clock.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.clock.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Notifications" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.notifications.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.notifications.total,
            title: "Notification Count",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.notifications.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.notifications.icon_background,
            title: "Button Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.notifications.border, title: "Border", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/notifications/index.tsx
var NotificationsTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Notifications",
      className: "notifications-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Notifications Theme Settings" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.notification.background,
            title: "Notification Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.notification.opacity,
            title: "Notification Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.notification.actions.background,
            title: "Action Button Background",
            subtitle: "Buttons that perform actions within a notification",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.notification.actions.text,
            title: "Action Button Text Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.notification.label, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.notification.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.notification.time, title: "Time Stamp", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.notification.text, title: "Body Text", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.notification.labelicon,
            title: "Label Icon",
            subtitle: "Icon that accompanies the label. Doesn't apply if icon is an app icon.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.notification.close_button.background,
            title: "Dismiss Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.notification.close_button.label,
            title: "Dismiss Button Text",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/osd/index.tsx
var OsdTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "OSD",
      className: "osd-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "On Screen Display Settings" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.osd.opacity,
            title: "OSD Opacity",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.bar_color, title: "Bar", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.osd.bar_overflow_color,
            title: "Bar Overflow",
            subtitle: "Overflow color is for when the volume goes over a 100",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.bar_empty_color, title: "Bar Background", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.bar_container, title: "Bar Container", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.icon_container, title: "Icon Container", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.label, title: "Value Text", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/battery.tsx
var BatteryMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Battery Menu",
      className: "menu-theme-page battery paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Battery Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.battery.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.battery.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Background" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.battery.background.color,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.battery.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Label" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.battery.label.color, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "List Items" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.battery.listitems.active,
            title: "Active/Hover",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.battery.listitems.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Icons" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.battery.icons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.battery.icons.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Slider" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.battery.slider.primary,
            title: "Primary",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.battery.slider.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.battery.slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.battery.slider.puck, title: "Puck", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/bluetooth.tsx
var BluetoothMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Bluetooth Menu",
      className: "menu-theme-page bluetooth paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Bluetooth Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.bluetooth.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.bluetooth.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Background" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.background.color,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.border.color,
            title: "Border",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Label" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.bluetooth.label.color, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Status" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.status,
            title: "Connection Status",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "List Items" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.listitems.active,
            title: "Active/Hover",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.listitems.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Icons" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.icons.active,
            title: "Active",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.icons.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Icon Buttons" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.iconbutton.active,
            title: "Active",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.iconbutton.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Scroller" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.scroller.color,
            title: "Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Switch" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.switch.enabled,
            title: "Enabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.switch.disabled,
            title: "Disabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.bluetooth.switch.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Switch Divider" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.switch_divider,
            title: "Switch Divider",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/clock.tsx
var ClockMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Clock Menu",
      className: "menu-theme-page clock paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Clock Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.clock.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.clock.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Background" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.background.color,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.clock.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Time" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.clock.time.time, title: "Time", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.time.timeperiod,
            title: "Period",
            subtitle: "AM/PM",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Calendar" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.calendar.yearmonth,
            title: "Year/Month",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.calendar.weekdays,
            title: "Weekdays",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.calendar.paginator,
            title: "Navigation Arrows (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.calendar.currentday,
            title: "Current Day",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.clock.calendar.days, title: "Days", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.calendar.contextdays,
            title: "Trailing/Leading Days",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Weather" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.icon,
            title: "Current Weather Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.temperature,
            title: "Current Temperature",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.status,
            title: "Current Status",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.stats,
            title: "Current Stats",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.thermometer.extremelyhot,
            title: "Thermometer - Extremely Hot",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.thermometer.hot,
            title: "Thermometer - Hot",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.thermometer.moderate,
            title: "Thermometer - Moderate",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.thermometer.cold,
            title: "Thermometer - Cold",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.thermometer.extremelycold,
            title: "Thermometer - Extremely Cold",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.hourly.time,
            title: "Hourly Weather Time",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.hourly.icon,
            title: "Hourly Weather Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.weather.hourly.temperature,
            title: "Hourly Weather Temperature",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/dashboard.tsx
var DashboardMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Dashboard Menu",
      className: "menu-theme-page dashboard paged-container",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.dashboard.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Background" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.background.color,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.border.color,
            title: "Border",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Profile" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.profile.name,
            title: "Profile Name",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Power Menu" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.shutdown,
            title: "Shutdown",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.restart,
            title: "Restart",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.logout,
            title: "Log Out",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.sleep,
            title: "Sleep",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.card,
            title: "Confirmation Dialog Card",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.background,
            title: "Confirmation Dialog Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.border,
            title: "Confirmation Dialog Border",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.label,
            title: "Confirmation Dialog Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.body,
            title: "Confirmation Dialog Description",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.confirm,
            title: "Confirmation Dialog Confirm Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.deny,
            title: "Confirmation Dialog Cancel Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.powermenu.confirmation.button_text,
            title: "Confirmation Dialog Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Shortcuts" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.shortcuts.background,
            title: "Primary",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.shortcuts.text,
            title: "Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.shortcuts.recording,
            title: "Recording",
            subtitle: "Color of the Record button when recording is in progress",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Controls" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.disabled,
            title: "Module Off",
            subtitle: "Button color when element is disabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.wifi.background,
            title: "Wifi Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.wifi.text,
            title: "Wifi Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.bluetooth.background,
            title: "Bluetooth Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.bluetooth.text,
            title: "Bluetooth Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.notifications.background,
            title: "Notifications Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.notifications.text,
            title: "Notifications Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.volume.background,
            title: "Volume Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.volume.text,
            title: "Volume Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.input.background,
            title: "Input Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.controls.input.text,
            title: "Input Button Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Directories" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.directories.left.top.color,
            title: "Directory: Left - Top",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.directories.left.middle.color,
            title: "Directory: Left - Middle",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.directories.left.bottom.color,
            title: "Directory: Left - Bottom",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.directories.right.top.color,
            title: "Directory: Right - Top",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.directories.right.middle.color,
            title: "Directory: Right - Middle",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.directories.right.bottom.color,
            title: "Directory: Right - Bottom",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "System Stats" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.bar_background,
            title: "Bar Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.cpu.icon,
            title: "CPU Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.cpu.bar,
            title: "CPU Bar",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.cpu.label,
            title: "CPU Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.ram.icon,
            title: "RAM Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.ram.bar,
            title: "RAM Bar",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.ram.label,
            title: "RAM Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.gpu.icon,
            title: "GPU Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.gpu.bar,
            title: "GPU Bar",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.gpu.label,
            title: "GPU Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.disk.icon,
            title: "Disk Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.disk.bar,
            title: "Disk Bar",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.monitors.disk.label,
            title: "Disk Label",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/media.tsx
var MediaMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Media Menu",
      className: "menu-theme-page media paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Media Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.media.song, title: "Song", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.media.artist, title: "Artist", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.media.album, title: "Album", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.media.timestamp, title: "Time Stamp", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Background" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.background.color,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.media.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Card/Album Art" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.media.card.color, title: "Color", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.card.tint,
            title: "Tint",
            type: "number",
            increment: 5,
            min: 0,
            max: 100
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Buttons" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.buttons.inactive,
            title: "Unavailable",
            subtitle: "Disabled button when media control isn't available.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.buttons.enabled,
            title: "Enabled",
            subtitle: "Ex: Button color when shuffle/loop is enabled.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.buttons.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.media.buttons.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Slider" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.slider.primary,
            title: "Primary Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.slider.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.media.slider.puck, title: "Puck", type: "color" })
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/network.tsx
var NetworkMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Network Menu",
      className: "menu-theme-page network paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Network Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.network.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.network.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Background" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.background.color,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.network.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Label" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.network.label.color, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Status" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.status.color,
            title: "Connection Status",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Switch" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.switch.enabled,
            title: "Enabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.switch.disabled,
            title: "Disabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.network.switch.puck, title: "Puck", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "List Items" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.listitems.active,
            title: "Active/Hover",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.listitems.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Icons" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.network.icons.active, title: "Active", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.icons.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Scroller" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.scroller.color,
            title: "Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Icon Buttons" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.iconbuttons.active,
            title: "Active",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.iconbuttons.passive,
            title: "Passive",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/notifications.tsx
var NotificationsMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Notifications Menu",
      className: "menu-theme-page notifications paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Notifications Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.label,
            title: "Menu Label",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.notifications.card, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.no_notifications_label,
            title: "Empty Notifications Backdrop",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.notifications.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.switch_divider,
            title: "Switch Divider",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.clear,
            title: "Clear Notifications Button",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Switch" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.switch.enabled,
            title: "Enabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.switch.disabled,
            title: "Disabled",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.switch.puck,
            title: "Puck",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Scrollbar" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.scrollbar.color,
            title: "Scrollbar Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Pagination" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.pager.background,
            title: "Pager Footer Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.pager.button,
            title: "Pager Button Color",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.pager.label,
            title: "Pager Label Color",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/systray.tsx
var SystrayMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "System Tray",
      className: "menu-theme-page systray paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Dropdown Menu" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.systray.dropdownmenu.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.systray.dropdownmenu.text,
            title: "Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.systray.dropdownmenu.divider,
            title: "Section Divider",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/volume.tsx
var VolumeMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Volume Menu",
      className: "menu-theme-page volume paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Volume Menu Theme Settings" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.volume.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Card" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.volume.card.color, title: "Card", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Background" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.background.color,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.volume.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Label" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.volume.label.color, title: "Label", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "List Items" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.listitems.active,
            title: "Active/Hover",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.listitems.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Icon Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.iconbutton.active,
            title: "Active/Hover",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.iconbutton.passive,
            title: "Passive",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Audio Slider" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.audio_slider.primary,
            title: "Primary",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.audio_slider.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.audio_slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.audio_slider.puck,
            title: "Puck",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Input Slider" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.input_slider.primary,
            title: "Primary",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.input_slider.background,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.input_slider.backgroundhover,
            title: "Background (Hover)",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.input_slider.puck,
            title: "Puck",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/theme/menus/power.tsx
var PowerMenuTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Power Menu",
      className: "menu-theme-page power paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Background" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.background.color,
            title: "Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Border" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.menu.power.border.color, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Shutdown Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.shutdown.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.shutdown.icon_background,
            title: "Icon Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.shutdown.text,
            title: "Label Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.shutdown.icon,
            title: "Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Reboot Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.restart.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.restart.icon_background,
            title: "Icon Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.restart.text,
            title: "Label Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.restart.icon,
            title: "Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Logout Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.logout.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.logout.icon_background,
            title: "Icon Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.logout.text,
            title: "Label Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.logout.icon,
            title: "Icon",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Sleep Button" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.sleep.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.sleep.icon_background,
            title: "Icon Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.sleep.text,
            title: "Label Text",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.buttons.sleep.icon,
            title: "Icon",
            type: "color"
          }
        )
      ] })
    }
  );
};

// src/components/bar/settings/theme.tsx
var CustomModuleTheme = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Basic Modules",
      className: "menu-theme-page customModules paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: false,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Microphone" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.microphone.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.microphone.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.microphone.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.microphone.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.microphone.border,
            title: "Border",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "RAM" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.ram.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.ram.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.ram.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.ram.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.ram.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "CPU" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cpu.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cpu.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cpu.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cpu.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cpu.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "CPU Temperature" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cpuTemp.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cpuTemp.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cpuTemp.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cpuTemp.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cpuTemp.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Storage" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.storage.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.storage.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.storage.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.storage.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.storage.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Netstat" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.netstat.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.netstat.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.netstat.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.netstat.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.netstat.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Keyboard Layout" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.kbLayout.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.kbLayout.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.kbLayout.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.kbLayout.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.kbLayout.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Updates" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.updates.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.updates.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.updates.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.updates.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.updates.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Submap" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.submap.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.submap.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.submap.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.submap.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.submap.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Weather" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.weather.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.weather.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.weather.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.weather.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.weather.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Hyprsunset" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.hyprsunset.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.hyprsunset.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hyprsunset.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hyprsunset.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hyprsunset.border,
            title: "Border",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Hypridle" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.hypridle.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.hypridle.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hypridle.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hypridle.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.hypridle.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Cava" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cava.text, title: "Bars", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cava.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cava.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cava.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cava.border, title: "Border", type: "color" }),
        /* @__PURE__ */ jsx2(Header3, { title: "World Clock" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.worldclock.text, title: "Text", type: "color" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.worldclock.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.worldclock.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.worldclock.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.worldclock.border,
            title: "Border",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Power" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.power.icon, title: "Icon", type: "color" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.power.background,
            title: "Label Background",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.power.icon_background,
            title: "Icon Background",
            subtitle: "Applies a background color to the icon section of the button.\nRequires 'split' button styling.",
            type: "color"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.power.border, title: "Border", type: "color" })
      ] })
    }
  );
};

// src/components/settings/helpers.ts
var settingsPages = ["Configuration", "Theming"];
var themePages = [
  "General Settings",
  "Matugen Settings",
  "Bar",
  "Notifications",
  "OSD",
  "Battery Menu",
  "Bluetooth Menu",
  "Clock Menu",
  "Dashboard Menu",
  "Media Menu",
  "Network Menu",
  "Notifications Menu",
  "System Tray",
  "Volume Menu",
  "Power Menu",
  "Basic Modules"
];
var configPages = [
  "General",
  "Bar",
  "Media Menu",
  "Notifications",
  "OSD",
  "Volume",
  "Clock Menu",
  "Dashboard Menu",
  "Basic Modules",
  "Power Menu"
];

// src/components/settings/pages/theme/index.tsx
var { transition, transitionTime } = configuration_default.menus;
var CurrentPage = Variable("General Settings");
var ThemesMenu = () => {
  return /* @__PURE__ */ jsxs("box", { name: "Theming", halign: Gtk4.Align.FILL, hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2("box", { className: "option-pages-container", halign: Gtk4.Align.CENTER, hexpand: true, vertical: true, children: [0, 1, 2].map((section) => {
      return /* @__PURE__ */ jsx2("box", { children: themePages.map((page, index) => {
        if (index >= section * 6 && index < section * 6 + 6) {
          return /* @__PURE__ */ jsx2(
            "button",
            {
              className: bind(CurrentPage).as(
                (pg) => `pager-button ${pg === page ? "active" : ""}`
              ),
              label: page,
              onClick: (_, event) => {
                if (isPrimaryClick(event)) {
                  CurrentPage.set(page);
                }
              },
              halign: Gtk4.Align.CENTER
            }
          );
        }
        return /* @__PURE__ */ jsx2("box", {});
      }) });
    }) }),
    /* @__PURE__ */ jsxs(
      "stack",
      {
        className: "themes-menu-stack",
        transitionType: bind(transition).as((transitionType) => StackTransitionMap[transitionType]),
        transitionDuration: bind(transitionTime),
        shown: bind(CurrentPage),
        vexpand: false,
        children: [
          /* @__PURE__ */ jsx2(MenuTheme, {}),
          /* @__PURE__ */ jsx2(Matugen, {}),
          /* @__PURE__ */ jsx2(BarTheme, {}),
          /* @__PURE__ */ jsx2(NotificationsTheme, {}),
          /* @__PURE__ */ jsx2(OsdTheme, {}),
          /* @__PURE__ */ jsx2(BatteryMenuTheme, {}),
          /* @__PURE__ */ jsx2(BluetoothMenuTheme, {}),
          /* @__PURE__ */ jsx2(ClockMenuTheme, {}),
          /* @__PURE__ */ jsx2(DashboardMenuTheme, {}),
          /* @__PURE__ */ jsx2(MediaMenuTheme, {}),
          /* @__PURE__ */ jsx2(NetworkMenuTheme, {}),
          /* @__PURE__ */ jsx2(NotificationsMenuTheme, {}),
          /* @__PURE__ */ jsx2(SystrayMenuTheme, {}),
          /* @__PURE__ */ jsx2(VolumeMenuTheme, {}),
          /* @__PURE__ */ jsx2(PowerMenuTheme, {}),
          /* @__PURE__ */ jsx2(CustomModuleTheme, {})
        ]
      }
    )
  ] });
};

// src/components/settings/pages/config/general/index.tsx
var BarGeneral = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "General",
      className: "bar-theme-page paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "General Settings" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.font.name,
            fontLabel: configuration_default.theme.font.label,
            fontStyle: configuration_default.theme.font.style,
            title: "Font",
            type: "font"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.font.size, title: "Font Size", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.font.weight,
            title: "Font Weight",
            subtitle: "100, 200, 300, etc.",
            type: "number",
            increment: 100,
            min: 100,
            max: 900
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.dummy,
            title: "Config",
            subtitle: "WARNING: Importing a configuration will replace your current configuration settings.",
            type: "config_import",
            exportData: { filePath: CONFIG_FILE, themeOnly: false }
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.hyprpanel.restartAgs,
            title: "Restart Hyprpanel On Wake Or Monitor Connection",
            subtitle: "WARNING: Disabling this may cause bar issues on sleep/monitor connect.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.hyprpanel.restartCommand,
            title: "Restart Command",
            subtitle: "Command executed when restarting. Use '-b busName' flag if needed.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.terminal,
            title: "Terminal",
            subtitle: "For tools like 'btop'",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.tear,
            title: "Tearing Compatible",
            subtitle: "Switches overlays to 'top' layer for tearing compatibility.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.transition,
            title: "Menu Transition",
            type: "enum",
            enums: ["none", "crossfade"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.transitionTime,
            title: "Menu Transition Duration",
            type: "number",
            min: 0,
            max: 1e4,
            increment: 25
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.menus.enableShadow, title: "Enable Shadow", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.shadow,
            title: "Menu Shadow",
            subtitle: "Requires that sufficient margins have been set to house the shadow.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.shadowMargins,
            title: "Menu Shadow Margins",
            subtitle: "Margins count mouse events as clicks 'inside' the menu.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Scaling" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.scalingPriority,
            title: "Scaling Priority",
            type: "enum",
            enums: ["both", "gdk", "hyprland"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.scaling,
            title: "Bar",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.notification.scaling,
            title: "Notifications",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.osd.scaling,
            title: "OSD",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.scaling,
            title: "Dashboard Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.confirmation_scaling,
            title: "Confirmation Dialog",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.media.scaling,
            title: "Media Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.volume.scaling,
            title: "Volume Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.network.scaling,
            title: "Network Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.bluetooth.scaling,
            title: "Bluetooth Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.battery.scaling,
            title: "Battery Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.clock.scaling,
            title: "Clock Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.notifications.scaling,
            title: "Notifications Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.power.scaling,
            title: "Power Menu",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.tooltip.scaling,
            title: "Tooltips",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.popover.scaling,
            title: "Popovers",
            subtitle: "e.g., Right click menu of system tray items.",
            type: "number",
            min: 1,
            max: 100,
            increment: 5
          }
        )
      ] })
    }
  );
};

// src/components/settings/pages/config/bar/index.tsx
var BarSettings = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Bar",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      className: "menu-theme-page paged-container",
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Layouts" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.layouts,
            title: "Bar Layouts for Monitors",
            subtitle: "Wiki Link: https://hyprpanel.com/configuration/panel.html#layouts",
            type: "object",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#layouts",
            className: "bar-layout-input"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.floating, title: "Floating Bar", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.location,
            title: "Location",
            type: "enum",
            enums: ["top", "bottom"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.autoHide,
            title: "Auto Hide",
            type: "enum",
            enums: ["never", "fullscreen", "single-window"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.enableBorders,
            title: "Enable Button Borders",
            subtitle: "Enables button borders for all buttons in the bar.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.borderSize,
            title: "Button Border Size",
            subtitle: "Button border for the individual modules must be enabled first",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "General" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.border.location,
            title: "Bar Border Location",
            type: "enum",
            enums: ["none", "full", "top", "right", "bottom", "left", "horizontal", "vertical"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.border.width, title: "Bar Border Width", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.enableShadow, title: "Enable Shadow", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.shadow,
            title: "Bar Shadow",
            subtitle: "Requires that sufficient margins have been set to house the shadow.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.shadowMargins,
            title: "Bar Shadow Margins",
            subtitle: "Margins count mouse events as clicks 'inside' the menu.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.border_radius,
            title: "Border Radius",
            subtitle: "Only applies if floating is enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.outer_spacing,
            title: "Outer Spacing",
            subtitle: "Spacing on the outer left and right edges of the bar.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.y_margins,
            title: "Vertical Margins",
            subtitle: "Spacing above/below the buttons in the bar.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.spacing,
            title: "Button Spacing",
            subtitle: "Spacing between the buttons in the bar.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.padding_x,
            title: "Button Horizontal Padding",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.padding_y,
            title: "Button Vertical Padding",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.radius, title: "Button Radius", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.innerRadiusMultiplier,
            title: "Inner Button Radius Multiplier",
            subtitle: "Change this to fine-tune the padding and prevent any overflow or gaps.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.layer,
            title: "Layer",
            type: "enum",
            subtitle: "Layer determines the Z index of your bar.",
            enums: ["top", "bottom", "overlay", "background"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.dropdownGap,
            title: "Dropdown Gap",
            subtitle: "The gap between the dropdown and the bar",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.margin_top,
            title: "Margin Top",
            subtitle: "Only applies if floating is enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.margin_bottom,
            title: "Margin Bottom",
            subtitle: "Only applies if floating is enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.margin_sides,
            title: "Margin Sides",
            subtitle: "Only applies if floating is enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Actions" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.scrollSpeed,
            title: "Scrolling Speed",
            subtitle: "The speed at which the commands assigned to the scroll event will trigger",
            type: "number"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Separator" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.separator.margins, title: "Margins", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.separator.width, title: "Width", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Dashboard" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.launcher.icon, title: "Dashboard Menu Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.launcher.autoDetectIcon, title: "Auto Detect Icon", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.dashboard.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.launcher.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.launcher.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.launcher.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.launcher.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Workspaces" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.monitorSpecific,
            title: "Monitor Specific",
            subtitle: "Only workspaces of the monitor are shown.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.workspaces.show_icons, title: "Show Workspace Icons", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.show_numbered,
            title: "Show Workspace Numbers",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.workspaceMask,
            title: "Zero-Based Workspace Numbers",
            subtitle: "Start all workspace numbers from 0 on each monitor.\nRequires 'Show Workspace Numbers' to be enabled.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.showWsIcons,
            title: "Map Workspaces to Icons",
            subtitle: "https://hyprpanel.com/configuration/panel.html#show-workspace-icons",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.showApplicationIcons,
            title: "Map Workspaces to Application Icons",
            subtitle: "Requires 'Map Workspace to Icons' enabled. See docs.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.applicationIconOncePerWorkspace,
            title: "Hide Duplicate App Icons",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.showAllActive,
            title: "Mark Active Workspace On All Monitors",
            subtitle: "Marks the currently active workspace on each monitor.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.numbered_active_indicator,
            title: "Numbered Workspace Identifier",
            subtitle: "Only applicable if Workspace Numbers are enabled",
            type: "enum",
            enums: ["underline", "highlight", "color"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.smartHighlight,
            title: "Smart Highlight",
            subtitle: "Automatically determines highlight color for mapped icons.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.numbered_active_highlight_border,
            title: "Highlight Radius",
            subtitle: "Only applicable if Workspace Numbers are enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.numbered_active_highlight_padding,
            title: "Highlight Padding",
            subtitle: "Only applicable if Workspace Numbers are enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.numbered_inactive_padding,
            title: "Inactive Padding",
            subtitle: "Only applicable if Workspace Numbers are enabled",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.pill.radius,
            title: "Pill Radius",
            subtitle: "Adjust the radius for the default indicator.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.pill.height,
            title: "Pill Height",
            subtitle: "Adjust the height for the default indicator.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.pill.width,
            title: "Pill Width",
            subtitle: "Adjust the width for the default indicator.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.pill.active_width,
            title: "Active Pill Width",
            subtitle: "Adjust the width for the active default indicator.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.workspaces.fontSize,
            title: "Indicator Size",
            subtitle: "Only applicable to numbered workspaces and mapped icons. Adjust carefully.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.icons.available,
            title: "Workspace Available",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.workspaces.icons.active, title: "Workspace Active", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.icons.occupied,
            title: "Workspace Occupied",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.applicationIconMap,
            title: "App Icon Mappings",
            subtitle: "Use class/title from 'hyprctl clients'",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.applicationIconFallback,
            title: "Fallback App Icon",
            subtitle: "Fallback icon if no specific icon defined",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.applicationIconEmptyWorkspace,
            title: "App Icon for empty workspace",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.workspaceIconMap,
            title: "Workspace Icon & Color Mappings",
            subtitle: "https://hyprpanel.com/configuration/panel.html#show-workspace-icons",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.spacing,
            title: "Spacing",
            subtitle: "Spacing between workspace icons",
            type: "float"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.workspaces,
            title: "Persistent Workspaces",
            subtitle: "Requires workspace rules to be defined if 'Monitor Specific' is selected.",
            type: "number"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.reverse_scroll,
            title: "Invert Scroll",
            subtitle: "Scrolling up goes to previous workspace",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.workspaces.scroll_speed, title: "Scrolling Speed", type: "number" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.workspaces.ignored,
            title: "Ignored Workspaces",
            subtitle: "A regex defining ignored workspaces",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Window Titles" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.windowtitle.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.windowtitle.custom_title, title: "Use Custom Title", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.windowtitle.title_map,
            title: "Window Title Mappings",
            subtitle: "Requires Custom Title.\nWiki: https://hyprpanel.com/configuration/panel.html#window-title-mappings",
            type: "object",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#window-title-mappings"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.windowtitle.class_name,
            title: "Use Class Name",
            subtitle: "If custom title is disabled, shows class name instead.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.windowtitle.label, title: "Show Window Title Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.windowtitle.icon, title: "Show Icon", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.windowtitle.truncation,
            title: "Truncate Window Title",
            subtitle: "Truncates the window title to a specified size.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.windowtitle.truncation_size,
            title: "Truncation Size",
            type: "number",
            min: 10
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.windowtitle.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.windowtitle.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.windowtitle.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.windowtitle.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.windowtitle.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.windowtitle.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Volume" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.volume.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.volume.label, title: "Show Volume Percentage", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.volume.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.volume.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.volume.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.volume.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.volume.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Network" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.network.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.network.label, title: "Show Network Name", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.network.showWifiInfo,
            title: "Show Wifi Info On Hover",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.network.truncation,
            title: "Truncate Network Name",
            subtitle: "Truncates network name to specified size.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.network.truncation_size, title: "Truncation Size", type: "number" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.network.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.network.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.network.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.network.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.network.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Bluetooth" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.bluetooth.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.bluetooth.label, title: "Show Bluetooth Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.bluetooth.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.bluetooth.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.bluetooth.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.bluetooth.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.bluetooth.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Battery" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.battery.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.battery.label, title: "Show Battery Percentage", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.battery.hideLabelWhenFull,
            title: "Hide Battery Percentage When Full",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.battery.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.battery.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.battery.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.battery.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.battery.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "System Tray" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.systray.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.systray.ignore,
            title: "Ignore List",
            subtitle: "Apps to ignore\nWiki: https://hyprpanel.com/configuration/panel.html#system-tray",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#system-tray",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.systray.customIcons,
            title: "Custom Systray Icons",
            subtitle: "Define custom icons for systray.\nWiki: https://hyprpanel.com/configuration/panel.html#custom-systray-icons",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#custom-systray-icons",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Clock" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.clock.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.clock.format, title: "Clock Format", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.clock.icon, title: "Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.clock.showIcon, title: "Show Icon", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.clock.showTime, title: "Show Time", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.clock.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.clock.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.clock.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.clock.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.clock.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Media" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.media.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.media.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.media.format,
            title: "Label Format",
            subtitle: "Placeholders: {title}, {artists}, {artist}, {album}, {name}, {identity}",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.media.show_label, title: "Toggle Media Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.media.truncation,
            title: "Truncate Media Label",
            subtitle: "Requires Toggle Media Label.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.media.truncation_size,
            title: "Truncation Size",
            subtitle: "Requires Toggle Media Label.",
            type: "number",
            min: 10
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.media.show_active_only,
            title: "Auto Hide",
            subtitle: "Hide if no media detected.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.media.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.media.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.media.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.media.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Notifications" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.notifications.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.notifications.show_total,
            title: "Show Total # of notifications",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.notifications.hideCountWhenZero,
            title: "Auto Hide Label",
            subtitle: "Hide label when zero notifications",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.notifications.spacing,
            title: "Inner Spacing",
            subtitle: "Spacing between icon and label.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.notifications.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.notifications.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.notifications.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.notifications.scrollDown, title: "Scroll Down", type: "string" })
      ] })
    }
  );
};

// src/components/settings/pages/config/menus/media.tsx
var MediaMenuSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "Media Menu", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header3, { title: "Media" }),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.media.hideAuthor, title: "Hide Author", type: "boolean" }),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.media.hideAlbum, title: "Hide Album", type: "boolean" }),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.media.displayTime, title: "Display Time Info", type: "boolean" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.menus.media.displayTimeTooltip,
        title: "Display Time Tooltip",
        subtitle: "Show media time info on hover",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.menus.media.noMediaText,
        title: "No Media Placeholder",
        subtitle: "Text when no media is playing",
        type: "string"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/notifications/index.tsx
var NotificationSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "Notifications", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header3, { title: "Notification Settings" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.ignore,
        title: "Ignored Applications",
        subtitle: "Wiki: https://hyprpanel.com/configuration/notifications.html#ignored-applications",
        subtitleLink: "https://hyprpanel.com/configuration/notifications.html#ignored-applications",
        type: "object"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.position,
        title: "Notification Location",
        type: "enum",
        enums: [
          "top left",
          "top",
          "top right",
          "right",
          "bottom right",
          "bottom",
          "bottom left",
          "left"
        ]
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.notification.border_radius, title: "Border Radius", type: "string" }),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.notification.enableShadow, title: "Enable Shadow", type: "boolean" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.notification.shadow,
        title: "Notification Shadow",
        subtitle: "Requires that sufficient margins have been set to house the shadow.",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.notification.shadowMargins,
        title: "Notification Shadow Margins",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.monitor,
        title: "Monitor",
        subtitle: "ID of the monitor to display notifications",
        type: "number"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.showActionsOnHover,
        title: "Show Actions only on Hover",
        subtitle: "Actions appear on hover",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.active_monitor,
        title: "Follow Cursor",
        subtitle: "Notifications follow the monitor of your cursor",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.clearDelay,
        title: "Clear Delay",
        subtitle: "Delay in ms before clearing a notification",
        type: "number",
        increment: 20
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.timeout,
        title: "Popup Timeout",
        subtitle: "Duration in ms the notification popup stays visible",
        type: "number"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.autoDismiss,
        title: "Automatically Dismiss",
        subtitle: "Notifications with a timeout will dismiss automatically.",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.cache_actions,
        title: "Preserve Actions",
        subtitle: "Persist action buttons after reboot.",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(Header3, { title: "Notification Menu Settings" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.bar.menus.menu.notifications.height,
        title: "Notification Menu Height",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.notifications.displayedTotal,
        title: "Displayed Total",
        subtitle: "Number of notifications to show at once.",
        type: "number",
        min: 1
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.bar.menus.menu.notifications.pager.show,
        title: "Show Pager",
        subtitle: "Shows pagination footer.",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.bar.menus.menu.notifications.scrollbar.width,
        title: "Scrollbar Width",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.bar.menus.menu.notifications.scrollbar.radius,
        title: "Scrollbar Radius",
        type: "string"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/osd/index.tsx
var OSDSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "OSD", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header3, { title: "On Screen Display" }),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.enable, title: "Enabled", type: "boolean" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.duration,
        title: "Duration",
        type: "number",
        min: 100,
        max: 1e4,
        increment: 500
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.orientation,
        title: "Orientation",
        type: "enum",
        enums: ["horizontal", "vertical"]
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.location,
        title: "Position",
        subtitle: "Position of OSD",
        type: "enum",
        enums: [
          "top left",
          "top",
          "top right",
          "right",
          "bottom right",
          "bottom",
          "bottom left",
          "left"
        ]
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.monitor,
        title: "Monitor",
        subtitle: "Monitor ID for OSD display",
        type: "number"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.active_monitor,
        title: "Follow Cursor",
        subtitle: "OSD follows monitor of cursor",
        type: "boolean"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.margins,
        title: "Margins",
        subtitle: "Format: top right bottom left",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.enableShadow, title: "Enable Shadow", type: "boolean" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.shadow,
        title: "OSD Shadow",
        subtitle: "Requires that sufficient margins have been set to house the shadow.",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.osd.border.size, title: "Border Size", type: "string" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.radius,
        title: "Radius",
        subtitle: "Radius of the OSD",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.theme.osd.muted_zero,
        title: "Mute Volume as Zero",
        subtitle: "Display volume as 0 when muting",
        type: "boolean"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/menus/volume.tsx
var VolumeMenuSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "Volume", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header3, { title: "Volume" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.menus.volume.raiseMaximumVolume,
        title: "Allow Raising Volume Above 100%",
        subtitle: "Allows up to 150% volume",
        type: "boolean"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/menus/clock.tsx
var ClockMenuSettings = () => {
  return /* @__PURE__ */ jsx2("scrollable", { name: "Clock Menu", vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsxs("box", { className: "bar-theme-page paged-container", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header3, { title: "Time" }),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.clock.time.military, title: "Use 24hr time", type: "boolean" }),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.clock.time.hideSeconds, title: "Hide seconds", type: "boolean" }),
    /* @__PURE__ */ jsx2(Header3, { title: "Weather" }),
    /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.clock.weather.enabled, title: "Enabled", type: "boolean" }),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.menus.clock.weather.location,
        title: "Location",
        subtitle: "<Zip Code>, <Postal Code>, <City>, <lat, long>, etc.",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.menus.clock.weather.key,
        title: "Weather API Key",
        subtitle: "API Key or path to JSON file containing 'weather_api_key'",
        type: "string"
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.menus.clock.weather.unit,
        title: "Units",
        type: "enum",
        enums: ["imperial", "metric"]
      }
    ),
    /* @__PURE__ */ jsx2(
      Option,
      {
        opt: configuration_default.menus.clock.weather.interval,
        title: "Weather Fetching Interval (ms)",
        subtitle: "May require AGS restart.",
        type: "number"
      }
    )
  ] }) });
};

// src/components/settings/pages/config/menus/dashboard.tsx
var DashboardMenuSettings = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Dashboard Menu",
      className: "bar-theme-page paged-container",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      overlayScrolling: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Power Menu" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.powermenu.avatar.image,
            title: "Profile Image",
            type: "img",
            subtitle: "By default uses '~/.face.icon'"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.powermenu.avatar.name,
            title: "Profile Name",
            subtitle: "Use 'system' for auto system name",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.profile.size,
            title: "Profile Image Size",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.menus.menu.dashboard.profile.radius,
            title: "Profile Image Radius",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.powermenu.confirmation,
            title: "Show Confirmation Dialogue",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.powermenu.shutdown,
            title: "Shutdown Command",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.dashboard.powermenu.reboot, title: "Reboot Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.dashboard.powermenu.logout, title: "Logout Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.dashboard.powermenu.sleep, title: "Sleep Command", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Recording" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.dashboard.recording.path, title: "Recording Path", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Controls" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.dashboard.controls.enabled, title: "Enabled", type: "boolean" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Resource Usage Metrics" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.dashboard.stats.enabled, title: "Enabled", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.stats.enable_gpu,
            title: "Track GPU",
            subtitle: "Only for NVidia + python-gpustat",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.stats.interval,
            title: "Update Interval",
            subtitle: "Frequency of system metrics polling.",
            type: "number",
            min: 100,
            increment: 500
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Shortcuts" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.dashboard.shortcuts.enabled, title: "Enabled", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut1.icon,
            title: "Left - Shortcut 1 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut1.command,
            title: "Left - Shortcut 1 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut1.tooltip,
            title: "Left - Shortcut 1 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut2.icon,
            title: "Left - Shortcut 2 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut2.command,
            title: "Left - Shortcut 2 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut2.tooltip,
            title: "Left - Shortcut 2 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut3.icon,
            title: "Left - Shortcut 3 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut3.command,
            title: "Left - Shortcut 3 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut3.tooltip,
            title: "Left - Shortcut 3 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut4.icon,
            title: "Left - Shortcut 4 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut4.command,
            title: "Left - Shortcut 4 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.left.shortcut4.tooltip,
            title: "Left - Shortcut 4 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.right.shortcut1.icon,
            title: "Right - Shortcut 1 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.right.shortcut1.command,
            title: "Right - Shortcut 1 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.right.shortcut1.tooltip,
            title: "Right - Shortcut 1 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.right.shortcut3.icon,
            title: "Right - Shortcut 3 (Icon)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.right.shortcut3.command,
            title: "Right - Shortcut 3 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.shortcuts.right.shortcut3.tooltip,
            title: "Right - Shortcut 3 (Tooltip)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Directories" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.dashboard.directories.enabled, title: "Enabled", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.left.directory1.label,
            title: "Left - Directory 1 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.left.directory1.command,
            title: "Left - Directory 1 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.left.directory2.label,
            title: "Left - Directory 2 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.left.directory2.command,
            title: "Left - Directory 2 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.left.directory3.label,
            title: "Left - Directory 3 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.left.directory3.command,
            title: "Left - Directory 3 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.right.directory1.label,
            title: "Right - Directory 1 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.right.directory1.command,
            title: "Right - Directory 1 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.right.directory2.label,
            title: "Right - Directory 2 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.right.directory2.command,
            title: "Right - Directory 2 (Command)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.right.directory3.label,
            title: "Right - Directory 3 (Label)",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.dashboard.directories.right.directory3.command,
            title: "Right - Directory 3 (Command)",
            type: "string"
          }
        )
      ] })
    }
  );
};

// src/components/bar/settings/config.tsx
var CustomModuleSettings = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Basic Modules",
      className: "menu-theme-page customModules paged-container",
      vscroll: Gtk4.PolicyType.AUTOMATIC,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      children: /* @__PURE__ */ jsxs("box", { className: "menu-theme-page paged-container", vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "General" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.scrollSpeed, title: "Scrolling Speed", type: "number" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Microphone" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.microphone.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.microphone.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.microphone.mutedIcon,
            title: "Muted Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.microphone.unmutedIcon,
            title: "Unmuted Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.microphone.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.microphone.leftClick,
            title: "Left Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.microphone.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.microphone.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.microphone.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.microphone.scrollDown,
            title: "Scroll Down",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "RAM" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.ram.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.ram.icon, title: "Ram Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.ram.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.ram.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.ram.labelType,
            title: "Label Type",
            type: "enum",
            enums: ["used/total", "used", "free", "percentage"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.ram.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.ram.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.ram.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.ram.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.ram.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "CPU" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cpu.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpu.icon, title: "Cpu Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpu.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cpu.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpu.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cpu.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpu.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpu.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpu.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpu.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpu.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "CPU Temperature" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cpuTemp.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cpuTemp.sensor,
            title: "CPU Temperature Sensor",
            subtitle: "Wiki: https://hyprpanel.com/configuration/panel.html#custom-modules",
            subtitleLink: "https://hyprpanel.com/configuration/panel.html#custom-modules",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cpuTemp.unit,
            title: "CPU Temperature Unit",
            type: "enum",
            enums: ["imperial", "metric"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpuTemp.showUnit, title: "Show Unit", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cpuTemp.icon,
            title: "Cpu Temperature Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpuTemp.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cpuTemp.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpuTemp.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cpuTemp.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpuTemp.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cpuTemp.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cpuTemp.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cpuTemp.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cpuTemp.scrollDown,
            title: "Scroll Down",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Storage" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.storage.paths,
            title: "Paths to Monitor",
            subtitle: "Paths must be absolute paths",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.storage.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.storage.icon, title: "Storage Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.storage.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.storage.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.storage.labelType,
            title: "Label Type",
            type: "enum",
            enums: ["used/total", "used", "free", "percentage"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.storage.units,
            title: "Unit of measurement",
            type: "enum",
            enums: ["auto", "bytes", "kibibytes", "mebibytes", "gibibytes", "tebibytes"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.storage.tooltipStyle,
            title: "Tooltip Style",
            subtitle: "Choose how drive information is displayed in the tooltip",
            type: "enum",
            enums: ["percentage-bar", "tree", "simple"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.storage.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.storage.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.storage.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.storage.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.storage.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Netstat" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.netstat.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.networkInterface,
            title: "Network Interface",
            subtitle: "Name of the network interface to poll.\nHINT: Get a list of interfaces with 'cat /proc/net/dev",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.dynamicIcon,
            title: "Use Network Icon",
            subtitle: "If enabled, shows current network icon indicators instead of static icon",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.netstat.icon, title: "Netstat Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.netstat.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.networkInLabel,
            title: "Network In Label",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.networkOutLabel,
            title: "Network Out Label",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.rateUnit,
            title: "Rate Unit",
            type: "enum",
            enums: ["GiB", "MiB", "KiB", "auto"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.netstat.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.labelType,
            title: "Label Type",
            type: "enum",
            enums: ["full", "in", "out"]
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.netstat.round, title: "Round", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.pollingInterval,
            title: "Polling Interval (ms)",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.netstat.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.netstat.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Keyboard Layout" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.kbLayout.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.kbLayout.icon,
            title: "Keyboard Layout Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.kbLayout.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.kbLayout.labelType,
            title: "Label Type",
            type: "enum",
            enums: ["layout", "code"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.kbLayout.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.kbLayout.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.kbLayout.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.kbLayout.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.kbLayout.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.kbLayout.scrollDown,
            title: "Scroll Down",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Updates" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.updates.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.updateCommand,
            title: "Check Updates Command",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.updateTooltipCommand,
            title: "Check Updates Tooltip Command",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.extendedTooltip,
            title: "Show Extended Tooltip",
            subtitle: "Lists packages with updates. Arch only.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.icon.pending,
            title: "Updates Available Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.icon.updated,
            title: "No Updates Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.updates.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.autoHide,
            title: "Auto Hide",
            subtitle: "Hides module when no updates are available.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.updates.padZero, title: "Pad with 0", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.updates.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.pollingInterval,
            title: "Polling Interval",
            subtitle: "WARNING: Be careful of your package manager's rate limit.",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.updates.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.updates.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.updates.scrollDown,
            title: "Scroll Down",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Submap" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.submap.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.submap.showSubmapName,
            title: "Show Submap Name",
            subtitle: "Displays current submap name instead of Enabled/Disabled text.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.submap.enabledIcon,
            title: "Enabled Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.submap.disabledIcon,
            title: "Disabled Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.submap.enabledText,
            title: "Enabled Text",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.submap.disabledText,
            title: "Disabled Text",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.submap.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.submap.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.submap.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.submap.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.submap.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.submap.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.submap.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "Weather" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.weather.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.weather.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.weather.unit,
            title: "Units",
            type: "enum",
            enums: ["imperial", "metric"]
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.weather.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.weather.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.weather.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.weather.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.weather.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.weather.scrollDown,
            title: "Scroll Down",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Hyprsunset" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.temperature,
            title: "Temperature",
            subtitle: "Ex: 1000k, 2000k, 5000k, etc.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hyprsunset.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.onIcon,
            title: "Enabled Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.offIcon,
            title: "Disabled Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.onLabel,
            title: "Enabled Label",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.offLabel,
            title: "Disabled Label",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.hyprsunset.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hyprsunset.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.hyprsunset.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hyprsunset.scrollDown,
            title: "Scroll Down",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Hypridle" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hypridle.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.hypridle.onIcon, title: "Enabled Icon", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hypridle.offIcon,
            title: "Disabled Icon",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hypridle.onLabel,
            title: "Enabled Label",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hypridle.offLabel,
            title: "Disabled Label",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.hypridle.label, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.hypridle.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hypridle.pollingInterval,
            title: "Polling Interval",
            type: "number",
            min: 100,
            max: 60 * 24 * 1e3,
            increment: 1e3
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hypridle.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hypridle.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.hypridle.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.hypridle.scrollDown,
            title: "Scroll Down",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Cava" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.cava.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.icon, title: "Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.showIcon, title: "Show Icon", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.cava.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cava.barCharacters,
            title: "Bar Characters",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cava.spaceCharacter,
            title: "Bar Separator",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cava.showActiveOnly,
            title: "Auto Hide",
            subtitle: "Hide if no media detected.",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.bars, title: "Bars", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.channels, title: "Channels", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.framerate, title: "Framerate", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.samplerate, title: "Sample Rate", type: "number" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cava.autoSensitivity,
            title: "Automatic Sensitivity",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.lowCutoff, title: "Low Cutoff", type: "number" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.highCutoff, title: "High Cutoff", type: "number" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.cava.noiseReduction,
            title: "Noise Reduction",
            type: "float"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.stereo, title: "Stereo", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.middleClick, title: "Middle Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.cava.scrollDown, title: "Scroll Down", type: "string" }),
        /* @__PURE__ */ jsx2(Header3, { title: "World Clock" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.worldclock.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.worldclock.icon, title: "Icon", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.worldclock.showIcon,
            title: "Show Icon",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.worldclock.spacing,
            title: "Spacing",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.worldclock.format, title: "Format", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.worldclock.formatDiffDate,
            title: "Cross-Day Time Format",
            subtitle: "Format to use when the timezone is on a different calendar day than the local timezone.",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.worldclock.divider,
            title: "Date Divider",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.worldclock.leftClick,
            title: "Left Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.worldclock.rightClick,
            title: "Right Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.worldclock.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.worldclock.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.worldclock.scrollDown,
            title: "Scroll Down",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.worldclock.tz,
            title: "Timezones Displayed",
            type: "object"
          }
        ),
        /* @__PURE__ */ jsx2(Header3, { title: "Power" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.theme.bar.buttons.modules.power.enableBorder,
            title: "Button Border",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.theme.bar.buttons.modules.power.spacing, title: "Spacing", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.power.icon, title: "Power Button Icon", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.power.leftClick, title: "Left Click", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.power.rightClick, title: "Right Click", type: "string" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.bar.customModules.power.middleClick,
            title: "Middle Click",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.power.scrollUp, title: "Scroll Up", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.bar.customModules.power.scrollDown, title: "Scroll Down", type: "string" })
      ] })
    }
  );
};

// src/components/settings/pages/config/menus/power.tsx
var PowerMenuSettings = () => {
  return /* @__PURE__ */ jsx2(
    "scrollable",
    {
      name: "Power Menu",
      className: "bar-theme-page paged-container",
      vscroll: Gtk4.PolicyType.ALWAYS,
      hscroll: Gtk4.PolicyType.AUTOMATIC,
      vexpand: true,
      overlayScrolling: true,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsx2(Header3, { title: "Power Menu" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.power.showLabel, title: "Show Label", type: "boolean" }),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.power.lowBatteryNotification,
            title: "Show Notification For Low Battery",
            type: "boolean"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.power.lowBatteryThreshold,
            title: "Battery Level For Notification",
            type: "number"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.power.lowBatteryNotificationTitle,
            title: "Low Battery Notification Title",
            subtitle: "Use $POWER_LEVEL for battery percent",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(
          Option,
          {
            opt: configuration_default.menus.power.lowBatteryNotificationText,
            title: "Low Battery Notification Body",
            subtitle: "Use $POWER_LEVEL for battery percent",
            type: "string"
          }
        ),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.power.confirmation, title: "Confirmation Dialog", type: "boolean" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.power.shutdown, title: "Shutdown Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.power.reboot, title: "Reboot Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.power.logout, title: "Logout Command", type: "string" }),
        /* @__PURE__ */ jsx2(Option, { opt: configuration_default.menus.power.sleep, title: "Sleep Command", type: "string" })
      ] })
    }
  );
};

// src/components/settings/pages/config/index.tsx
var { transition: transition2, transitionTime: transitionTime2 } = configuration_default.menus;
var CurrentPage2 = Variable("General");
var SettingsMenu = () => {
  return /* @__PURE__ */ jsxs("box", { name: "Configuration", halign: Gtk4.Align.FILL, hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2("box", { className: "option-pages-container", halign: Gtk4.Align.CENTER, hexpand: true, vertical: true, children: [0, 1, 2].map((section) => {
      return /* @__PURE__ */ jsx2("box", { children: configPages.map((page, index) => {
        if (index >= section * 6 && index < section * 6 + 6) {
          return /* @__PURE__ */ jsx2(
            "button",
            {
              className: bind(CurrentPage2).as(
                (pg) => `pager-button ${pg === page ? "active" : ""}`
              ),
              label: page,
              onClick: (_, event) => {
                if (isPrimaryClick(event)) {
                  CurrentPage2.set(page);
                }
              },
              halign: Gtk4.Align.CENTER
            }
          );
        }
        return /* @__PURE__ */ jsx2("box", {});
      }) });
    }) }),
    /* @__PURE__ */ jsxs(
      "stack",
      {
        className: "themes-menu-stack",
        transitionType: bind(transition2).as((transitionType) => StackTransitionMap[transitionType]),
        transitionDuration: bind(transitionTime2),
        shown: bind(CurrentPage2),
        vexpand: true,
        children: [
          /* @__PURE__ */ jsx2(BarGeneral, {}),
          /* @__PURE__ */ jsx2(BarSettings, {}),
          /* @__PURE__ */ jsx2(MediaMenuSettings, {}),
          /* @__PURE__ */ jsx2(NotificationSettings, {}),
          /* @__PURE__ */ jsx2(OSDSettings, {}),
          /* @__PURE__ */ jsx2(VolumeMenuSettings, {}),
          /* @__PURE__ */ jsx2(ClockMenuSettings, {}),
          /* @__PURE__ */ jsx2(DashboardMenuSettings, {}),
          /* @__PURE__ */ jsx2(CustomModuleSettings, {}),
          /* @__PURE__ */ jsx2(PowerMenuSettings, {})
        ]
      }
    )
  ] });
};

// src/components/settings/PageContainer.tsx
var { transition: transition3, transitionTime: transitionTime3 } = configuration_default.menus;
var CurrentPage3 = Variable("Configuration");
var LastPage = Variable("Configuration");
var PageContainer = () => {
  return /* @__PURE__ */ jsxs("box", { className: "settings-page-container", halign: Gtk4.Align.FILL, vertical: true, children: [
    /* @__PURE__ */ jsx2("box", { className: "settings-page-container2", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsx2("box", { className: "option-pages-container", halign: Gtk4.Align.CENTER, hexpand: true, children: settingsPages.map((page) => {
      return /* @__PURE__ */ jsx2(
        "button",
        {
          className: bind(CurrentPage3).as(
            (v) => `pager-button ${v === page ? "active" : ""} category`
          ),
          label: page,
          onClick: (_, event) => {
            if (isPrimaryClick(event)) {
              LastPage.set(CurrentPage3.get());
              CurrentPage3.set(page);
            }
          },
          halign: Gtk4.Align.CENTER
        }
      );
    }) }) }),
    /* @__PURE__ */ jsxs(
      "stack",
      {
        className: "themes-menu-stack",
        transitionType: bind(transition3).as((transitionType) => StackTransitionMap[transitionType]),
        transitionDuration: bind(transitionTime3),
        shown: bind(CurrentPage3),
        vexpand: false,
        hexpand: true,
        children: [
          /* @__PURE__ */ jsx2(SettingsMenu, {}),
          /* @__PURE__ */ jsx2(ThemesMenu, {})
        ]
      }
    )
  ] });
};

// src/components/settings/index.tsx
var settings_default = () => {
  return /* @__PURE__ */ jsx2(
    RegularWindow_default,
    {
      className: "settings-dialog",
      visible: false,
      name: "settings-dialog",
      title: "hyprpanel-settings",
      application: app_default,
      setup: (self) => {
        self.connect("delete-event", () => {
          self.hide();
          return true;
        });
        self.set_default_size(200, 300);
      },
      children: /* @__PURE__ */ jsxs("box", { className: "settings-dialog-box", vertical: true, children: [
        /* @__PURE__ */ jsx2(Header2, {}),
        /* @__PURE__ */ jsx2(PageContainer, {})
      ] })
    }
  );
};

// src/components/osd/helpers.ts
import AstalHyprland15 from "gi://AstalHyprland?version=0.1";
import AstalWp3 from "gi://AstalWp?version=0.1";

// src/services/system/brightness/index.ts
var get = (args) => Number(exec(`brightnessctl ${args}`));
var screen = exec('bash -c "ls -w1 /sys/class/backlight | head -1"');
var kbd = exec(`bash -c "ls -w1 /sys/class/leds | grep '::kbd_backlight$' | head -1"`);
var _kbdMax, _kbd, _screenMax, _screen;
var BrightnessService = class extends GObject4.Object {
  constructor() {
    super();
    __privateAdd(this, _kbdMax, kbd?.length ? get(`--device ${kbd} max`) : 0);
    __privateAdd(this, _kbd, kbd?.length ? get(`--device ${kbd} get`) : 0);
    __privateAdd(this, _screenMax, screen?.length ? get(`--device ${screen} max`) : 0);
    __privateAdd(this, _screen, screen?.length ? get(`--device ${screen} get`) / (get(`--device ${screen} max`) || 1) : 0);
    const screenPath = `/sys/class/backlight/${screen}/brightness`;
    const kbdPath = `/sys/class/leds/${kbd}/brightness`;
    monitorFile(screenPath, async (f) => {
      const v = await readFileAsync(f);
      __privateSet(this, _screen, Number(v) / __privateGet(this, _screenMax));
      this.notify("screen");
    });
    monitorFile(kbdPath, async (f) => {
      const v = await readFileAsync(f);
      __privateSet(this, _kbd, Number(v) / __privateGet(this, _kbdMax));
      this.notify("kbd");
    });
  }
  /**
   * Gets the singleton instance of BrightnessService
   *
   * @returns The BrightnessService instance
   */
  static getInstance() {
    if (BrightnessService.instance === void 0) {
      BrightnessService.instance = new BrightnessService();
    }
    return BrightnessService.instance;
  }
  get kbd() {
    return __privateGet(this, _kbd);
  }
  get screen() {
    return __privateGet(this, _screen);
  }
  /**
   * Sets the keyboard backlight brightness level
   *
   * @param value - The brightness value to set (0 to maximum)
   */
  set kbd(value) {
    if (value < 0 || value > __privateGet(this, _kbdMax) || !kbd?.length) return;
    SystemUtilities.sh(`brightnessctl -d ${kbd} s ${value} -q`).then(() => {
      __privateSet(this, _kbd, value);
      this.notify("kbd");
    });
  }
  /**
   * Sets the screen brightness level
   *
   * @param percent - The brightness percentage to set (0-1)
   */
  set screen(percent) {
    if (!screen?.length) return;
    let brightnessPct = percent;
    if (percent < 0) brightnessPct = 0;
    if (percent > 1) brightnessPct = 1;
    SystemUtilities.sh(`brightnessctl set ${Math.round(brightnessPct * 100)}% -d ${screen} -q`).then(
      () => {
        __privateSet(this, _screen, brightnessPct);
        this.notify("screen");
      }
    );
  }
};
_kbdMax = new WeakMap();
_kbd = new WeakMap();
_screenMax = new WeakMap();
_screen = new WeakMap();
__publicField(BrightnessService, "instance");
__decorateClass([
  property(Number)
], BrightnessService.prototype, "kbd", 1);
__decorateClass([
  property(Number)
], BrightnessService.prototype, "screen", 1);
BrightnessService = __decorateClass([
  register({ GTypeName: "Brightness" })
], BrightnessService);

// src/components/osd/helpers.ts
var wireplumber3 = AstalWp3.get_default();
var audioService3 = wireplumber3.audio;
var brightnessService = BrightnessService.getInstance();
var hyprlandService15 = AstalHyprland15.get_default();
var { enable, duration, active_monitor: active_monitor2, monitor: monitor2 } = configuration_default.theme.osd;
var count = 0;
var isStartingUp = true;
timeout(3e3, () => {
  isStartingUp = false;
});
var handleReveal = (self) => {
  if (isStartingUp) {
    return;
  }
  if (!enable.get()) {
    return;
  }
  self.reveal_child = true;
  count++;
  timeout(duration.get(), () => {
    count--;
    if (count === 0) {
      self.reveal_child = false;
    }
  });
};
var getOsdMonitor = () => {
  const gdkMonitorMapper = new GdkMonitorService();
  return Variable.derive(
    [bind(hyprlandService15, "focusedMonitor"), bind(monitor2), bind(active_monitor2)],
    (currentMonitor, defaultMonitor, followMonitor) => {
      gdkMonitorMapper.reset();
      if (followMonitor === true) {
        const gdkMonitor2 = gdkMonitorMapper.mapHyprlandToGdk(currentMonitor.id);
        return gdkMonitor2;
      }
      const gdkMonitor = gdkMonitorMapper.mapHyprlandToGdk(defaultMonitor);
      return gdkMonitor;
    }
  );
};
var revealerSetup = (self) => {
  self.hook(enable, () => {
    handleReveal(self);
  });
  self.hook(brightnessService, "notify::screen", () => {
    handleReveal(self);
  });
  self.hook(brightnessService, "notify::kbd", () => {
    handleReveal(self);
  });
  Variable.derive(
    [bind(audioService3.defaultMicrophone, "volume"), bind(audioService3.defaultMicrophone, "mute")],
    () => {
      handleReveal(self);
    }
  );
  Variable.derive(
    [bind(audioService3.defaultSpeaker, "volume"), bind(audioService3.defaultSpeaker, "mute")],
    () => {
      handleReveal(self);
    }
  );
};

// src/components/shared/LevelBar.tsx
var LevelBar2 = class extends astalify(Gtk4.LevelBar) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of LevelBar.
   * @param props - The properties for the LevelBar component.
   * @memberof LevelBar
   */
  constructor(props) {
    super(props);
  }
};
var LevelBar_default = LevelBar2;

// src/components/osd/bar/helpers.ts
import AstalWp4 from "gi://AstalWp?version=0.1";
var wireplumber4 = AstalWp4.get_default();
var audioService4 = wireplumber4.audio;
var brightnessService2 = BrightnessService.getInstance();
var setupOsdBar = (self) => {
  self.hook(brightnessService2, "notify::screen", () => {
    self.className = self.className.replace(/\boverflow\b/, "").trim();
    self.value = brightnessService2.screen;
  });
  self.hook(brightnessService2, "notify::kbd", () => {
    self.className = self.className.replace(/\boverflow\b/, "").trim();
    self.value = brightnessService2.kbd;
  });
  Variable.derive([bind(audioService4.defaultMicrophone, "volume")], () => {
    self.toggleClassName("overflow", audioService4.defaultMicrophone.volume > 1);
    self.value = audioService4.defaultMicrophone.volume <= 1 ? audioService4.defaultMicrophone.volume : audioService4.defaultMicrophone.volume - 1;
  });
  Variable.derive([bind(audioService4.defaultMicrophone, "mute")], () => {
    self.toggleClassName(
      "overflow",
      audioService4.defaultMicrophone.volume > 1 && (!configuration_default.theme.osd.muted_zero.get() || audioService4.defaultMicrophone.mute === false)
    );
    self.value = configuration_default.theme.osd.muted_zero.get() && audioService4.defaultMicrophone.mute !== false ? 0 : audioService4.defaultMicrophone.volume <= 1 ? audioService4.defaultMicrophone.volume : audioService4.defaultMicrophone.volume - 1;
  });
  Variable.derive([bind(audioService4.defaultSpeaker, "volume")], () => {
    self.toggleClassName("overflow", audioService4.defaultSpeaker.volume > 1);
    self.value = audioService4.defaultSpeaker.volume <= 1 ? audioService4.defaultSpeaker.volume : audioService4.defaultSpeaker.volume - 1;
  });
  Variable.derive([bind(audioService4.defaultSpeaker, "mute")], () => {
    self.toggleClassName(
      "overflow",
      audioService4.defaultSpeaker.volume > 1 && (!configuration_default.theme.osd.muted_zero.get() || audioService4.defaultSpeaker.mute === false)
    );
    self.value = configuration_default.theme.osd.muted_zero.get() && audioService4.defaultSpeaker.mute !== false ? 0 : audioService4.defaultSpeaker.volume <= 1 ? audioService4.defaultSpeaker.volume : audioService4.defaultSpeaker.volume - 1;
  });
};

// src/components/osd/bar/index.tsx
var OSDBar = ({ orientation: orientation2 }) => {
  const barOrientation = orientation2 === "vertical" ? Gtk4.Orientation.VERTICAL : Gtk4.Orientation.HORIZONTAL;
  return /* @__PURE__ */ jsx2("box", { className: "osd-bar-container", children: /* @__PURE__ */ jsx2(
    LevelBar_default,
    {
      className: "osd-bar",
      orientation: barOrientation,
      inverted: orientation2 === "vertical",
      mode: Gtk4.LevelBarMode.CONTINUOUS,
      setup: setupOsdBar
    }
  ) });
};

// src/components/osd/icon/helpers.ts
import AstalWp5 from "gi://AstalWp?version=0.1";
var wireplumber5 = AstalWp5.get_default();
var audioService5 = wireplumber5.audio;
var brightnessService3 = BrightnessService.getInstance();
var setupOsdIcon = (self) => {
  self.hook(brightnessService3, "notify::screen", () => {
    self.label = "\u{F1356}";
  });
  self.hook(brightnessService3, "notify::kbd", () => {
    self.label = "\u{F097B}";
  });
  const micVariable = Variable.derive(
    [bind(audioService5.defaultMicrophone, "volume"), bind(audioService5.defaultMicrophone, "mute")],
    () => {
      self.label = audioService5.defaultMicrophone.mute ? "\u{F036D}" : "\u{F036C}";
    }
  );
  const speakerVariable = Variable.derive(
    [bind(audioService5.defaultSpeaker, "volume"), bind(audioService5.defaultSpeaker, "mute")],
    () => {
      self.label = audioService5.defaultSpeaker.mute ? "\u{F075F}" : "\u{F057E}";
    }
  );
  return {
    micVariable,
    speakerVariable
  };
};

// src/components/osd/icon/index.tsx
var OSDIcon = () => {
  return /* @__PURE__ */ jsx2("box", { className: "osd-icon-container", hexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "osd-icon txt-icon",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      setup: setupOsdIcon,
      expand: true
    }
  ) });
};

// src/components/osd/label/helpers.ts
import AstalWp6 from "gi://AstalWp?version=0.1";
var wireplumber6 = AstalWp6.get_default();
var audioService6 = wireplumber6.audio;
var brightnessService4 = BrightnessService.getInstance();
var setupOsdLabel = (self) => {
  self.hook(brightnessService4, "notify::screen", () => {
    self.className = self.className.replace(/\boverflow\b/, "").trim();
    self.label = `${Math.round(brightnessService4.screen * 100)}`;
  });
  self.hook(brightnessService4, "notify::kbd", () => {
    self.className = self.className.replace(/\boverflow\b/, "").trim();
    self.label = `${Math.round(brightnessService4.kbd * 100)}`;
  });
  Variable.derive([bind(audioService6.defaultMicrophone, "volume")], () => {
    self.toggleClassName("overflow", audioService6.defaultMicrophone.volume > 1);
    self.label = `${Math.round(audioService6.defaultMicrophone.volume * 100)}`;
  });
  Variable.derive([bind(audioService6.defaultMicrophone, "mute")], () => {
    self.toggleClassName(
      "overflow",
      audioService6.defaultMicrophone.volume > 1 && (!configuration_default.theme.osd.muted_zero.value || audioService6.defaultMicrophone.mute === false)
    );
    const inputVolume = configuration_default.theme.osd.muted_zero.value && audioService6.defaultMicrophone.mute !== false ? 0 : Math.round(audioService6.defaultMicrophone.volume * 100);
    self.label = `${inputVolume}`;
  });
  Variable.derive([bind(audioService6.defaultSpeaker, "volume")], () => {
    self.toggleClassName("overflow", audioService6.defaultSpeaker.volume > 1);
    self.label = `${Math.round(audioService6.defaultSpeaker.volume * 100)}`;
  });
  Variable.derive([bind(audioService6.defaultSpeaker, "mute")], () => {
    self.toggleClassName(
      "overflow",
      audioService6.defaultSpeaker.volume > 1 && (!configuration_default.theme.osd.muted_zero.value || audioService6.defaultSpeaker.mute === false)
    );
    const speakerVolume = configuration_default.theme.osd.muted_zero.value && audioService6.defaultSpeaker.mute !== false ? 0 : Math.round(audioService6.defaultSpeaker.volume * 100);
    self.label = `${speakerVolume}`;
  });
};

// src/components/osd/label/index.tsx
var OSDLabel = () => {
  return /* @__PURE__ */ jsx2("box", { className: "osd-label-container", hexpand: true, vexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "osd-label",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      setup: setupOsdLabel,
      hexpand: true,
      vexpand: true
    }
  ) });
};

// src/components/osd/revealer/index.tsx
var { orientation } = configuration_default.theme.osd;
var VerticalOsd = ({ currentOrientation }) => /* @__PURE__ */ jsxs("box", { vertical: true, children: [
  /* @__PURE__ */ jsx2(OSDLabel, {}),
  /* @__PURE__ */ jsx2(OSDBar, { orientation: currentOrientation }),
  /* @__PURE__ */ jsx2(OSDIcon, {})
] });
var HorizontalOsd = ({ currentOrientation }) => /* @__PURE__ */ jsxs("box", { children: [
  /* @__PURE__ */ jsx2(OSDIcon, {}),
  /* @__PURE__ */ jsx2(OSDBar, { orientation: currentOrientation }),
  /* @__PURE__ */ jsx2(OSDLabel, {})
] });
var OsdRevealer = () => {
  const osdOrientation = bind(orientation).as((currentOrientation) => currentOrientation === "vertical");
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      transitionType: Gtk4.RevealerTransitionType.CROSSFADE,
      revealChild: false,
      setup: revealerSetup,
      children: /* @__PURE__ */ jsx2("box", { className: "osd-container", vertical: osdOrientation, children: bind(orientation).as((currentOrientation) => {
        if (currentOrientation === "vertical") {
          return /* @__PURE__ */ jsx2(VerticalOsd, { currentOrientation });
        }
        return /* @__PURE__ */ jsx2(HorizontalOsd, { currentOrientation });
      }) })
    }
  );
};

// src/components/osd/index.tsx
var { location: location2 } = configuration_default.theme.osd;
var osd_default2 = () => {
  return /* @__PURE__ */ jsx2(
    "window",
    {
      monitor: getOsdMonitor()(),
      name: "indicator",
      namespace: "indicator",
      className: "indicator",
      visible: true,
      layer: bind(configuration_default.tear).as((tear2) => tear2 ? Astal7.Layer.TOP : Astal7.Layer.OVERLAY),
      anchor: bind(location2).as((anchorPoint) => getPosition(anchorPoint)),
      setup: (self) => {
        getOsdMonitor().subscribe(() => {
          self.set_click_through(true);
        });
      },
      clickThrough: true,
      children: /* @__PURE__ */ jsx2(OsdRevealer, {})
    }
  );
};

// src/components/menus/shared/dropdown/helpers/helpers.ts
var handleRealization = async (name2) => {
  try {
    const appWindow = app_default.get_window(name2);
    if (!appWindow) {
      return;
    }
    const coords = [1e5, 1e5];
    await calculateMenuPosition(coords, name2);
    appWindow?.set_visible(true);
    while (Gtk4.events_pending()) {
      Gtk4.main_iteration();
    }
    appWindow?.set_visible(false);
    await calculateMenuPosition([0, 0], name2);
  } catch (error) {
    if (error instanceof Error) {
      console.error(`Error realizing ${name2}: ${error.message}`);
    }
    console.error(`Error realizing ${name2}: ${error}`);
  }
};

// src/services/display/bar/autoHide.ts
import AstalHyprland16 from "gi://AstalHyprland?version=0.1";

// src/services/display/bar/index.ts
var BarVisibility = class {
  static _toggleStates = {};
  /**
   * Gets the visibility state of a specific bar
   *
   * @param barName - The name identifier of the bar
   * @returns Whether the bar is visible (defaults to true if not set)
   */
  static get(barName) {
    return this._toggleStates[barName] ?? true;
  }
  /**
   * Sets the visibility state of a specific bar
   *
   * @param barName - The name identifier of the bar
   * @param isVisible - Whether the bar should be visible
   */
  static set(barName, isVisible) {
    this._toggleStates[barName] = isVisible;
  }
};

// src/services/display/bar/autoHide.ts
var BarAutoHideService = class _BarAutoHideService {
  static _instance;
  _workspaceService = WorkspaceService.getInstance();
  _hyprlandService = AstalHyprland16.get_default();
  _autoHide = configuration_default.bar.autoHide;
  _subscriptions = {
    workspace: void 0,
    client: void 0,
    autoHide: void 0
  };
  constructor() {
  }
  /**
   * Gets the singleton instance of the BarAutoHideService
   */
  static getInstance() {
    if (!this._instance) {
      this._instance = new _BarAutoHideService();
    }
    return this._instance;
  }
  /**
   * Initializes the auto-hide behavior for bars
   * Manages visibility based on window count, fullscreen state, and user preferences
   */
  initialize() {
    this.destroy();
    this._subscriptions.workspace = Variable.derive(
      [
        bind(this._autoHide),
        bind(this._hyprlandService, "workspaces"),
        bind(this._workspaceService.forceUpdater),
        bind(this._hyprlandService, "focusedWorkspace")
      ],
      (hideMode) => {
        if (hideMode === "never") {
          this._showAllBars();
        } else if (hideMode === "single-window") {
          this._updateBarVisibilityByWindowCount();
        }
      }
    );
    this._subscriptions.client = Variable.derive(
      [bind(this._hyprlandService, "focusedClient")],
      (currentClient) => {
        this._handleFullscreenClientVisibility(currentClient);
      }
    );
    this._subscriptions.autoHide = Variable.derive([bind(this._autoHide)], (hideMode) => {
      if (hideMode === "fullscreen") {
        this._updateBarVisibilityByFullscreen();
      }
    });
  }
  /**
   * Cleanup subscriptions and reset state
   */
  destroy() {
    Object.values(this._subscriptions).forEach((sub) => sub?.drop());
  }
  /**
   * Sets bar visibility for a specific monitor
   *
   * @param monitorId - The ID of the monitor whose bar visibility to set
   * @param isVisible - Whether the bar should be visible
   */
  _setBarVisibility(monitorId, isVisible) {
    const barName = `bar-${monitorId}`;
    if (BarVisibility.get(barName)) {
      app_default.get_window(barName)?.set_visible(isVisible);
    }
  }
  /**
   * Handles bar visibility when a client's fullscreen state changes
   *
   * @param client - The Hyprland client whose fullscreen state to monitor
   */
  _handleFullscreenClientVisibility(client) {
    if (client === null) {
      return;
    }
    const fullscreenBinding = bind(client, "fullscreen");
    Variable.derive([bind(fullscreenBinding)], (isFullScreen) => {
      if (this._autoHide.get() === "fullscreen") {
        this._setBarVisibility(client.monitor.id, !Boolean(isFullScreen));
      }
    });
  }
  /**
   * Shows bars on all monitors
   */
  _showAllBars() {
    const monitors = this._hyprlandService.get_monitors();
    monitors.forEach((monitor3) => {
      if (BarVisibility.get(`bar-${monitor3.id}`)) {
        this._setBarVisibility(monitor3.id, true);
      }
    });
  }
  /**
   * Updates bar visibility based on workspace window count
   */
  _updateBarVisibilityByWindowCount() {
    const monitors = this._hyprlandService.get_monitors();
    const activeWorkspaces = monitors.map((monitor3) => monitor3.active_workspace);
    activeWorkspaces.forEach((workspace) => {
      const hasOneClient = workspace.get_clients().length !== 1;
      this._setBarVisibility(workspace.monitor.id, hasOneClient);
    });
  }
  /**
   * Updates bar visibility based on workspace fullscreen state
   */
  _updateBarVisibilityByFullscreen() {
    this._hyprlandService.get_workspaces().forEach((workspace) => {
      this._setBarVisibility(workspace.monitor.id, !workspace.hasFullscreen);
    });
  }
};

// src/core/behaviors/batteryWarning.ts
import AstalBattery2 from "gi://AstalBattery?version=0.1";
var batteryService2 = AstalBattery2.get_default();
var {
  lowBatteryThreshold,
  lowBatteryNotification,
  lowBatteryNotificationText,
  lowBatteryNotificationTitle
} = configuration_default.menus.power;
function warnOnLowBattery() {
  let sentLowNotification = false;
  let sentHalfLowNotification = false;
  batteryService2.connect("notify::charging", () => {
    if (batteryService2.charging) {
      sentLowNotification = false;
      sentHalfLowNotification = false;
    }
  });
  batteryService2.connect("notify::percentage", () => {
    if (lowBatteryNotification.get() === void 0 || batteryService2.charging) {
      return;
    }
    const batteryPercentage = Math.floor(batteryService2.percentage * 100);
    const lowThreshold = lowBatteryThreshold.get();
    let sendNotification = false;
    if (!sentLowNotification && batteryPercentage <= lowThreshold) {
      sentLowNotification = true;
      sendNotification = true;
    }
    if (!sentHalfLowNotification && batteryPercentage <= lowThreshold / 2) {
      sentHalfLowNotification = true;
      sendNotification = true;
    }
    if (sendNotification) {
      SystemUtilities.notify({
        summary: lowBatteryNotificationTitle.get().replaceAll("$POWER_LEVEL", batteryPercentage.toString()),
        body: lowBatteryNotificationText.get().replaceAll("$POWER_LEVEL", batteryPercentage.toString()),
        iconName: icons_default.ui.warning,
        urgency: "critical"
      });
    }
  });
}

// src/core/behaviors/hyprlandRules.ts
import AstalHyprland17 from "gi://AstalHyprland?version=0.1";
var hyprlandService16 = AstalHyprland17.get_default();
var floatSettingsDialog = () => {
  hyprlandService16.message("keyword windowrulev2 float, title:^(hyprpanel-settings)$");
  hyprlandService16.connect("config-reloaded", () => {
    hyprlandService16.message("keyword windowrulev2 float, title:^(hyprpanel-settings)$");
  });
};
var floatFilePicker = () => {
  hyprlandService16.message("keyword windowrulev2 float, title:^((Save|Import) Hyprpanel.*)$");
  hyprlandService16.connect("config-reloaded", () => {
    hyprlandService16.message("keyword windowrulev2 float, title:^((Save|Import) Hyprpanel.*)$");
  });
};
var hyprlandSettings = () => {
  floatSettingsDialog();
  floatFilePicker();
};

// src/core/behaviors/index.ts
var autoHide2 = BarAutoHideService.getInstance();
var initializeSystemBehaviors = () => {
  warnOnLowBattery();
  autoHide2.initialize();
  hyprlandSettings();
};

// src/services/cli/commander/Registry.ts
var CommandRegistry = class {
  _commands = /* @__PURE__ */ new Map();
  /**
   * Registers a command. If a command with the same name or alias already exists,
   * it will throw an error.
   *
   * @param command - The command to register.
   * @throws If a command with the same name or alias already exists.
   */
  register(command) {
    if (this._commands.has(command.name)) {
      throw new Error(`Command "${command.name}" is already registered.`);
    }
    this._commands.set(command.name, command);
    if (command.aliases) {
      for (const alias of command.aliases) {
        if (this._commands.has(alias)) {
          throw new Error(`Alias "${alias}" is already in use.`);
        }
        this._commands.set(alias, command);
      }
    }
  }
  /**
   * Retrieves a command by its name or alias. Returns undefined if not found.
   *
   * @param commandName - The name or alias of the command to retrieve.
   * @returns The command if found, otherwise undefined.
   */
  get(commandName) {
    return this._commands.get(commandName);
  }
  /**
   * Retrieves all registered commands, ensuring each command is returned once even if it has aliases.
   *
   * @returns An array of all registered commands.
   */
  getAll() {
    const unique2 = new Set(this._commands.values());
    return Array.from(unique2);
  }
};

// src/services/cli/commander/Parser.ts
var CommandParser = class {
  _registry;
  /**
   * Constructs a CommandParser with the provided command registry.
   *
   * @param registry - The command registry containing available commands.
   */
  constructor(registry2) {
    this._registry = registry2;
  }
  /**
   * Parses the entire input string, returning the matching command and its arguments.
   *
   * @param input - The raw input string to parse.
   * @returns A parsed command object, including the command and its arguments.
   * @throws If no command token is found.
   * @throws If the command token is not registered.
   */
  parse(input) {
    const tokens = this._tokenize(input);
    if (tokens.length === 0) {
      throw new Error("No command provided.");
    }
    const commandName = tokens.shift() ?? "non-existent-command";
    const command = this._registry.get(commandName);
    if (!command) {
      throw new Error(
        `Unknown command: "${commandName}". Use "hyprpanel explain" for available commands.`
      );
    }
    const args = this._parseArgs(command, tokens);
    return { command, args };
  }
  /**
   * Splits the input string into tokens, respecting quotes.
   *
   * @param input - The raw input string to break into tokens.
   * @returns An array of tokens.
   */
  _tokenize(input) {
    const regex = /(?:[^\s"']+|"[^"]*"|'[^']*')+/g;
    const matches = input.match(regex);
    return matches ? matches.map((token) => this._stripQuotes(token)) : [];
  }
  /**
   * Removes surrounding quotes from a single token, if they exist.
   *
   * @param str - The token from which to strip leading or trailing quotes.
   * @returns The token without its outer quotes.
   */
  _stripQuotes(str) {
    return str.replace(/^["'](.+(?=["']$))["']$/, "$1");
  }
  /**
   * Parses the array of tokens into arguments based on the command's argument definitions.
   *
   * @param command - The command whose arguments are being parsed.
   * @param tokens - The list of tokens extracted from the input.
   * @returns An object mapping argument names to their parsed values.
   * @throws If required arguments are missing.
   * @throws If there are too many tokens for the command definition.
   */
  _parseArgs(command, tokens) {
    const args = {};
    let currentIndex = 0;
    for (const argDef of command.args) {
      if (currentIndex >= tokens.length) {
        if (argDef.required === true) {
          throw new Error(`Missing required argument: "${argDef.name}".`);
        }
        if (argDef.default !== void 0) {
          args[argDef.name] = argDef.default;
        }
        continue;
      }
      if (argDef.type === "object") {
        const { objectValue, nextIndex } = this._parseObjectTokens(tokens, currentIndex);
        args[argDef.name] = objectValue;
        currentIndex = nextIndex;
      } else {
        const value = tokens[currentIndex];
        currentIndex++;
        args[argDef.name] = this._convertType(value, argDef.type);
      }
    }
    if (currentIndex < tokens.length) {
      throw new Error(
        `Too many arguments for command "${command.name}". Expected at most ${command.args.length}.`
      );
    }
    return args;
  }
  /**
   * Accumulates tokens until braces are balanced to form a valid JSON string,
   * then parses the result.
   *
   * @param tokens - The list of tokens extracted from the input.
   * @param startIndex - The token index from which to begin JSON parsing.
   * @returns An object containing the parsed JSON object and the next token index.
   * @throws If the reconstructed JSON is invalid.
   */
  _parseObjectTokens(tokens, startIndex) {
    let braceCount = 0;
    let started = false;
    const objectTokens = [];
    let currentIndex = startIndex;
    while (currentIndex < tokens.length) {
      const token = tokens[currentIndex];
      currentIndex++;
      for (const char of token) {
        if (char === "{") braceCount++;
        if (char === "}") braceCount--;
      }
      objectTokens.push(token);
      if (started && braceCount === 0) break;
      if (token.includes("{")) started = true;
    }
    const objectString = objectTokens.join(" ");
    let parsed;
    try {
      parsed = JSON.parse(objectString);
    } catch {
      throw new Error(`Invalid JSON object: "${objectString}".`);
    }
    return { objectValue: parsed, nextIndex: currentIndex };
  }
  /**
   * Converts a single token to the specified argument type.
   *
   * @param value - The raw token to be converted.
   * @param type - The expected argument type.
   * @returns The converted value.
   * @throws If the token cannot be converted to the expected type.
   */
  _convertType(value, type) {
    switch (type) {
      case "number": {
        const num = Number(value);
        if (isNaN(num)) {
          throw new Error(`Expected a number but got "${value}".`);
        }
        return num;
      }
      case "boolean": {
        const lower = value.toLowerCase();
        if (lower === "true") return true;
        if (lower === "false") return false;
        throw new Error(`Expected a boolean (true/false) but got "${value}".`);
      }
      case "object": {
        try {
          return JSON.parse(value);
        } catch {
          throw new Error(`Invalid JSON object: "${value}".`);
        }
      }
      case "string":
      default:
        return value;
    }
  }
};

// src/services/cli/commander/RequestHandler.ts
var RequestHandler = class {
  _parser;
  /**
   * Creates an instance of RequestHandler.
   *
   * @param parser - The CommandParser instance to use.
   */
  constructor(parser2) {
    this._parser = parser2;
  }
  /**
   * Initializes the request handler with the given input and response callback.
   *
   * @param input - The input string to process.
   * @param response - The callback to handle the response.
   * @returns A promise that resolves when the request is handled.
   */
  async initializeRequestHandler(input, response) {
    try {
      const parsed = this._parser.parse(input);
      const { command, args } = parsed;
      const result = command.handler(args);
      if (result instanceof Promise) {
        const resolved = await result;
        response(this._formatOutput(resolved));
      } else {
        response(this._formatOutput(result));
      }
    } catch (error) {
      response(this._formatError(error));
    }
  }
  /**
   * Formats the output based on its type.
   *
   * @param output - The output to format.
   * @returns A string representation of the output.
   */
  _formatOutput(output) {
    if (typeof output === "string") {
      return output;
    } else if (typeof output === "number" || typeof output === "boolean") {
      return output.toString();
    } else if (typeof output === "object" && output !== null) {
      try {
        return JSON.stringify(output, null, 2);
      } catch {
        return "Unable to display object.";
      }
    } else {
      return String(output);
    }
  }
  /**
   * Formats the error based on its type.
   *
   * @param error - The error to format.
   * @returns A string representation of the error.
   */
  _formatError(error) {
    if (error instanceof Error) {
      return `Error: ${error.message}`;
    } else if (typeof error === "string") {
      return `Error: ${error}`;
    } else if (typeof error === "object" && error !== null) {
      try {
        return `Error: ${JSON.stringify(error, null, 2)}`;
      } catch {
        return "An unknown error occurred.";
      }
    } else {
      return `Error: ${String(error)}`;
    }
  }
};

// src/services/cli/commander/helpers/index.ts
var ANSI_RESET = "\x1B[0m";
var ANSI_BOLD = "\x1B[1m";
var ANSI_FG_RED = "\x1B[31m";
var ANSI_FG_GREEN = "\x1B[32m";
var ANSI_FG_YELLOW = "\x1B[33m";
var ANSI_FG_BLUE = "\x1B[34m";
var ANSI_FG_MAGENTA = "\x1B[35m";
var ANSI_FG_CYAN = "\x1B[36m";
function createExplainCommand(registry2) {
  return {
    name: "explain",
    aliases: ["e"],
    description: "Displays explain information for all commands or a specific command.",
    category: "General",
    args: [
      {
        name: "commandName",
        description: "Optional name of a command to get detailed info.",
        type: "string",
        required: false
      }
    ],
    /**
     * Handler for the explain command.
     *
     * @param args - The arguments passed to the command.
     * @returns The formatted explain message.
     */
    handler: (args) => {
      const commandName = args["commandName"];
      if (commandName !== void 0) {
        return formatCommandExplain(registry2, commandName);
      }
      return formatGlobalExplain(registry2);
    }
  };
}
function formatCommandExplain(registry2, commandName) {
  const cmd = registry2.get(commandName);
  if (!cmd) {
    return `${ANSI_FG_RED}\u2716 No such command: "${commandName}". Use "explain" to see all commands.${ANSI_RESET}
`;
  }
  let message = `${ANSI_BOLD}${ANSI_FG_YELLOW}Command: ${cmd.name}${ANSI_RESET}
`;
  if (cmd.aliases && cmd.aliases.length > 0) {
    const aliases = formatAliases(cmd.aliases);
    message += `${ANSI_FG_GREEN}Aliases:${ANSI_RESET} ${aliases}
`;
  }
  message += `${ANSI_FG_GREEN}Description:${ANSI_RESET} ${cmd.description}
`;
  message += `${ANSI_FG_GREEN}Category:${ANSI_RESET} ${cmd.category}
`;
  if (cmd.args.length > 0) {
    message += `${ANSI_FG_GREEN}Arguments:${ANSI_RESET}
`;
    const formattedArgs = formatArguments(cmd.args);
    message += formattedArgs;
  } else {
    message += `${ANSI_FG_GREEN}No positional arguments.${ANSI_RESET}`;
  }
  return message;
}
function formatGlobalExplain(registry2) {
  const allCommands = registry2.getAll();
  const categoryMap = organizeCommandsByCategory(allCommands);
  let explainMessage = `${ANSI_BOLD}${ANSI_FG_CYAN}Available HyprPanel Commands:${ANSI_RESET}
`;
  for (const [category, cmds] of Object.entries(categoryMap)) {
    explainMessage += `
${ANSI_BOLD}${ANSI_FG_BLUE}${category}${ANSI_RESET}
`;
    const formattedCommands = formatCommandList(cmds);
    explainMessage += formattedCommands;
  }
  explainMessage += `
${ANSI_FG_MAGENTA}Use "hyprpanel explain <commandName>" to get detailed information about a specific hyprpanel command.${ANSI_RESET}
`;
  return explainMessage.trim();
}
function organizeCommandsByCategory(commands) {
  const categoryMap = {};
  commands.forEach((cmd) => {
    if (categoryMap[cmd.category] === void 0) {
      categoryMap[cmd.category] = [];
    }
    categoryMap[cmd.category].push(cmd);
  });
  return categoryMap;
}
function formatCommandList(commands) {
  return commands.map((cmd) => {
    const aliasesText = cmd.aliases && cmd.aliases.length > 0 ? ` (${cmd.aliases.map((alias) => `${ANSI_FG_CYAN}${alias}${ANSI_RESET}`).join(", ")})` : "";
    return `  - ${ANSI_FG_YELLOW}${cmd.name}${ANSI_RESET}${aliasesText}: ${cmd.description}`;
  }).join("\n") + "\n";
}
function formatAliases(aliases) {
  return aliases.map((alias) => `${ANSI_FG_CYAN}${alias}${ANSI_RESET}`).join(", ");
}
function formatArguments(args) {
  return args.map((arg) => {
    const requirement = arg.required === true ? `${ANSI_FG_RED}(required)` : `${ANSI_FG_CYAN}(optional)`;
    const defaultValue2 = arg.default !== void 0 ? ` ${ANSI_FG_MAGENTA}[default: ${JSON.stringify(arg.default)}]${ANSI_RESET}` : "";
    return `  ${ANSI_FG_YELLOW}${arg.name}${ANSI_RESET}: ${arg.description} ${requirement}${defaultValue2}`;
  }).join("\n") + "\n";
}

// src/services/cli/helpers/wallpaper.ts
import GLib5 from "gi://GLib?version=2.0";
var wallpaperService3 = WallpaperService.getInstance();
var { EXISTS: EXISTS2, IS_REGULAR: IS_REGULAR2 } = GLib5.FileTest;
var { enable: enableWallpaper, image } = configuration_default.wallpaper;
function setWallpaper(filePath) {
  if (!(GLib5.file_test(filePath, EXISTS2) && GLib5.file_test(filePath, IS_REGULAR2))) {
    throw new Error("The input file is not a valid wallpaper.");
  }
  image.set(filePath);
  if (!enableWallpaper.get()) {
    return;
  }
  try {
    wallpaperService3.setWallpaper(filePath);
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(error.message);
    } else {
      throw new Error(`An error occurred while setting the wallpaper: ${error}`);
    }
  }
}

// src/services/cli/commander/commands/appearance/index.ts
var appearanceCommands = [
  {
    name: "setWallpaper",
    aliases: ["sw"],
    description: "Sets the wallpaper based on the provided input.",
    category: "Appearance",
    args: [
      {
        name: "path",
        description: "Path to the wallpaper image.",
        type: "string",
        required: true
      }
    ],
    handler: (args) => {
      try {
        setWallpaper(args["path"]);
        return "Wallpaper set successfully.";
      } catch (error) {
        if (error instanceof Error) {
          return `Error setting wallpaper: ${error.message}`;
        }
        return `Error setting wallpaper: ${error}`;
      }
    }
  },
  {
    name: "useTheme",
    aliases: ["ut"],
    description: "Sets the theme based on the provided input.",
    category: "Appearance",
    args: [
      {
        name: "path",
        description: "Path to the JSON file of the HyprPanel theme.",
        type: "string",
        required: true
      }
    ],
    handler: (args) => {
      try {
        useTheme(args["path"]);
        return "Theme set successfully.";
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "setLayout",
    aliases: ["slo"],
    description: "Sets the layout of the modules on the bar.",
    category: "Appearance",
    args: [
      {
        name: "layout",
        description: "Bar layout to apply. Wiki: https://hyprpanel.com/configuration/panel.html#layouts",
        type: "object",
        required: true
      }
    ],
    handler: (args) => {
      try {
        setLayout(args["layout"]);
        return "Layout applied successfully.";
      } catch (error) {
        errorHandler(error);
      }
    }
  }
];

// src/services/cli/commander/commands/system/index.ts
import AstalNotifd4 from "gi://AstalNotifd?version=0.1";
import AstalWp7 from "gi://AstalWp?version=0.1";

// src/services/cli/commander/commands/system/checkDependencies.ts
var RED = "\x1B[31m";
var GREEN = "\x1B[32m";
var YELLOW = "\x1B[33m";
var RESET = "\x1B[0m";
var BOLD = "\x1B[1m";
var STATUS_INSTALLED = "(INSTALLED)";
var STATUS_ACTIVE = "(ACTIVE)";
var STATUS_DISABLED = "(DISABLED)";
var STATUS_MISSING = "(MISSING)";
function colorText(text, color2) {
  return `${color2}${text}${RESET}`;
}
function getDependencyStatus(dep) {
  let status;
  switch (dep.type) {
    case "executable":
      status = SystemUtilities.checkExecutable(dep.check) ? "INSTALLED" : "MISSING";
      break;
    case "library":
      status = SystemUtilities.checkLibrary(dep.check) ? "INSTALLED" : "MISSING";
      break;
    case "service":
      status = SystemUtilities.checkServiceStatus(dep.check);
      break;
    default:
      status = "MISSING";
  }
  let color2;
  let textStatus;
  switch (status) {
    case "ACTIVE":
      textStatus = STATUS_ACTIVE;
      color2 = GREEN;
      break;
    case "INSTALLED":
      textStatus = STATUS_INSTALLED;
      color2 = GREEN;
      break;
    case "DISABLED":
      textStatus = STATUS_DISABLED;
      color2 = YELLOW;
      break;
    case "MISSING":
    default:
      textStatus = STATUS_MISSING;
      color2 = RED;
      break;
  }
  if (dep.description === void 0) {
    return `  ${colorText(textStatus, color2)} ${dep.package}`;
  }
  return `  ${colorText(textStatus, color2)} ${dep.package}: ${dep.description ?? ""}`;
}
function checkDependencies() {
  try {
    const dependencies = [
      {
        package: "wireplumber",
        required: true,
        type: "executable",
        check: ["wireplumber"]
      },
      {
        package: "libgtop",
        required: true,
        type: "library",
        check: ["gtop-2.0"]
      },
      {
        package: "bluez",
        required: true,
        type: "service",
        check: ["bluetooth.service"]
      },
      {
        package: "bluez-utils",
        required: true,
        type: "executable",
        check: ["bluetoothctl"]
      },
      {
        package: "networkmanager",
        required: true,
        type: "service",
        check: ["NetworkManager.service"]
      },
      {
        package: "dart-sass",
        required: true,
        type: "executable",
        check: ["sass"]
      },
      {
        package: "wl-clipboard",
        required: true,
        type: "executable",
        check: ["wl-copy", "wl-paste"]
      },
      {
        package: "upower",
        required: true,
        type: "service",
        check: ["upower.service"]
      },
      {
        package: "aylurs-gtk-shell",
        required: true,
        type: "executable",
        check: ["ags"]
      },
      {
        package: "python",
        required: false,
        type: "executable",
        check: ["python", "python3"],
        description: "GPU usage tracking (NVidia only)"
      },
      {
        package: "python-gpustat",
        required: false,
        type: "executable",
        check: ["gpustat"],
        description: "GPU usage tracking (NVidia only)"
      },
      {
        package: "pywal",
        required: false,
        type: "executable",
        check: ["wal"],
        description: "Pywal hook for wallpapers"
      },
      {
        package: "pacman-contrib",
        required: false,
        type: "executable",
        check: ["paccache", "rankmirrors"],
        description: "Checking for pacman updates"
      },
      {
        package: "power-profiles-daemon",
        required: false,
        type: "service",
        check: ["power-profiles-daemon.service"],
        description: "Switch power profiles"
      },
      {
        package: "swww",
        required: false,
        type: "executable",
        check: ["swww"],
        description: "Setting wallpapers"
      },
      {
        package: "grimblast",
        required: false,
        type: "executable",
        check: ["grimblast"],
        description: "For the snapshot shortcut"
      },
      {
        package: "brightnessctl",
        required: false,
        type: "executable",
        check: ["brightnessctl"],
        description: "To control keyboard and screen brightness"
      },
      {
        package: "btop",
        required: false,
        type: "executable",
        check: ["btop"],
        description: "To view system resource usage"
      },
      {
        package: "wf-recorder",
        required: false,
        type: "executable",
        check: ["wf-recorder"],
        description: "To use the built-in screen recorder"
      },
      {
        package: "hyprpicker",
        required: false,
        type: "executable",
        check: ["hyprpicker"],
        description: "To use the preset color picker shortcut"
      },
      {
        package: "matugen",
        required: false,
        type: "executable",
        check: ["matugen"],
        description: "To use wallpaper-based color schemes"
      }
    ];
    let output = `${BOLD}Required Dependencies:${RESET}
`;
    for (const dep of dependencies.filter((d) => d.required)) {
      output += getDependencyStatus(dep) + "\n";
    }
    output += `
${BOLD}Optional Dependencies:${RESET}
`;
    for (const dep of dependencies.filter((d) => !d.required)) {
      output += getDependencyStatus(dep) + "\n";
    }
    return output;
  } catch (error) {
    errorHandler(error);
  }
}

// src/services/cli/helpers/systray.ts
import AstalTray2 from "gi://AstalTray";
var systemtray2 = AstalTray2.get_default();
function getSystrayItems() {
  try {
    const items = systemtray2.get_items().map((systrayItem) => systrayItem.id).join("\n");
    return items;
  } catch (error) {
    errorHandler(error);
  }
}

// src/services/cli/commander/commands/system/listSensors.ts
function listCpuTempSensors() {
  const sensors = CpuTempSensorDiscovery.getAllSensors();
  const cpuTempService2 = new cputemp_default();
  cpuTempService2.initialize();
  const currentSensor = cpuTempService2.currentSensorPath;
  let outputMessage = "";
  outputMessage += "Available CPU Temperature Sensors:\n";
  outputMessage += "==================================\n";
  if (sensors.length === 0) {
    outputMessage += "No temperature sensors found on the system.\n";
    return outputMessage;
  }
  for (const sensor3 of sensors) {
    const isCurrent = sensor3.path === currentSensor;
    const marker = isCurrent ? " [CURRENT]" : "";
    outputMessage += `${sensor3.type.padEnd(8)} | ${sensor3.name.padEnd(20)} | ${sensor3.path}${marker}
`;
  }
  outputMessage += `Auto-discovered sensor: ${CpuTempSensorDiscovery.discover() || "None"}
`;
  cpuTempService2.destroy();
  return outputMessage;
}

// src/services/cli/commander/commands/system/index.ts
var { clearDelay } = configuration_default.notifications;
var notifdService3 = AstalNotifd4.get_default();
var audio = AstalWp7.get_default();
var utilityCommands = [
  {
    name: "systrayItems",
    aliases: ["sti"],
    description: "Gets a list of IDs for the current applications in the system tray.",
    category: "System",
    args: [],
    handler: () => {
      try {
        return getSystrayItems() ?? "No items found!";
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "clearNotifications",
    aliases: ["cno"],
    description: "Clears all of the notifications that currently exist.",
    category: "System",
    args: [],
    handler: () => {
      try {
        const allNotifications = notifdService3.get_notifications();
        clearNotifications(allNotifications, clearDelay.get());
        return "Notifications cleared successfully.";
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "toggleDnd",
    aliases: ["dnd"],
    description: "Toggled the Do Not Disturb mode for notifications.",
    category: "System",
    args: [],
    handler: () => {
      try {
        notifdService3.set_dont_disturb(!notifdService3.dontDisturb);
        return notifdService3.dontDisturb ? "Enabled" : "Disabled";
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "adjustVolume",
    aliases: ["vol"],
    description: "Adjusts the volume of the default audio output device.",
    category: "System",
    args: [
      {
        name: "volume",
        description: "A positive or negative number to adjust the volume by.",
        type: "number",
        required: true
      }
    ],
    handler: (args) => {
      try {
        const speaker = audio?.defaultSpeaker;
        if (speaker === void 0) {
          throw new Error("A default speaker was not found.");
        }
        const volumeInput = Number(args["volume"]) / 100;
        if (configuration_default.menus.volume.raiseMaximumVolume.get()) {
          speaker.set_volume(Math.min(speaker.volume + volumeInput, 1.5));
        } else {
          speaker.set_volume(Math.min(speaker.volume + volumeInput, 1));
        }
        return Math.round((speaker.volume + volumeInput) * 100);
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "isInhibiting",
    aliases: ["isi"],
    description: "Returns the status of the Idle Inhibitor.",
    category: "System",
    args: [],
    handler: () => {
      try {
        return idleInhibit.get();
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "idleInhibit",
    aliases: ["idi"],
    description: "Enables/Disables the Idle Inhibitor. Toggles the Inhibitor if no parameter is provided.",
    category: "System",
    args: [
      {
        name: "shouldInhibit",
        description: "The boolean value that enables/disables the inhibitor.",
        type: "boolean",
        required: false
      }
    ],
    handler: (args) => {
      try {
        const shouldInhibit = args["shouldInhibit"] ?? idleInhibit.get() === false;
        idleInhibit.set(Boolean(shouldInhibit));
        return idleInhibit.get();
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "migrateConfig",
    aliases: ["mcfg"],
    description: "Migrates the configuration file from the old location to the new one.",
    category: "System",
    args: [],
    handler: () => {
      const oldPath = `${default2.get_user_cache_dir()}/ags/hyprpanel/options.json`;
      try {
        const oldFile = Gio.File.new_for_path(oldPath);
        const newFile = Gio.File.new_for_path(CONFIG_FILE);
        if (oldFile.query_exists(null)) {
          oldFile.move(newFile, Gio.FileCopyFlags.OVERWRITE, null, null);
          return `Configuration file moved to ${CONFIG_FILE}`;
        } else {
          return `Old configuration file does not exist at ${oldPath}`;
        }
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "checkDependencies",
    aliases: ["chd"],
    description: "Checks the status of required and optional dependencies.",
    category: "System",
    args: [],
    handler: () => {
      try {
        return checkDependencies();
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "listCpuSensors",
    aliases: ["lcs"],
    description: "Lists all available CPU temperature sensors and shows the current one.",
    category: "System",
    args: [],
    handler: () => {
      try {
        return listCpuTempSensors();
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "restart",
    aliases: ["r"],
    description: "Restarts HyprPanel.",
    category: "System",
    args: [],
    handler: () => {
      try {
        execAsync('bash -c "hyprpanel -q; hyprpanel"');
        return "";
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "quit",
    aliases: ["q"],
    description: "Quits HyprPanel.",
    category: "System",
    args: [],
    handler: () => {
      try {
        execAsync('bash -c "hyprpanel -q"');
        return "";
      } catch (error) {
        errorHandler(error);
      }
    }
  }
];

// src/services/cli/commander/commands/windowManagement/index.ts
var windowManagementCommands = [
  {
    name: "isWindowVisible",
    aliases: ["iwv"],
    description: "Checks if a specified window is visible.",
    category: "Window Management",
    args: [
      {
        name: "window",
        description: "Name of the window to check.",
        type: "string",
        required: true
      }
    ],
    handler: (args) => {
      return isWindowVisible(args["window"]);
    }
  },
  {
    name: "toggleWindow",
    aliases: ["t"],
    description: "Toggles the visibility of a specified window.",
    category: "Window Management",
    args: [
      {
        name: "window",
        description: "The name of the window to toggle.",
        type: "string",
        required: true
      }
    ],
    handler: (args) => {
      try {
        const windowName = args["window"];
        const foundWindow = app_default.get_window(windowName);
        if (!foundWindow) {
          throw new Error(`Window ${args["window"]} not found.`);
        }
        const windowStatus = foundWindow.visible ? "hidden" : "visible";
        app_default.toggle_window(windowName);
        BarVisibility.set(windowName, windowStatus === "visible");
        return windowStatus;
      } catch (error) {
        errorHandler(error);
      }
    }
  },
  {
    name: "listWindows",
    aliases: ["lw"],
    description: "Gets a list of all HyprPanel windows.",
    category: "Window Management",
    args: [],
    handler: () => {
      try {
        const windowList = app_default.get_windows().map((window) => window.name);
        return windowList.join("\n");
      } catch (error) {
        errorHandler(error);
      }
    }
  }
];

// src/services/cli/commander/commands/modules/media/index.ts
var mediaPlayerService = MediaPlayerService.getInstance();
var mediaCommands = [
  {
    name: "playPause",
    aliases: ["pp"],
    description: "Plays or Pauses the active media player.",
    category: "Media",
    args: [],
    handler: () => {
      try {
        mediaPlayerService.activePlayer.get()?.play_pause();
        const playbackStatus2 = mediaPlayerService.activePlayer.get()?.playback_status;
        return playbackStatus2 === 0 ? "Paused" : "Playing";
      } catch (error) {
        errorHandler(error);
      }
    }
  }
];

// src/services/cli/commander/InitializeCommand.ts
function initializeCommands(registry2) {
  const commandList = [
    ...appearanceCommands,
    ...utilityCommands,
    ...windowManagementCommands,
    ...mediaCommands
  ];
  commandList.forEach((command) => registry2.register(command));
  registry2.register(createExplainCommand(registry2));
}

// src/services/cli/commander/index.ts
var registry = new CommandRegistry();
initializeCommands(registry);
var parser = new CommandParser(registry);
var handler = new RequestHandler(parser);
function runCLI(input, response) {
  handler.initializeRequestHandler(input, response).catch((err) => {
    response({ error: err instanceof Error ? err.message : String(err) });
  });
}

// src/components/menus/shared/popup/layouts.ts
var POPUP_LAYOUTS = [
  "center",
  "top",
  "top-right",
  "top-center",
  "top-left",
  "bottom-left",
  "bottom-center",
  "bottom-right"
];

// src/components/menus/shared/popup/index.tsx
var Padding = ({ name: name2, opts }) => /* @__PURE__ */ jsx2(
  "eventbox",
  {
    className: opts?.className ?? "",
    hexpand: true,
    vexpand: typeof opts?.vexpand === "boolean" ? opts.vexpand : true,
    canFocus: false,
    setup: (self) => self.connect("button-press-event", () => app_default.toggle_window(name2)),
    children: /* @__PURE__ */ jsx2("box", {})
  }
);
var PopupRevealer = ({ name: name2, child, transition: transition10 }) => /* @__PURE__ */ jsx2("box", { css: "padding: 1px", children: /* @__PURE__ */ jsx2(
  "revealer",
  {
    transitionType: transition10,
    transition_duration: 200,
    setup: (self) => {
      app_default.connect("window-toggled", (app) => {
        self.revealChild = app.get_window(name2)?.is_visible() ?? false;
      });
    },
    children: /* @__PURE__ */ jsx2("box", { className: `window-content ${name2}-window`, children: child })
  }
) });
var Layout = (name2, child, transition10) => ({
  center: () => /* @__PURE__ */ jsxs("centerbox", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("centerbox", { vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2 }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  top: () => /* @__PURE__ */ jsxs("centerbox", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { vertical: true, children: [
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "top-right": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] })
  ] }),
  "top-center": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2, opts: { vexpand: false, className: "event-top-padding" } }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "top-left": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 }),
      /* @__PURE__ */ jsx2(Padding, { name: name2 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "bottom-left": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2 }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "bottom-center": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2 }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 })
    ] }),
    /* @__PURE__ */ jsx2(Padding, { name: name2 })
  ] }),
  "bottom-right": () => /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(Padding, { name: name2 }),
    /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
      /* @__PURE__ */ jsx2(Padding, { name: name2 }),
      /* @__PURE__ */ jsx2(PopupRevealer, { name: name2, child, transition: transition10 })
    ] })
  ] })
});
var isValidLayout2 = (layout) => {
  return POPUP_LAYOUTS.includes(layout);
};
var popup_default = ({
  name: name2,
  child = /* @__PURE__ */ jsx2("box", {}),
  layout = "center",
  transition: transition10 = Gtk4.RevealerTransitionType.NONE,
  exclusivity = Astal7.Exclusivity.IGNORE,
  ...props
}) => {
  const layoutFn = isValidLayout2(layout) ? layout : "center";
  const layoutWidget = Layout(name2, child, transition10)[layoutFn]();
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: name2,
      namespace: name2,
      className: `${name2} popup-window`,
      onKeyPressEvent: (_, event) => {
        const key = event.get_keyval()[1];
        if (key === Gdk.KEY_Escape) {
          app_default.get_window(name2)?.set_visible(false);
        }
      },
      visible: false,
      keymode: Astal7.Keymode.ON_DEMAND,
      exclusivity,
      application: app_default,
      layer: Astal7.Layer.TOP,
      anchor: Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.BOTTOM | Astal7.WindowAnchor.RIGHT | Astal7.WindowAnchor.LEFT,
      ...props,
      children: layoutWidget
    }
  );
};

// src/components/menus/power/helpers/actions.ts
var { sleep, reboot, logout, shutdown } = configuration_default.menus.dashboard.powermenu;
var _title, _cmd;
var PowerMenu = class extends GObject4.Object {
  constructor() {
    super(...arguments);
    __privateAdd(this, _title, "");
    __privateAdd(this, _cmd, "");
    __publicField(this, "shutdown", () => {
      this.action("shutdown");
    });
    __publicField(this, "exec", () => {
      app_default.get_window("verification")?.set_visible(false);
      execAsync(__privateGet(this, _cmd));
    });
  }
  get title() {
    return __privateGet(this, _title);
  }
  get cmd() {
    return __privateGet(this, _cmd);
  }
  action(action) {
    [__privateWrapper(this, _cmd)._, __privateWrapper(this, _title)._] = {
      sleep: [sleep.get(), "Sleep"],
      reboot: [reboot.get(), "Reboot"],
      logout: [logout.get(), "Log Out"],
      shutdown: [shutdown.get(), "Shutdown"]
    }[action];
    this.notify("cmd");
    this.notify("title");
    app_default.get_window("powermenu")?.set_visible(false);
    app_default.get_window("verification")?.set_visible(true);
  }
  customAction(action, cmnd) {
    [__privateWrapper(this, _cmd)._, __privateWrapper(this, _title)._] = [cmnd, action];
    this.notify("cmd");
    this.notify("title");
    app_default.get_window("powermenu")?.set_visible(false);
    app_default.get_window("verification")?.set_visible(true);
  }
};
_title = new WeakMap();
_cmd = new WeakMap();
__decorateClass([
  property(String)
], PowerMenu.prototype, "title", 1);
__decorateClass([
  property(String)
], PowerMenu.prototype, "cmd", 1);
PowerMenu = __decorateClass([
  register({ GTypeName: "PowerMenu" })
], PowerMenu);
var powermenu = new PowerMenu();
var actions_default = powermenu;

// src/components/menus/power/index.tsx
var { transition: transition4 } = configuration_default.menus;
var SysButton = ({ action, label: label16 }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: `widget-button powermenu-button-${action}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          actions_default.action(action);
        }
      },
      children: /* @__PURE__ */ jsxs("box", { className: "system-button widget-box", vertical: true, vexpand: true, valign: Gtk4.Align.FILL, children: [
        /* @__PURE__ */ jsx2(
          "icon",
          {
            className: `system-button_icon txt-icon ${action}`,
            icon: icons_default.powermenu[action],
            vexpand: true
          }
        ),
        /* @__PURE__ */ jsx2("label", { className: `system-button_label ${action}`, label: label16, vexpand: true })
      ] })
    }
  );
};
var power_default5 = () => /* @__PURE__ */ jsx2(
  popup_default,
  {
    name: "powermenu",
    transition: bind(transition4).as((transition10) => RevealerTransitionMap[transition10]),
    children: /* @__PURE__ */ jsxs("box", { className: "powermenu horizontal", children: [
      /* @__PURE__ */ jsx2(SysButton, { action: "shutdown", label: "SHUTDOWN" }),
      /* @__PURE__ */ jsx2(SysButton, { action: "logout", label: "LOG OUT" }),
      /* @__PURE__ */ jsx2(SysButton, { action: "reboot", label: "REBOOT" }),
      /* @__PURE__ */ jsx2(SysButton, { action: "sleep", label: "SLEEP" })
    ] })
  }
);

// src/components/menus/power/verification.tsx
var verification_default = () => /* @__PURE__ */ jsx2(popup_default, { name: "verification", transition: Gtk4.RevealerTransitionType.CROSSFADE, layout: "center", children: /* @__PURE__ */ jsx2("box", { className: "verification", expand: false, children: /* @__PURE__ */ jsxs("box", { className: "verification-content", expand: true, vertical: true, children: [
  /* @__PURE__ */ jsxs("box", { className: "text-box", vertical: true, children: [
    /* @__PURE__ */ jsx2("label", { className: "title", label: bind(actions_default, "title").as((t) => t.toUpperCase()) }),
    /* @__PURE__ */ jsx2(
      "label",
      {
        className: "desc",
        label: bind(actions_default, "title").as(
          (p) => `Are you sure you want to ${p.toLowerCase()}?`
        )
      }
    )
  ] }),
  /* @__PURE__ */ jsxs("box", { className: "buttons horizontal", vexpand: true, valign: Gtk4.Align.END, homogeneous: true, children: [
    /* @__PURE__ */ jsx2("button", { className: "verification-button bar-verification_yes", onClicked: actions_default.exec, children: /* @__PURE__ */ jsx2("label", { label: "Yes" }) }),
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "verification-button bar-verification_no",
        onClicked: () => app_default.toggle_window("verification"),
        children: /* @__PURE__ */ jsx2("label", { label: "No" })
      }
    )
  ] })
] }) }) });

// src/components/menus/shared/dropdown/helpers/eventBoxes.tsx
var EventBoxPadding = ({ className, windowName }) => {
  return /* @__PURE__ */ jsx2(
    "eventbox",
    {
      className,
      hexpand: true,
      vexpand: false,
      canFocus: false,
      setup: (self) => {
        self.connect("button-press-event", () => app_default.toggle_window(windowName));
      },
      children: /* @__PURE__ */ jsx2("box", {})
    }
  );
};
var BarEventMargins = ({ windowName, location: location4 = "top" }) => {
  if (location4 === "top") {
    return /* @__PURE__ */ jsxs("box", { className: "event-box-container", children: [
      /* @__PURE__ */ jsx2(EventBoxPadding, { className: "mid-eb event-top-padding-static", windowName }),
      /* @__PURE__ */ jsx2(EventBoxPadding, { className: "mid-eb event-top-padding", windowName })
    ] });
  } else {
    return /* @__PURE__ */ jsx2("box", { className: "event-box-container", children: /* @__PURE__ */ jsx2(EventBoxPadding, { className: "mid-eb event-bottom-padding-static", windowName }) });
  }
};

// src/components/menus/shared/dropdown/index.tsx
var { location: location3 } = configuration_default.theme.bar;
var dropdown_default = ({
  name: name2,
  child,
  transition: transition10,
  exclusivity = Astal7.Exclusivity.IGNORE,
  ...props
}) => {
  const locationMap = {
    top: Astal7.WindowAnchor.TOP,
    bottom: Astal7.WindowAnchor.BOTTOM
  };
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: name2,
      namespace: name2,
      className: `${name2} dropdown-menu`,
      onKeyPressEvent: (_, event) => {
        const key = event.get_keyval()[1];
        if (key === Gdk.KEY_Escape) {
          app_default.get_window(name2)?.set_visible(false);
        }
      },
      visible: false,
      application: app_default,
      keymode: Astal7.Keymode.ON_DEMAND,
      exclusivity,
      layer: Astal7.Layer.TOP,
      anchor: bind(location3).as((ln) => {
        if (locationMap[ln] === Astal7.WindowAnchor.TOP) {
          return Astal7.WindowAnchor.TOP | Astal7.WindowAnchor.LEFT;
        }
        if (locationMap[ln] === Astal7.WindowAnchor.BOTTOM) {
          return Astal7.WindowAnchor.BOTTOM | Astal7.WindowAnchor.LEFT;
        }
      }),
      ...props,
      children: /* @__PURE__ */ jsx2(
        "eventbox",
        {
          className: "parent-event",
          onButtonPressEvent: (_, event) => {
            const buttonClicked = event.get_button()[1];
            if (buttonClicked === Gdk.BUTTON_PRIMARY || buttonClicked === Gdk.BUTTON_SECONDARY) {
              app_default.get_window(name2)?.set_visible(false);
            }
          },
          children: /* @__PURE__ */ jsxs("box", { className: "top-eb", vertical: true, children: [
            bind(location3).as((lcn) => {
              if (locationMap[lcn] === Astal7.WindowAnchor.TOP) {
                return /* @__PURE__ */ jsx2(BarEventMargins, { windowName: name2 });
              }
              return /* @__PURE__ */ jsx2("box", {});
            }),
            /* @__PURE__ */ jsx2(
              "eventbox",
              {
                className: "in-eb menu-event-box",
                onButtonPressEvent: (_, event) => {
                  const buttonClicked = event.get_button()[1];
                  if (buttonClicked === Gdk.BUTTON_PRIMARY || buttonClicked === Gdk.BUTTON_SECONDARY) {
                    return true;
                  }
                },
                setup: (self) => {
                  globalEventBoxes.set({
                    ...globalEventBoxes.get(),
                    [name2]: self
                  });
                },
                children: /* @__PURE__ */ jsx2("box", { className: "dropdown-menu-container", css: "padding: 1px; margin: -1px;", children: /* @__PURE__ */ jsx2(
                  "revealer",
                  {
                    revealChild: false,
                    setup: (self) => {
                      app_default.connect("window-toggled", (_, window) => {
                        self.set_reveal_child(window.visible);
                      });
                    },
                    transitionType: transition10,
                    transitionDuration: bind(configuration_default.menus.transitionTime),
                    children: /* @__PURE__ */ jsx2("box", { className: "dropdown-content", halign: Gtk4.Align.CENTER, expand: true, canFocus: true, children: child })
                  }
                ) })
              }
            ),
            bind(location3).as((lcn) => {
              if (locationMap[lcn] === Astal7.WindowAnchor.BOTTOM) {
                return /* @__PURE__ */ jsx2(BarEventMargins, { windowName: name2 });
              }
              return /* @__PURE__ */ jsx2("box", {});
            })
          ] })
        }
      )
    }
  );
};

// src/components/menus/audio/utils.ts
var speakerIcons = {
  101: "audio-volume-overamplified-symbolic",
  66: "audio-volume-high-symbolic",
  34: "audio-volume-medium-symbolic",
  1: "audio-volume-low-symbolic",
  0: "audio-volume-muted-symbolic"
};
var inputIcons = {
  101: "microphone-sensitivity-high-symbolic",
  66: "microphone-sensitivity-high-symbolic",
  34: "microphone-sensitivity-medium-symbolic",
  1: "microphone-sensitivity-low-symbolic",
  0: "microphone-disabled-symbolic"
};
var getIcon3 = (audioVol, isMuted) => {
  const thresholds = [101, 66, 34, 1, 0];
  const icon14 = isMuted ? 0 : thresholds.find((threshold) => threshold <= audioVol * 100) ?? 0;
  return {
    spkr: speakerIcons[icon14],
    mic: inputIcons[icon14]
  };
};

// src/components/menus/audio/active/sliderItem/SliderIcon.tsx
var SliderIcon = ({ type, device }) => {
  const iconBinding = Variable.derive([bind(device, "volume"), bind(device, "mute")], (volume, isMuted) => {
    const iconType = type === "playback" ? "spkr" : "mic";
    const effectiveVolume = volume > 0 ? volume : 100;
    const mutedState = volume > 0 ? isMuted : true;
    return getIcon3(effectiveVolume, mutedState)[iconType];
  });
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(device, "mute").as(
        (isMuted) => `menu-active-button ${type} ${isMuted ? "muted" : ""}`
      ),
      vexpand: false,
      valign: Gtk4.Align.END,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          device.set_mute(!device.mute);
        }
      },
      onDestroy: () => {
        iconBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("icon", { className: `menu-active-icon ${type}`, icon: iconBinding() })
    }
  );
};

// src/components/menus/audio/active/sliderItem/Slider.tsx
var { raiseMaximumVolume } = configuration_default.menus.volume;
var Slider2 = ({ device, type }) => {
  return /* @__PURE__ */ jsxs("box", { vertical: true, children: [
    /* @__PURE__ */ jsx2(
      "label",
      {
        className: `menu-active ${type}`,
        halign: Gtk4.Align.START,
        truncate: true,
        hexpand: true,
        wrap: true,
        label: bind(device, "description").as(
          (description) => capitalizeFirstLetter(description ?? `Unknown ${type} Device`)
        )
      }
    ),
    /* @__PURE__ */ jsx2(
      "slider",
      {
        value: bind(device, "volume"),
        className: `menu-active-slider menu-slider ${type}`,
        drawValue: false,
        hexpand: true,
        min: 0,
        max: type === "playback" ? bind(raiseMaximumVolume).as((raise) => raise ? 1.5 : 1) : 1,
        onDragged: ({ value, dragging }) => {
          if (dragging) {
            device.set_volume(value);
            device.set_mute(false);
          }
        },
        setup: (self) => {
          self.connect("scroll-event", (_, event) => {
            if (isScrollUp(event)) {
              const newVolume = device.volume + 0.05;
              const minVolume = raiseMaximumVolume.get() ? 1.5 : 1;
              device.set_volume(Math.min(newVolume, minVolume));
            }
            if (isScrollDown(event)) {
              const newVolume = device.volume - 0.05;
              device.set_volume(newVolume);
            }
          });
        }
      }
    )
  ] });
};

// src/components/menus/audio/active/sliderItem/SliderPercentage.tsx
var SliderPercentage = ({ type, device }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: `menu-active-percentage ${type}`,
      valign: Gtk4.Align.END,
      label: bind(device, "volume").as((vol) => `${Math.round(vol * 100)}%`)
    }
  );
};

// src/components/menus/audio/active/sliderItem/SliderItem.tsx
var SliderItem = ({ type, device }) => {
  return /* @__PURE__ */ jsx2("box", { className: `menu-active-container ${type}`, vertical: true, children: /* @__PURE__ */ jsxs("box", { className: `menu-slider-container ${type}`, children: [
    /* @__PURE__ */ jsx2(SliderIcon, { type, device }),
    /* @__PURE__ */ jsx2(Slider2, { type, device }),
    /* @__PURE__ */ jsx2(SliderPercentage, { type, device })
  ] }) });
};

// src/components/menus/audio/active/devices/index.tsx
import AstalWp8 from "gi://AstalWp?version=0.1";
var wireplumber7 = AstalWp8.get_default();
var audioService7 = wireplumber7.audio;
var ActiveDeviceContainer = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section selected", name: "devices" /* DEVICES */, vertical: true, children });
};
var ActiveDevices = () => {
  return /* @__PURE__ */ jsxs(ActiveDeviceContainer, { children: [
    /* @__PURE__ */ jsx2(SliderItem, { type: "playback", device: audioService7.defaultSpeaker }),
    /* @__PURE__ */ jsx2(SliderItem, { type: "input", device: audioService7.defaultMicrophone })
  ] });
};

// src/components/menus/audio/active/playbacks/index.tsx
import AstalWp9 from "gi://AstalWp?version=0.1";
var wireplumber8 = AstalWp9.get_default();
var audioService8 = wireplumber8.audio;
var NoStreams = () => {
  return /* @__PURE__ */ jsx2("label", { className: "no-playbacks dim", label: "No active playbacks found.", expand: true });
};
var ActivePlaybacks = () => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section selected", name: "playbacks" /* PLAYBACKS */, vertical: true, children: /* @__PURE__ */ jsx2("scrollable", { className: "menu-scroller active-playbacks-scrollable", children: /* @__PURE__ */ jsx2("box", { vertical: true, children: bind(audioService8, "streams").as((streams) => {
    if (streams === null || streams.length === 0) {
      return /* @__PURE__ */ jsx2(NoStreams, {});
    }
    const currentStreams = streams;
    return currentStreams.map((stream) => {
      return /* @__PURE__ */ jsx2(SliderItem, { type: "playback", device: stream });
    });
  }) }) }) });
};

// src/components/menus/audio/active/index.tsx
var activeMenu = Variable("devices" /* DEVICES */);
var Header4 = () => /* @__PURE__ */ jsxs("box", { className: "menu-label-container volume selected", halign: Gtk4.Align.FILL, children: [
  /* @__PURE__ */ jsx2("label", { className: "menu-label audio volume", halign: Gtk4.Align.START, hexpand: true, label: "Volume" }),
  /* @__PURE__ */ jsx2(
    "button",
    {
      className: "menu-icon-button menu-label slider-toggle volume",
      onClick: (_, event) => {
        if (!isPrimaryClick(event)) {
          return;
        }
        if (activeMenu.get() === "devices" /* DEVICES */) {
          activeMenu.set("playbacks" /* PLAYBACKS */);
        } else {
          activeMenu.set("devices" /* DEVICES */);
        }
      },
      halign: Gtk4.Align.END,
      hexpand: true,
      label: bind(activeMenu).as((menu) => menu === "devices" /* DEVICES */ ? "\uE690" : "\u{F093D}")
    }
  )
] });
var VolumeSliders = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container volume", vertical: true, children: [
    /* @__PURE__ */ jsx2(Header4, {}),
    /* @__PURE__ */ jsx2(
      "revealer",
      {
        transitionType: Gtk4.RevealerTransitionType.NONE,
        revealChild: bind(activeMenu).as((curMenu) => curMenu === "devices" /* DEVICES */),
        children: /* @__PURE__ */ jsx2(ActiveDevices, {})
      }
    ),
    /* @__PURE__ */ jsx2(
      "revealer",
      {
        transitionType: Gtk4.RevealerTransitionType.NONE,
        revealChild: bind(activeMenu).as((curMenu) => curMenu === "playbacks" /* PLAYBACKS */),
        children: /* @__PURE__ */ jsx2(ActivePlaybacks, {})
      }
    )
  ] });
};

// src/components/menus/audio/available/Device.tsx
var DeviceIcon = ({ device, type, icon: icon14 }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: bind(device, "isDefault").as((isDefault) => {
        return `menu-button-icon ${isDefault ? "active" : ""} ${type} txt-icon`;
      }),
      label: icon14
    }
  );
};
var DeviceName = ({ device, type }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      truncate: true,
      wrap: true,
      className: bind(device, "description").as(
        (currentDesc) => device.description === currentDesc ? `menu-button-name active ${type}` : `menu-button-name ${type}`
      ),
      label: device.description
    }
  );
};
var AudioDevice = ({ device, type, icon: icon14 }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: `menu-button audio ${type} ${device.id}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          device.set_is_default(true);
        }
      },
      children: /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.START, children: [
        /* @__PURE__ */ jsx2(DeviceIcon, { device, type, icon: icon14 }),
        /* @__PURE__ */ jsx2(DeviceName, { device, type })
      ] })
    }
  );
};

// src/components/menus/audio/available/NotFoundButton.tsx
var NotFoundButton = ({ type }) => {
  return /* @__PURE__ */ jsx2("button", { className: `menu-unfound-button ${type}`, sensitive: false, children: /* @__PURE__ */ jsx2("box", { children: /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, children: /* @__PURE__ */ jsx2("label", { className: `menu-button-name ${type}`, label: `No ${type} devices found...` }) }) }) });
};

// src/components/menus/audio/available/PlaybackDevices.tsx
import AstalWp10 from "gi://AstalWp?version=0.1";
var wireplumber9 = AstalWp10.get_default();
var audioService9 = wireplumber9.audio;
var PlaybackDevices = () => {
  const playbackDevices = bind(audioService9, "speakers");
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section playback", vertical: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-container playback", vertical: true, children: playbackDevices.as((devices) => {
    if (devices === null || devices.length === 0) {
      return /* @__PURE__ */ jsx2(NotFoundButton, { type: "playback" });
    }
    return devices.map((device) => {
      return /* @__PURE__ */ jsx2(AudioDevice, { device, type: "playback", icon: "\uE638" });
    });
  }) }) });
};

// src/components/menus/audio/available/InputDevices.tsx
import AstalWp11 from "gi://AstalWp?version=0.1";
var wireplumber10 = AstalWp11.get_default();
var audioService10 = wireplumber10.audio;
var InputDevices = () => {
  const inputDevices = bind(audioService10, "microphones");
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section input", vertical: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-container input", vertical: true, children: inputDevices.as((devices) => {
    if (devices === null || devices.length === 0) {
      return /* @__PURE__ */ jsx2(NotFoundButton, { type: "input" });
    }
    return devices.map((device) => {
      return /* @__PURE__ */ jsx2(AudioDevice, { device, type: "input", icon: "\uEC1C" });
    });
  }) }) });
};

// src/components/menus/audio/available/Header.tsx
var Header5 = ({ type, label: label16 }) => {
  return /* @__PURE__ */ jsx2("box", { className: `menu-label-container ${type}`, halign: Gtk4.Align.FILL, children: /* @__PURE__ */ jsx2("label", { className: `menu-label audio ${type}`, halign: Gtk4.Align.START, hexpand: true, label: label16 }) });
};

// src/components/menus/audio/available/index.tsx
var AvailableDevices = () => {
  return /* @__PURE__ */ jsxs("box", { vertical: true, className: "menu-section-container playback", children: [
    /* @__PURE__ */ jsx2(Header5, { type: "playback", label: "Playback Device" }),
    /* @__PURE__ */ jsx2(PlaybackDevices, {}),
    /* @__PURE__ */ jsx2(Header5, { type: "input", label: "Input Device" }),
    /* @__PURE__ */ jsx2(InputDevices, {})
  ] });
};

// src/components/menus/audio/index.tsx
var audio_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "audiomenu",
      transition: bind(configuration_default.menus.transition).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items audio", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "menu-items-container audio", halign: Gtk4.Align.FILL, vertical: true, hexpand: true, children: [
        /* @__PURE__ */ jsx2(VolumeSliders, {}),
        /* @__PURE__ */ jsx2(AvailableDevices, {})
      ] }) })
    }
  );
};

// src/components/menus/network/ethernet/index.tsx
import AstalNetwork8 from "gi://AstalNetwork?version=0.1";

// src/services/network/types.ts
import AstalNetwork4 from "gi://AstalNetwork?version=0.1";
var DEVICE_STATES = {
  [AstalNetwork4.DeviceState.UNKNOWN]: "Unknown",
  [AstalNetwork4.DeviceState.UNMANAGED]: "Unmanaged",
  [AstalNetwork4.DeviceState.UNAVAILABLE]: "Unavailable",
  [AstalNetwork4.DeviceState.DISCONNECTED]: "Disconnected",
  [AstalNetwork4.DeviceState.PREPARE]: "Prepare",
  [AstalNetwork4.DeviceState.CONFIG]: "Config",
  [AstalNetwork4.DeviceState.NEED_AUTH]: "Need Authentication",
  [AstalNetwork4.DeviceState.IP_CONFIG]: "IP Configuration",
  [AstalNetwork4.DeviceState.IP_CHECK]: "IP Check",
  [AstalNetwork4.DeviceState.SECONDARIES]: "Secondaries",
  [AstalNetwork4.DeviceState.ACTIVATED]: "Activated",
  [AstalNetwork4.DeviceState.DEACTIVATING]: "Deactivating",
  [AstalNetwork4.DeviceState.FAILED]: "Failed"
};
var wifiIconMap = /* @__PURE__ */ new Map([
  ["network-wireless-acquiring", "\u{F0929}"],
  ["network-wireless-connected", "\u{F0928}"],
  ["network-wireless-encrypted", "\u{F092A}"],
  ["network-wireless-hotspot", "\u{F0928}"],
  ["network-wireless-no-route", "\u{F0929}"],
  ["network-wireless-offline", "\u{F092E}"],
  ["network-wireless-signal-excellent", "\u{F0928}"],
  ["network-wireless-signal-good", "\u{F0925}"],
  ["network-wireless-signal-ok", "\u{F0922}"],
  ["network-wireless-signal-weak", "\u{F091F}"],
  ["network-wireless-signal-none", "\u{F092F}"]
]);
var AP_FLAGS = {
  NONE: 0,
  PRIVACY: 1
};

// src/services/network/index.ts
import AstalNetwork7 from "gi://AstalNetwork?version=0.1";

// src/services/network/wifi.ts
import AstalNetwork5 from "gi://AstalNetwork?version=0.1";
var WifiManager = class {
  _astalNetwork;
  isWifiEnabled = Variable(false);
  isScanning = Variable(false);
  wifiAccessPoints = Variable([]);
  staging = Variable(void 0);
  connecting = Variable("");
  _wifiEnabledBinding;
  _scanningBinding;
  _accessPointBinding;
  constructor(networkService15) {
    this._astalNetwork = networkService15;
  }
  /**
   * Called when the WiFi service changes to update bindings
   */
  onWifiServiceChanged() {
    this._wifiEnabled();
    this._scanningStatus();
    this._accessPoints();
  }
  /**
   * Checks if WiFi is enabled and updates the `isWifiEnabled` variable.
   */
  _wifiEnabled() {
    this._wifiEnabledBinding?.drop();
    this._wifiEnabledBinding = void 0;
    if (this._astalNetwork.wifi === null) {
      return;
    }
    this._wifiEnabledBinding = Variable.derive(
      [bind(this._astalNetwork.wifi, "enabled")],
      (isEnabled) => {
        this.isWifiEnabled.set(isEnabled);
      }
    );
  }
  /**
   * Updates the WiFi scanning status.
   */
  _scanningStatus() {
    this._scanningBinding?.drop();
    this._scanningBinding = void 0;
    if (this._astalNetwork.wifi === null) {
      return;
    }
    this._scanningBinding = Variable.derive([bind(this._astalNetwork.wifi, "scanning")], (scanning) => {
      this.isScanning.set(scanning);
    });
  }
  /**
   * Updates the list of WiFi access points.
   */
  _accessPoints() {
    this._accessPointBinding?.drop();
    this._accessPointBinding = void 0;
    if (this._astalNetwork.wifi === null) {
      return;
    }
    Variable.derive([bind(this._astalNetwork.wifi, "accessPoints")], (axsPoints) => {
      this.wifiAccessPoints.set(axsPoints);
    });
  }
  /**
   * Removes duplicate access points based on their SSID.
   *
   * @returns An array of deduplicated access points.
   */
  _dedupeWAPs() {
    if (this._astalNetwork.wifi === null) {
      return [];
    }
    const WAPs = this._astalNetwork.wifi.get_access_points();
    const dedupMap = {};
    WAPs.forEach((item) => {
      if (item.ssid !== null && !Object.prototype.hasOwnProperty.call(dedupMap, item.ssid)) {
        dedupMap[item.ssid] = item;
      }
    });
    return Object.keys(dedupMap).map((itm) => dedupMap[itm]);
  }
  /**
   * Determines if a given access point is currently in the staging area.
   *
   * @param wap - The access point to check.
   * @returns True if the access point is in staging; otherwise, false.
   */
  _isInStaging(wap) {
    const wapInStaging = this.staging.get();
    if (wapInStaging === void 0) {
      return false;
    }
    return wap.bssid === wapInStaging.bssid;
  }
  /**
   * Retrieves a list of filtered wireless access points by removing duplicates and excluding specific entries.
   *
   * @returns A filtered array of wireless access points.
   */
  getFilteredWirelessAPs() {
    const dedupedWAPs = this._dedupeWAPs();
    const filteredWAPs = dedupedWAPs.filter((ap) => {
      return ap.ssid !== "Unknown" && !this._isInStaging(ap);
    }).sort((a, b) => {
      if (this.isApActive(a)) {
        return -1;
      }
      if (this.isApActive(b)) {
        return 1;
      }
      return b.strength - a.strength;
    });
    return filteredWAPs;
  }
  /**
   * Determines whether the device is in an active state.
   *
   * @param state - The current state of the device.
   * @returns True if the device is in an active state; otherwise, false.
   */
  isApEnabled(state) {
    if (state === null) {
      return false;
    }
    return !(state === AstalNetwork5.DeviceState.DISCONNECTED || state === AstalNetwork5.DeviceState.UNAVAILABLE || state === AstalNetwork5.DeviceState.FAILED);
  }
  /**
   * Checks if the given access point is the currently active one.
   *
   * @param accessPoint - The access point to check.
   * @returns True if the access point is active; otherwise, false.
   */
  isApActive(accessPoint) {
    return accessPoint.ssid === this._astalNetwork.wifi?.activeAccessPoint?.ssid;
  }
  /**
   * Checks if the specified access point is in the process of disconnecting.
   *
   * @param accessPoint - The access point to check.
   * @returns True if the access point is disconnecting; otherwise, false.
   */
  isDisconnecting(accessPoint) {
    if (this.isApActive(accessPoint)) {
      return this._astalNetwork.wifi?.state === AstalNetwork5.DeviceState.DEACTIVATING;
    }
    return false;
  }
  /**
   * Retrieves the current Wi-Fi status based on the network service state.
   *
   * @returns A string representing the current Wi-Fi status.
   */
  getWifiStatus() {
    const wifiState = this._astalNetwork.wifi?.state;
    if (wifiState !== null) {
      return DEVICE_STATES[wifiState];
    }
    return DEVICE_STATES[AstalNetwork5.DeviceState.UNKNOWN];
  }
  /**
   * Initiates a connection to the specified access point.
   *
   * @param accessPoint - The access point to connect to.
   * @param event - The click event triggering the connection.
   */
  connectToAP(accessPoint, event) {
    if (accessPoint.bssid === this.connecting.get() || this.isApActive(accessPoint) || !isPrimaryClick(event)) {
      return;
    }
    if (!accessPoint.flags || accessPoint.flags === AP_FLAGS.NONE) {
      this.connecting.set(accessPoint.bssid ?? "");
      execAsync(`nmcli device wifi connect ${accessPoint.bssid}`).then(() => {
        this.connecting.set("");
        this.staging.set({});
      }).catch((err) => {
        this.connecting.set("");
        SystemUtilities.notify({
          summary: "Network",
          body: err.message
        });
      });
    } else {
      this.staging.set(accessPoint);
    }
  }
  /**
   * Connects to a secured access point with a password.
   *
   * @param accessPoint - The access point to connect to.
   * @param password - The password for the network.
   */
  async connectToAPWithPassword(accessPoint, password) {
    if (!accessPoint.ssid || !password) {
      return Promise.reject(new Error("SSID and password are required"));
    }
    this.connecting.set(accessPoint.bssid || "");
    const connectCommand = `nmcli device wifi connect "${accessPoint.ssid}" password "${password}"`;
    return execAsync(connectCommand).then(() => {
      this.connecting.set("");
      this.staging.set(void 0);
    }).catch((err) => {
      this.connecting.set("");
      throw err;
    });
  }
  /**
   * Disconnects from the specified access point.
   *
   * @param accessPoint - The access point to disconnect from.
   * @param event - The click event triggering the disconnection.
   */
  disconnectFromAP(accessPoint, event) {
    if (!isPrimaryClick(event)) {
      return;
    }
    this.connecting.set(accessPoint.bssid || "");
    execAsync("nmcli connection show --active").then((res) => {
      const connectionId = this._getIdFromSsid(accessPoint.ssid || "", res);
      if (connectionId === void 0) {
        console.error(`Error while disconnecting "${accessPoint.ssid}": Connection ID not found`);
        return;
      }
      execAsync(`nmcli connection down ${connectionId} "${accessPoint.ssid}"`).then(() => {
        this.connecting.set("");
      }).catch((err) => {
        this.connecting.set("");
        console.error(`Error while disconnecting "${accessPoint.ssid}": ${err}`);
      });
    });
  }
  /**
   * Forgets the specified access point by deleting its connection.
   *
   * @param accessPoint - The access point to forget.
   * @param event - The click event triggering the forget action.
   */
  forgetAP(accessPoint, event) {
    if (!isPrimaryClick(event)) {
      return;
    }
    this.connecting.set(accessPoint.bssid || "");
    execAsync("nmcli connection show --active").then((res) => {
      const connectionId = this._getIdFromSsid(accessPoint.ssid || "", res);
      if (connectionId === void 0) {
        console.error(`Error while forgetting "${accessPoint.ssid}": Connection ID not found`);
        return;
      }
      execAsync(`nmcli connection delete ${connectionId} "${accessPoint.ssid}"`).then(() => {
        this.connecting.set("");
      }).catch((err) => {
        this.connecting.set("");
        console.error(`Error while forgetting "${accessPoint.ssid}": ${err}`);
      });
    });
  }
  /**
   * Extracts the connection ID associated with a given SSID from the `nmcli` command output.
   *
   * @param ssid - The SSID of the network.
   * @param nmcliOutput - The output string from the `nmcli` command.
   * @returns The connection ID if found; otherwise, undefined.
   */
  _getIdFromSsid(ssid, nmcliOutput) {
    const lines = nmcliOutput.trim().split("\n");
    for (const line of lines) {
      const columns = line.trim().split(/\s{2,}/);
      if (columns[0].includes(ssid)) {
        return columns[1];
      }
    }
  }
};

// src/services/network/ethernet.ts
import AstalNetwork6 from "gi://AstalNetwork?version=0.1";
var EthernetManager = class {
  _astalNetwork;
  wiredState = Variable(AstalNetwork6.DeviceState.UNKNOWN);
  wiredInternet = Variable(AstalNetwork6.Internet.DISCONNECTED);
  wiredIcon = Variable("");
  wiredSpeed = Variable(0);
  _wiredStateBinding;
  _wiredInternetBinding;
  _wiredIconBinding;
  _wiredSpeedBinding;
  constructor(networkService15) {
    this._astalNetwork = networkService15;
  }
  /**
   * Called when the wired service changes to update bindings
   */
  onWiredServiceChanged() {
    this._getWiredState();
    this._getWiredInternet();
    this._getWiredIcon();
    this._getWiredSpeed();
  }
  /**
   * Retrieves the current state of the wired network.
   */
  _getWiredState() {
    this._wiredStateBinding?.drop();
    this._wiredStateBinding = void 0;
    if (this._astalNetwork.wired === null) {
      this.wiredState.set(AstalNetwork6.DeviceState.UNAVAILABLE);
      return;
    }
    this._wiredStateBinding = Variable.derive([bind(this._astalNetwork.wired, "state")], (state) => {
      this.wiredState.set(state);
    });
  }
  /**
   * Retrieves the current internet status of the wired network.
   */
  _getWiredInternet() {
    this._wiredInternetBinding?.drop();
    this._wiredInternetBinding = void 0;
    if (this._astalNetwork.wired === null) {
      return;
    }
    this._wiredInternetBinding = Variable.derive(
      [bind(this._astalNetwork.wired, "internet")],
      (internet) => {
        this.wiredInternet.set(internet);
      }
    );
  }
  /**
   * Retrieves the current icon for the wired network.
   */
  _getWiredIcon() {
    this._wiredIconBinding?.drop();
    this._wiredIconBinding = void 0;
    if (this._astalNetwork.wired === null) {
      this.wiredIcon.set("network-wired-symbolic");
      return;
    }
    this._wiredIconBinding = Variable.derive([bind(this._astalNetwork.wired, "iconName")], (icon14) => {
      this.wiredIcon.set(icon14);
    });
  }
  /**
   * Retrieves the current speed of the wired network.
   */
  _getWiredSpeed() {
    this._wiredSpeedBinding?.drop();
    this._wiredSpeedBinding = void 0;
    if (this._astalNetwork.wired === null) {
      return;
    }
    this._wiredSpeedBinding = Variable.derive([bind(this._astalNetwork.wired, "speed")], (speed) => {
      this.wiredSpeed.set(speed);
    });
  }
};

// src/services/network/index.ts
var NetworkService = class _NetworkService {
  static _instance;
  _astalNetwork;
  wifi;
  ethernet;
  constructor() {
    this._astalNetwork = AstalNetwork7.get_default();
    this.wifi = new WifiManager(this._astalNetwork);
    this.ethernet = new EthernetManager(this._astalNetwork);
    this._setupBindings();
  }
  /**
   * Gets the singleton instance of NetworkService
   *
   * @returns The NetworkService instance
   */
  static getInstance() {
    if (!this._instance) {
      this._instance = new _NetworkService();
    }
    return this._instance;
  }
  /**
   * Sets up bindings to monitor network service changes
   */
  _setupBindings() {
    Variable.derive([bind(this._astalNetwork, "wifi")], () => {
      this.wifi.onWifiServiceChanged();
    });
    Variable.derive([bind(this._astalNetwork, "wired")], () => {
      this.ethernet.onWiredServiceChanged();
    });
  }
  /**
   * Retrieves the appropriate WiFi icon based on the provided icon name.
   *
   * @param iconName - The name of the icon to look up. If not provided, a default icon is returned.
   * @returns The corresponding WiFi icon as a string.
   */
  getWifiIcon(iconName) {
    if (iconName === void 0) {
      return "\u{F092B}";
    }
    const wifiIcon = wifiIconMap.get(iconName.toLowerCase());
    if (wifiIcon) {
      return wifiIcon;
    }
    return "\u{F0928}";
  }
};

// src/components/menus/network/ethernet/index.tsx
var networkService4 = NetworkService.getInstance();
var Ethernet = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container ethernet", vertical: true, children: [
    /* @__PURE__ */ jsx2("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: /* @__PURE__ */ jsx2("label", { className: "menu-label", halign: Gtk4.Align.START, hexpand: true, label: "Ethernet" }) }),
    /* @__PURE__ */ jsx2("box", { className: "menu-items-section", vertical: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-content", vertical: true, children: /* @__PURE__ */ jsx2("box", { className: "network-element-item", children: /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.START, children: [
      /* @__PURE__ */ jsx2(
        "icon",
        {
          className: bind(networkService4.ethernet.wiredState).as((state) => {
            return `network-icon ethernet ${state === AstalNetwork8.DeviceState.ACTIVATED ? "active" : ""}`;
          }),
          tooltipText: bind(networkService4.ethernet.wiredInternet).as((internet) => {
            return internet.toString();
          }),
          icon: bind(networkService4.ethernet.wiredIcon)
        }
      ),
      /* @__PURE__ */ jsxs("box", { className: "connection-container", vertical: true, children: [
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "active-connection",
            halign: Gtk4.Align.START,
            truncate: true,
            wrap: true,
            label: bind(networkService4.ethernet.wiredSpeed).as((speed) => {
              return `Ethernet Connection (${speed} Mbps)`;
            })
          }
        ),
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "connection-status dim",
            halign: Gtk4.Align.START,
            truncate: true,
            wrap: true,
            label: bind(networkService4.ethernet.wiredState).as((state) => {
              return DEVICE_STATES[state];
            })
          }
        )
      ] })
    ] }) }) }) })
  ] });
};

// src/components/shared/Spinner.tsx
var Spinner = class extends astalify(Gtk4.Spinner) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Spinner.
   * @param props - The properties for the Spinner component.
   * @memberof Spinner
   */
  constructor(props) {
    super(props);
  }
};
var Spinner_default = Spinner;

// src/components/menus/network/wifi/APStaging/AccessPoint.tsx
var AccessPoint = ({ staging, connecting }) => {
  const ConnectionIcon = () => /* @__PURE__ */ jsx2("icon", { className: "network-icon wifi", icon: staging.get()?.iconName });
  const ConnectionSpinner = () => /* @__PURE__ */ jsx2(
    "revealer",
    {
      halign: Gtk4.Align.END,
      revealChild: bind(connecting).as((conBssid) => staging.get()?.bssid === conBssid),
      children: /* @__PURE__ */ jsx2(Spinner_default, { className: "spinner wap" })
    }
  );
  const ConnectionName = () => /* @__PURE__ */ jsx2("box", { className: "connection-container", vertical: true, hexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "active-connection",
      halign: Gtk4.Align.START,
      truncate: true,
      wrap: true,
      label: staging.get()?.ssid ?? ""
    }
  ) });
  return /* @__PURE__ */ jsx2("box", { className: "network-element-item staging", vertical: true, children: /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.FILL, hexpand: true, children: [
    /* @__PURE__ */ jsx2(ConnectionIcon, {}),
    /* @__PURE__ */ jsx2(ConnectionName, {}),
    /* @__PURE__ */ jsx2(ConnectionSpinner, {})
  ] }) });
};

// src/components/menus/network/wifi/APStaging/helpers/index.ts
var networkService5 = NetworkService.getInstance();
function handlePasswordInput(self, event, staging) {
  const keyPressed = event.get_keyval()[1];
  const accessPoint = staging.get();
  const password = self.text;
  if (keyPressed !== Gdk.KEY_Return || password.length === 0 || !accessPoint) {
    return;
  }
  networkService5.wifi.connectToAPWithPassword(accessPoint, password).catch((err) => {
    if (self.is_visible() && self.get_realized()) {
      self.grab_focus();
    }
    SystemUtilities.notify({
      summary: "Network",
      body: err.message
    });
    self.text = "";
  });
}

// src/components/menus/network/wifi/APStaging/PasswordInput.tsx
var PasswordInput = ({ connecting, staging }) => {
  const showPassword = true;
  return /* @__PURE__ */ jsxs("box", { className: "network-password-input-container", halign: Gtk4.Align.FILL, hexpand: true, children: [
    /* @__PURE__ */ jsx2(
      "entry",
      {
        className: "network-password-input",
        hexpand: true,
        halign: Gtk4.Align.START,
        visibility: !showPassword,
        placeholderText: "Enter Password",
        onKeyPressEvent: (self, event) => {
          handlePasswordInput(self, event, staging);
        },
        setup: (self) => {
          setTimeout(() => self.grab_focus(), 100);
        }
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        className: "close-network-password-input-button",
        halign: Gtk4.Align.END,
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            connecting.set("");
            staging.set(void 0);
          }
        },
        children: /* @__PURE__ */ jsx2("icon", { className: "close-network-password-input-icon", icon: "window-close-symbolic" })
      }
    )
  ] });
};

// src/components/menus/network/wifi/APStaging/index.tsx
import AstalNetwork9 from "gi://AstalNetwork?version=0.1";
var networkService6 = NetworkService.getInstance();
var astalNetwork = AstalNetwork9.get_default();
var APStaging = () => {
  const stagingBinding = Variable.derive(
    [bind(astalNetwork, "wifi"), bind(networkService6.wifi.staging)],
    () => {
      if (networkService6.wifi.staging.get()?.ssid === void 0) {
        return /* @__PURE__ */ jsx2("box", {});
      }
      return /* @__PURE__ */ jsxs("box", { className: "network-element-item staging", vertical: true, children: [
        /* @__PURE__ */ jsx2(
          AccessPoint,
          {
            connecting: networkService6.wifi.connecting,
            staging: networkService6.wifi.staging
          }
        ),
        /* @__PURE__ */ jsx2(
          PasswordInput,
          {
            connecting: networkService6.wifi.connecting,
            staging: networkService6.wifi.staging
          }
        )
      ] });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "wap-staging",
      onDestroy: () => {
        stagingBinding.drop();
      },
      children: stagingBinding()
    }
  );
};

// src/components/menus/network/wifi/WirelessAPs/AccessPoint.tsx
import AstalNetwork10 from "gi://AstalNetwork?version=0.1";
var networkService7 = NetworkService.getInstance();
var astalNetwork2 = AstalNetwork10.get_default();
var AccessPoint2 = ({ connecting, accessPoint }) => {
  const ConnectionIcon = () => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        valign: Gtk4.Align.START,
        className: `network-icon wifi ${networkService7.wifi.isApActive(accessPoint) ? "active" : ""} txt-icon`,
        label: networkService7.getWifiIcon(accessPoint.iconName)
      }
    );
  };
  const ConnectionAccessPoint = () => {
    return /* @__PURE__ */ jsxs("box", { className: "connection-container", valign: Gtk4.Align.CENTER, vertical: true, hexpand: true, children: [
      /* @__PURE__ */ jsx2(
        "label",
        {
          className: "active-connection",
          valign: Gtk4.Align.CENTER,
          halign: Gtk4.Align.START,
          truncate: true,
          wrap: true,
          label: accessPoint.ssid ?? ""
        }
      ),
      /* @__PURE__ */ jsx2(
        "revealer",
        {
          revealChild: networkService7.wifi.isApActive(accessPoint) && networkService7.wifi.isApEnabled(astalNetwork2.wifi?.state),
          children: /* @__PURE__ */ jsx2(
            "label",
            {
              className: "connection-status dim",
              halign: Gtk4.Align.START,
              label: networkService7.wifi.getWifiStatus()
            }
          )
        }
      )
    ] });
  };
  const LoadingSpinner = () => {
    return /* @__PURE__ */ jsx2(
      "revealer",
      {
        halign: Gtk4.Align.END,
        valign: Gtk4.Align.CENTER,
        revealChild: accessPoint.bssid === connecting.get() || networkService7.wifi.isDisconnecting(accessPoint),
        children: /* @__PURE__ */ jsx2(
          Spinner_default,
          {
            className: "spinner wap",
            setup: (self) => {
              self.start();
            },
            halign: Gtk4.Align.CENTER,
            valign: Gtk4.Align.CENTER
          }
        )
      }
    );
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "network-element-item",
      onClick: (_, event) => {
        networkService7.wifi.connectToAP(accessPoint, event);
      },
      children: /* @__PURE__ */ jsxs("box", { hexpand: true, children: [
        /* @__PURE__ */ jsx2(ConnectionIcon, {}),
        /* @__PURE__ */ jsx2(ConnectionAccessPoint, {}),
        /* @__PURE__ */ jsx2(LoadingSpinner, {})
      ] })
    }
  );
};

// src/components/menus/network/wifi/WirelessAPs/Controls.tsx
var networkService8 = NetworkService.getInstance();
var Controls = ({ connecting, accessPoint }) => {
  const DisconnectButton = () => {
    return /* @__PURE__ */ jsx2(
      "button",
      {
        className: "menu-icon-button network disconnect",
        onClick: (_, event) => {
          networkService8.wifi.disconnectFromAP(accessPoint, event);
        },
        children: /* @__PURE__ */ jsx2(
          "label",
          {
            className: "menu-icon-button disconnect-network txt-icon",
            tooltipText: "Disconnect",
            label: "\u{F1616}"
          }
        )
      }
    );
  };
  const ForgetButton2 = () => {
    return /* @__PURE__ */ jsx2(
      "button",
      {
        className: "menu-icon-button network disconnect",
        tooltipText: "Delete/Forget Network",
        onClick: (_, event) => {
          networkService8.wifi.forgetAP(accessPoint, event);
        },
        children: /* @__PURE__ */ jsx2("label", { className: "txt-icon delete-network", label: "\u{F0683}" })
      }
    );
  };
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      revealChild: accessPoint.bssid !== connecting.get() && networkService8.wifi.isApActive(accessPoint),
      valign: Gtk4.Align.START,
      children: /* @__PURE__ */ jsxs("box", { className: "network-element-controls-container", children: [
        /* @__PURE__ */ jsx2(DisconnectButton, {}),
        /* @__PURE__ */ jsx2(ForgetButton2, {})
      ] })
    }
  );
};

// src/components/menus/network/wifi/WirelessAPs/index.tsx
var networkService9 = NetworkService.getInstance();
var WirelessAPs = () => {
  const wapBinding = Variable.derive(
    [
      bind(networkService9.wifi.staging),
      bind(networkService9.wifi.connecting),
      bind(networkService9.wifi.wifiAccessPoints),
      bind(networkService9.wifi.isWifiEnabled)
    ],
    () => {
      const filteredWAPs = networkService9.wifi.getFilteredWirelessAPs();
      if (filteredWAPs.length <= 0 && networkService9.wifi.staging.get() === void 0) {
        return /* @__PURE__ */ jsx2(
          "label",
          {
            className: "waps-not-found dim",
            expand: true,
            halign: Gtk4.Align.CENTER,
            valign: Gtk4.Align.CENTER,
            label: "No Wi-Fi Networks Found"
          }
        );
      }
      return /* @__PURE__ */ jsx2("scrollable", { className: "menu-scroller wap", children: /* @__PURE__ */ jsx2("box", { className: "available-waps-list", vertical: true, children: filteredWAPs.map((ap) => {
        return /* @__PURE__ */ jsxs("box", { className: "network-element-item", children: [
          /* @__PURE__ */ jsx2(
            AccessPoint2,
            {
              connecting: networkService9.wifi.connecting,
              accessPoint: ap
            }
          ),
          /* @__PURE__ */ jsx2(Controls, { connecting: networkService9.wifi.connecting, accessPoint: ap })
        ] });
      }) }) });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "available-waps",
      vertical: true,
      onDestroy: () => {
        wapBinding.drop();
      },
      children: wapBinding()
    }
  );
};

// src/components/menus/network/wifi/Controls/WifiSwitch.tsx
import AstalNetwork11 from "gi://AstalNetwork?version=0.1";
var networkService10 = AstalNetwork11.get_default();
var WifiSwitch = () => /* @__PURE__ */ jsx2(
  "switch",
  {
    className: "menu-switch network",
    valign: Gtk4.Align.CENTER,
    tooltipText: "Toggle Wifi",
    active: networkService10.wifi?.enabled,
    setup: (self) => {
      self.connect("notify::active", () => {
        networkService10.wifi?.set_enabled(self.active);
      });
    }
  }
);

// src/components/menus/network/wifi/Controls/RefreshButton.tsx
import AstalNetwork12 from "gi://AstalNetwork?version=0.1";
var networkService11 = NetworkService.getInstance();
var astalNetwork3 = AstalNetwork12.get_default();
var RefreshButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "menu-icon-button search network",
      valign: Gtk4.Align.CENTER,
      halign: Gtk4.Align.END,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          astalNetwork3.wifi?.scan();
        }
      },
      children: /* @__PURE__ */ jsx2(
        "icon",
        {
          className: bind(networkService11.wifi.isScanning).as(
            (scanning) => scanning ? "spinning-icon" : ""
          ),
          icon: "view-refresh-symbolic"
        }
      )
    }
  );
};

// src/components/menus/network/wifi/index.tsx
var Wifi = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container wifi", vertical: true, children: [
    /* @__PURE__ */ jsxs("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: [
      /* @__PURE__ */ jsx2("label", { className: "menu-label", halign: Gtk4.Align.START, hexpand: true, label: "Wi-Fi" }),
      /* @__PURE__ */ jsx2(WifiSwitch, {}),
      /* @__PURE__ */ jsx2(RefreshButton, {})
    ] }),
    /* @__PURE__ */ jsxs("box", { className: "menu-items-section", vertical: true, children: [
      /* @__PURE__ */ jsx2(APStaging, {}),
      /* @__PURE__ */ jsx2(WirelessAPs, {})
    ] })
  ] });
};

// src/components/menus/network/wifi/WirelessAPs/NoWifi.tsx
var NoWifi = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container wifi", vertical: true, children: [
    /* @__PURE__ */ jsxs("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: [
      /* @__PURE__ */ jsx2("label", { className: "menu-label", halign: Gtk4.Align.START, hexpand: true, label: "Wi-Fi" }),
      /* @__PURE__ */ jsx2(WifiSwitch, {}),
      /* @__PURE__ */ jsx2(RefreshButton, {})
    ] }),
    /* @__PURE__ */ jsx2("box", { className: "menu-items-section", vertical: true, children: /* @__PURE__ */ jsx2(
      "label",
      {
        className: "waps-not-found dim",
        expand: true,
        halign: Gtk4.Align.CENTER,
        valign: Gtk4.Align.CENTER,
        label: "Wi-Fi Adapter Not Found"
      }
    ) })
  ] });
};

// src/components/menus/network/index.tsx
import AstalNetwork13 from "gi://AstalNetwork?version=0.1";
var networkService12 = AstalNetwork13.get_default();
var network_default4 = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "networkmenu",
      transition: bind(configuration_default.menus.transition).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items network", children: /* @__PURE__ */ jsxs("box", { className: "menu-items-container network", vertical: true, hexpand: true, children: [
        /* @__PURE__ */ jsx2(Ethernet, {}),
        bind(networkService12, "wifi").as((wifi) => {
          if (wifi === null) {
            return /* @__PURE__ */ jsx2(NoWifi, {});
          }
          return /* @__PURE__ */ jsx2(Wifi, {});
        })
      ] }) })
    }
  );
};

// src/components/menus/bluetooth/devices/helpers.ts
import AstalBluetooth2 from "gi://AstalBluetooth?version=0.1";
var bluetoothService2 = AstalBluetooth2.get_default();
var getAvailableBluetoothDevices = () => {
  const bluetoothDevices = bluetoothService2.get_devices() ?? [];
  const availableDevices = bluetoothDevices.filter((btDev) => btDev.name !== null).sort((a, b) => {
    if (a.connected || a.paired) {
      return -1;
    }
    if (b.connected || b.paired) {
      return 1;
    }
    return a.name.localeCompare(b.name);
  });
  return availableDevices;
};
var getConnectedBluetoothDevices = () => {
  const availableDevices = getAvailableBluetoothDevices();
  const connectedDeviceNames = availableDevices.filter((d) => d.connected || d.paired).map((d) => d.address);
  return connectedDeviceNames;
};
var forgetBluetoothDevice = (device) => {
  execAsync(["bash", "-c", `bluetoothctl remove ${device.address}`]).catch((err) => console.error("Bluetooth Remove", err)).then(() => {
    bluetoothService2.emit("device-removed", device);
  });
};

// src/components/menus/bluetooth/devices/NoBluetoothDevices.tsx
var NoBluetoothDevices = () => {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "bluetooth-items",
      vertical: true,
      expand: true,
      valign: Gtk4.Align.CENTER,
      halign: Gtk4.Align.CENTER,
      children: [
        /* @__PURE__ */ jsx2("label", { className: "no-bluetooth-devices dim", hexpand: true, label: "No devices currently found" }),
        /* @__PURE__ */ jsx2("label", { className: "search-bluetooth-label dim", hexpand: true, label: "Press '\u{F0450}' to search" })
      ]
    }
  );
};

// src/components/menus/bluetooth/devices/BluetoothDisabled.tsx
var BluetoothDisabled = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "bluetooth-items",
      vertical: true,
      expand: true,
      valign: Gtk4.Align.CENTER,
      halign: Gtk4.Align.CENTER,
      children: /* @__PURE__ */ jsx2("label", { className: "bluetooth-disabled dim", hexpand: true, label: "Bluetooth is disabled" })
    }
  );
};

// src/components/menus/bluetooth/devices/controls/ActionButton.tsx
var ActionButton2 = ({
  name: name2 = "",
  tooltipText = "",
  label: label16 = "",
  ...props
}) => {
  return /* @__PURE__ */ jsx2("button", { className: `menu-icon-button ${name2} bluetooth`, ...props, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: `menu-icon-button-label ${name2} bluetooth txt-icon`,
      tooltipText,
      label: label16
    }
  ) });
};

// src/components/menus/bluetooth/devices/controls/PairButton.tsx
var PairButton = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    ActionButton2,
    {
      name: "unpair",
      tooltipText: bind(device, "paired").as((paired) => paired ? "Unpair" : "Pair"),
      label: bind(device, "paired").as((paired) => paired ? "\uF0C1" : "\uF127"),
      onClick: (_, self) => {
        if (!isPrimaryClick(self)) {
          return;
        }
        if (device.paired) {
          device.pair();
        } else {
          device.cancel_pairing();
        }
      }
    }
  );
};

// src/components/menus/bluetooth/devices/controls/ConnectButton.tsx
var ConnectButton = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    ActionButton2,
    {
      name: "disconnect",
      tooltipText: bind(device, "connected").as((connected) => connected ? "Disconnect" : "Connect"),
      label: bind(device, "connected").as((connected) => connected ? "\u{F1616}" : "\uEAD0"),
      onClick: (_, self) => {
        if (isPrimaryClick(self) && device.connected) {
          device.disconnect_device((res) => {
            console.info(res);
          });
        } else {
          device.connect_device((res) => {
            console.info(res);
          });
        }
      }
    }
  );
};

// src/components/menus/bluetooth/devices/controls/TrustButton.tsx
var TrustButton = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    ActionButton2,
    {
      name: "untrust",
      tooltipText: bind(device, "trusted").as((trusted) => trusted ? "Untrust" : "Trust"),
      label: bind(device, "trusted").as((trusted) => trusted ? "\uED9F" : "\u{F15A1}"),
      onClick: (_, self) => {
        if (isPrimaryClick(self)) {
          device.set_trusted(!device.trusted);
        }
      }
    }
  );
};

// src/components/menus/bluetooth/devices/controls/ForgetButton.tsx
var ForgetButton = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    ActionButton2,
    {
      name: "delete",
      tooltipText: "Forget",
      label: "\u{F01B4}",
      onClick: (_, self) => {
        if (isPrimaryClick(self)) {
          forgetBluetoothDevice(device);
        }
      }
    }
  );
};

// src/components/menus/bluetooth/devices/controls/index.tsx
var DeviceControls = ({ device, connectedDevices }) => {
  if (!connectedDevices.includes(device.address)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsxs("box", { valign: Gtk4.Align.START, className: "bluetooth-controls", children: [
    /* @__PURE__ */ jsx2(PairButton, { device }),
    /* @__PURE__ */ jsx2(ConnectButton, { device }),
    /* @__PURE__ */ jsx2(TrustButton, { device }),
    /* @__PURE__ */ jsx2(ForgetButton, { device })
  ] });
};

// src/components/menus/bluetooth/utils.ts
var getBluetoothIcon = (iconName) => {
  const deviceIconMap = [
    ["^audio-card*", "\u{F0384}"],
    ["^audio-headphones*", "\u{F02CB}"],
    ["^audio-headset*", "\u{F02CE}"],
    ["^audio-input*", "\u{F036C}"],
    ["^audio-speakers*", "\u{F04C3}"],
    ["^bluetooth*", "\u{F00AF}"],
    ["^camera*", "\u{F0100}"],
    ["^computer*", "\u{F07C0}"],
    ["^input-gaming*", "\u{F036C}"],
    ["^input-keyboard*", "\u{F030C}"],
    ["^input-mouse*", "\u{F037D}"],
    ["^input-tablet*", "\u{F04F6}"],
    ["^media*", "\u{F16DF}"],
    ["^modem*", "\u{F1087}"],
    ["^network*", "\u{F1087}"],
    ["^phone*", "\u{F011E}"],
    ["^printer*", "\u{F042A}"],
    ["^scanner*", "\u{F06AB}"],
    ["^video-camera*", "\u{F0567}"]
  ];
  const foundMatch = deviceIconMap.find((icon14) => RegExp(icon14[0]).test(iconName.toLowerCase()));
  return foundMatch ? foundMatch[1] : "\u{F00AF}";
};

// src/components/menus/bluetooth/devices/device/DeviceIcon.tsx
var DeviceIcon2 = ({ device, connectedDevices }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      valign: Gtk4.Align.START,
      className: bind(device, "address").as(
        (address) => `menu-button-icon bluetooth ${connectedDevices.includes(address) ? "active" : ""} txt-icon`
      ),
      label: bind(device, "icon").as((icon14) => getBluetoothIcon(`${icon14}-symbolic`))
    }
  );
};

// src/components/menus/bluetooth/devices/device/DeviceName.tsx
var DeviceName2 = ({ device }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      valign: Gtk4.Align.CENTER,
      halign: Gtk4.Align.START,
      className: "menu-button-name bluetooth",
      truncate: true,
      wrap: true,
      label: bind(device, "alias")
    }
  );
};

// src/components/menus/bluetooth/devices/device/DeviceStatus.tsx
var DeviceStatus = ({ device }) => {
  const revealerBinding = Variable.derive(
    [bind(device, "connected"), bind(device, "paired")],
    (connected, paired) => {
      return connected || paired;
    }
  );
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      halign: Gtk4.Align.START,
      revealChild: revealerBinding(),
      onDestroy: () => {
        revealerBinding.drop();
      },
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          halign: Gtk4.Align.START,
          className: "connection-status dim",
          label: bind(device, "connected").as((connected) => connected ? "Connected" : "Paired")
        }
      )
    }
  );
};

// src/components/menus/bluetooth/devices/device/index.tsx
var BluetoothDevice = ({ device, connectedDevices }) => {
  const IsConnectingSpinner = () => {
    return /* @__PURE__ */ jsx2("revealer", { revealChild: bind(device, "connecting"), children: /* @__PURE__ */ jsx2(Spinner_default, { valign: Gtk4.Align.START, className: "spinner bluetooth" }) });
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      className: `bluetooth-element-item ${device}`,
      onClick: (_, event) => {
        if (!connectedDevices.includes(device.address) && isPrimaryClick(event)) {
          device.connect_device((res) => {
            console.info(res);
          });
        }
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsxs("box", { hexpand: true, halign: Gtk4.Align.START, className: "menu-button-container", children: [
          /* @__PURE__ */ jsx2(DeviceIcon2, { device, connectedDevices }),
          /* @__PURE__ */ jsxs("box", { vertical: true, valign: Gtk4.Align.CENTER, children: [
            /* @__PURE__ */ jsx2(DeviceName2, { device }),
            /* @__PURE__ */ jsx2(DeviceStatus, { device })
          ] })
        ] }),
        /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.END, children: /* @__PURE__ */ jsx2(IsConnectingSpinner, {}) })
      ] })
    }
  );
};

// src/components/menus/bluetooth/devices/DeviceListItem.tsx
var DeviceListItem = ({ btDevice, connectedDevices }) => {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(BluetoothDevice, { device: btDevice, connectedDevices }),
    /* @__PURE__ */ jsx2(DeviceControls, { device: btDevice, connectedDevices })
  ] });
};

// src/components/menus/bluetooth/devices/index.tsx
import AstalBluetooth3 from "gi://AstalBluetooth?version=0.1";
var bluetoothService3 = AstalBluetooth3.get_default();
var BluetoothDevices = () => {
  const deviceListBinding = Variable.derive(
    [bind(bluetoothService3, "devices"), bind(bluetoothService3, "isPowered")],
    () => {
      const availableDevices = getAvailableBluetoothDevices();
      const connectedDevices = getConnectedBluetoothDevices();
      if (availableDevices.length === 0) {
        return /* @__PURE__ */ jsx2(NoBluetoothDevices, {});
      }
      if (!bluetoothService3.adapter?.powered) {
        return /* @__PURE__ */ jsx2(BluetoothDisabled, {});
      }
      return availableDevices.map((btDevice) => {
        return /* @__PURE__ */ jsx2(DeviceListItem, { btDevice, connectedDevices });
      });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "menu-items-section",
      onDestroy: () => {
        deviceListBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("scrollable", { className: "menu-scroller bluetooth", children: /* @__PURE__ */ jsx2("box", { className: "menu-content", vertical: true, children: deviceListBinding() }) })
    }
  );
};

// src/components/menus/bluetooth/header/Controls/ToggleSwitch.tsx
import AstalBluetooth4 from "gi://AstalBluetooth?version=0.1";
var bluetoothService4 = AstalBluetooth4.get_default();
var isPowered = Variable(false);
Variable.derive([bind(bluetoothService4, "isPowered")], (isOn) => {
  return isPowered.set(isOn);
});
var ToggleSwitch = () => /* @__PURE__ */ jsx2(
  "switch",
  {
    className: "menu-switch bluetooth",
    halign: Gtk4.Align.END,
    hexpand: true,
    active: bluetoothService4.isPowered,
    setup: (self) => {
      self.connect("notify::active", () => {
        bluetoothService4.adapter?.set_powered(self.active);
      });
    }
  }
);

// src/components/menus/bluetooth/header/Controls/helper.ts
import AstalBluetooth5 from "gi://AstalBluetooth?version=0.1";
var bluetoothService5 = AstalBluetooth5.get_default();
var isDiscovering = Variable(false);
var discoveringBinding;
Variable.derive([bind(bluetoothService5, "adapter")], () => {
  discoveringBinding?.drop();
  discoveringBinding = void 0;
  if (bluetoothService5.adapter === null) {
    return;
  }
  discoveringBinding = Variable.derive([bind(bluetoothService5.adapter, "discovering")], (discovering) => {
    isDiscovering.set(discovering);
  });
});

// src/components/menus/bluetooth/header/Controls/DiscoverButton.tsx
import AstalBluetooth6 from "gi://AstalBluetooth?version=0.1";
var bluetoothService6 = AstalBluetooth6.get_default();
var DiscoverButton = () => /* @__PURE__ */ jsx2(
  "button",
  {
    className: "menu-icon-button search bluetooth",
    valign: Gtk4.Align.CENTER,
    onClick: (_, self) => {
      if (!isPrimaryClick(self)) {
        return;
      }
      if (bluetoothService6.adapter?.discovering) {
        return bluetoothService6.adapter.stop_discovery();
      }
      bluetoothService6.adapter?.start_discovery();
      const discoveryTimeout = 12e3;
      timeout(discoveryTimeout, () => {
        if (bluetoothService6.adapter?.discovering) {
          bluetoothService6.adapter.stop_discovery();
        }
      });
    },
    children: /* @__PURE__ */ jsx2(
      "icon",
      {
        className: bind(isDiscovering).as((isDiscovering2) => isDiscovering2 ? "spinning-icon" : ""),
        icon: "view-refresh-symbolic"
      }
    )
  }
);

// src/components/menus/bluetooth/header/Controls/index.tsx
var Controls2 = () => {
  return /* @__PURE__ */ jsxs("box", { className: "controls-container", valign: Gtk4.Align.START, children: [
    /* @__PURE__ */ jsx2(ToggleSwitch, {}),
    /* @__PURE__ */ jsx2(Separator_default, { className: "menu-separator bluetooth" }),
    /* @__PURE__ */ jsx2(DiscoverButton, {})
  ] });
};

// src/components/menus/bluetooth/header/index.tsx
var Header6 = () => {
  const MenuLabel2 = () => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        className: "menu-label",
        valign: Gtk4.Align.CENTER,
        halign: Gtk4.Align.START,
        label: "Bluetooth"
      }
    );
  };
  return /* @__PURE__ */ jsxs("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, valign: Gtk4.Align.START, children: [
    /* @__PURE__ */ jsx2(MenuLabel2, {}),
    /* @__PURE__ */ jsx2(Controls2, {})
  ] });
};

// src/components/menus/bluetooth/index.tsx
var bluetooth_default4 = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "bluetoothmenu",
      transition: bind(configuration_default.menus.transition).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items bluetooth", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-items-container bluetooth", halign: Gtk4.Align.FILL, vertical: true, hexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "menu-section-container bluetooth", vertical: true, children: [
        /* @__PURE__ */ jsx2(Header6, {}),
        /* @__PURE__ */ jsx2(BluetoothDevices, {})
      ] }) }) })
    }
  );
};

// src/components/menus/media/components/helpers.ts
var { tint, color } = configuration_default.theme.bar.menus.menu.media.card;
var getBackground = () => {
  return Variable.derive([bind(color), bind(tint), bind(mediaArtUrl)], (_, __, artUrl) => {
    return generateAlbumArt(artUrl);
  })();
};
function generateAlbumArt(imageUrl) {
  const userTint = tint.get();
  const userHexColor = color.get();
  const r = parseInt(userHexColor.slice(1, 3), 16);
  const g = parseInt(userHexColor.slice(3, 5), 16);
  const b = parseInt(userHexColor.slice(5, 7), 16);
  const alpha = userTint / 100;
  const css = `background-image: linear-gradient(
                rgba(${r}, ${g}, ${b}, ${alpha}),
                rgba(${r}, ${g}, ${b}, ${alpha}),
                ${userHexColor} 65em
            ), url("${imageUrl}");`;
  return css;
}

// src/components/menus/media/components/MediaContainer.tsx
var MediaContainer = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-items media", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-items-container media", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsx2("box", { className: "menu-section-container", children: /* @__PURE__ */ jsx2("box", { className: "menu-items-section", vertical: false, children: /* @__PURE__ */ jsx2(
    "box",
    {
      className: "menu-content",
      css: getBackground(),
      halign: Gtk4.Align.FILL,
      hexpand: true,
      vertical: true,
      children
    }
  ) }) }) }) });
};

// src/components/menus/media/components/title/SongName.tsx
var SongName = () => {
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-song-name", halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "media-indicator-current-song-name-label",
      label: bind(mediaTitle),
      maxWidthChars: 31,
      truncate: true,
      wrap: true
    }
  ) });
};

// src/components/menus/media/components/title/SongAuthor.tsx
var { hideAuthor } = configuration_default.menus.media;
var SongAuthor = () => {
  if (hideAuthor.get()) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-song-author", halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "media-indicator-current-song-author-label",
      label: bind(mediaArtist),
      maxWidthChars: 35,
      truncate: true,
      wrap: true
    }
  ) });
};

// src/components/menus/media/components/title/SongAlbum.tsx
var { hideAlbum } = configuration_default.menus.media;
var SongAlbum = () => {
  if (hideAlbum.get()) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-song-album", halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "media-indicator-current-song-album-label",
      label: bind(mediaAlbum),
      maxWidthChars: 40,
      truncate: true,
      wrap: true
    }
  ) });
};

// src/components/menus/media/components/title/index.tsx
var MediaInfo = () => {
  return /* @__PURE__ */ jsxs("box", { className: "media-indicator-current-media-info", halign: Gtk4.Align.CENTER, hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2(SongName, {}),
    /* @__PURE__ */ jsx2(SongAuthor, {}),
    /* @__PURE__ */ jsx2(SongAlbum, {})
  ] });
};

// src/components/menus/media/components/controls/Tracks.tsx
var NextTrack = () => {
  const className = bind(canGoNext).as((skippable) => {
    const nextStatus = skippable ? "enabled" : "disabled";
    return `media-indicator-control-button next ${nextStatus}`;
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.can_go_next) {
      currentPlayer.next();
    }
  };
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-control next", children: /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText: "Next Track",
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.mpris.next })
    }
  ) });
};
var PreviousTrack = () => {
  const className = bind(canGoPrevious).as((rewindable) => {
    const prevStatus = rewindable ? "enabled" : "disabled";
    return `media-indicator-control-button prev ${prevStatus}`;
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.can_go_previous) {
      currentPlayer.previous();
    }
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText: "Previous Track",
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.mpris.prev })
    }
  );
};

// src/components/menus/media/components/controls/helpers.ts
import AstalMpris4 from "gi://AstalMpris?version=0.1";
var mprisService2 = AstalMpris4.get_default();
var isLoopActive = (status) => {
  return [AstalMpris4.Loop.PLAYLIST, AstalMpris4.Loop.TRACK].includes(status) ? "active" : "";
};
var loopIconMap = {
  [AstalMpris4.Loop.NONE]: "none",
  [AstalMpris4.Loop.UNSUPPORTED]: "none",
  [AstalMpris4.Loop.TRACK]: "track",
  [AstalMpris4.Loop.PLAYLIST]: "playlist"
};
var playbackIconMap = {
  [AstalMpris4.PlaybackStatus.PLAYING]: "playing",
  [AstalMpris4.PlaybackStatus.PAUSED]: "paused",
  [AstalMpris4.PlaybackStatus.STOPPED]: "stopped"
};
var loopTooltipMap = {
  [AstalMpris4.Loop.NONE]: "Not Looping",
  [AstalMpris4.Loop.UNSUPPORTED]: "Unsupported",
  [AstalMpris4.Loop.TRACK]: "Looping Track",
  [AstalMpris4.Loop.PLAYLIST]: "Looping Playlist"
};
var getPlaybackIcon = (playbackStatus2) => {
  const playbackIcon = playbackIconMap[playbackStatus2];
  const mprisIcons = icons_default.mpris;
  return mprisIcons[playbackIcon];
};
var isShuffleActive = (status) => {
  if (status === AstalMpris4.Shuffle.ON) {
    return "active";
  }
  return "";
};
var getNextPlayer = () => {
  const currentPlayer = activePlayer.get();
  if (currentPlayer === void 0) {
    return;
  }
  const currentPlayerIndex = mprisService2.get_players().findIndex((player) => player.busName === currentPlayer.busName);
  const totalPlayers = mprisService2.get_players().length;
  if (totalPlayers === 1) {
    return activePlayer.set(mprisService2.get_players()[0]);
  }
  return activePlayer.set(mprisService2.get_players()[(currentPlayerIndex + 1) % totalPlayers]);
};
var getPreviousPlayer = () => {
  const currentPlayer = activePlayer.get();
  if (currentPlayer === void 0) {
    return;
  }
  const currentPlayerIndex = mprisService2.get_players().findIndex((player) => player.busName === currentPlayer.busName);
  const totalPlayers = mprisService2.get_players().length;
  if (totalPlayers === 1) {
    return activePlayer.set(mprisService2.get_players()[0]);
  }
  return activePlayer.set(
    mprisService2.get_players()[(currentPlayerIndex - 1 + totalPlayers) % totalPlayers]
  );
};

// src/components/menus/media/components/controls/PlayPause.tsx
import AstalMpris5 from "gi://AstalMpris?version=0.1";
var PlayPause = () => {
  const className = bind(canPlay).as((canPlay2) => {
    return `media-indicator-control-button play ${canPlay2 ? "enabled" : "disabled"}`;
  });
  const icon14 = bind(playbackStatus).as((status) => {
    return getPlaybackIcon(status);
  });
  const tooltipText = bind(playbackStatus).as((playbackStatus2) => {
    return playbackStatus2 === AstalMpris5.PlaybackStatus.PLAYING ? "Pause" : "Play";
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.can_play) {
      currentPlayer.play_pause();
    }
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText,
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: icon14 })
    }
  );
};

// src/components/menus/media/components/controls/Modes.tsx
import AstalMpris6 from "gi://AstalMpris?version=0.1";
var Loop = () => {
  const className = bind(loopStatus).as((status) => {
    const isActive2 = isLoopActive(status);
    const loopingAllowed = status !== null && status !== AstalMpris6.Loop.UNSUPPORTED ? "enabled" : "disabled";
    return `media-indicator-control-button loop ${isActive2} ${loopingAllowed}`;
  });
  const tooltipText = bind(loopStatus).as((status) => {
    if (status === null) {
      return "Unavailable";
    }
    return loopTooltipMap[status];
  });
  const iconBinding = bind(loopStatus).as((status) => {
    if (status === null || status === AstalMpris6.Loop.UNSUPPORTED) {
      return icons_default.mpris.loop.none;
    }
    return icons_default.mpris.loop[loopIconMap[status]];
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.loopStatus !== AstalMpris6.Loop.UNSUPPORTED) {
      currentPlayer.loop();
    }
  };
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-control loop", children: /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText,
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: iconBinding })
    }
  ) });
};
var Shuffle = () => {
  const className = bind(shuffleStatus).as((status) => {
    const isActive2 = isShuffleActive(status);
    const shuffleAllowed = status !== null && status !== AstalMpris6.Shuffle.UNSUPPORTED ? "enabled" : "disabled";
    return `media-indicator-control-button shuffle ${isActive2} ${shuffleAllowed}`;
  });
  const tooltipText = bind(shuffleStatus).as((status) => {
    if (status === null || status === AstalMpris6.Shuffle.UNSUPPORTED) {
      return "Unavailable";
    }
    const shuffleTooltipMap = {
      [AstalMpris6.Shuffle.ON]: "Shuffling",
      [AstalMpris6.Shuffle.OFF]: "Not Shuffling",
      [AstalMpris6.Shuffle.UNSUPPORTED]: "Unsupported"
    };
    return shuffleTooltipMap[status];
  });
  const onClick = (_, self) => {
    if (!isPrimaryClick(self)) {
      return;
    }
    const currentPlayer = activePlayer.get();
    if (currentPlayer && currentPlayer.shuffleStatus !== AstalMpris6.Shuffle.UNSUPPORTED) {
      currentPlayer.shuffle();
    }
  };
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-control shuffle", children: /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText,
      onClick,
      children: /* @__PURE__ */ jsx2("icon", { icon: icons_default.mpris.shuffle.enabled })
    }
  ) });
};

// src/components/menus/media/components/controls/Players.tsx
import AstalMpris7 from "gi://AstalMpris?version=0.1";
var mprisService3 = AstalMpris7.get_default();
var PreviousPlayer = () => {
  const className = bind(mprisService3, "players").as((players) => {
    const isDisabled = players.length <= 1 ? "disabled" : "enabled";
    return `media-indicator-control-button ${isDisabled}`;
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const isDisabled = mprisService3.get_players().length <= 1;
    if (!isDisabled) {
      getPreviousPlayer();
    }
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText: "Previous Player",
      onClick,
      children: /* @__PURE__ */ jsx2("label", { label: "\u{F0141}" })
    }
  );
};
var NextPlayer = () => {
  const className = bind(mprisService3, "players").as((players) => {
    const isDisabled = players.length <= 1 ? "disabled" : "enabled";
    return `media-indicator-control-button ${isDisabled}`;
  });
  const onClick = (_, event) => {
    if (!isPrimaryClick(event)) {
      return;
    }
    const isDisabled = mprisService3.get_players().length <= 1;
    if (!isDisabled) {
      getNextPlayer();
    }
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className,
      halign: Gtk4.Align.CENTER,
      hasTooltip: true,
      tooltipText: "Next Player",
      onClick,
      children: /* @__PURE__ */ jsx2("label", { label: "\u{F0142}" })
    }
  );
};

// src/components/menus/media/components/controls/index.tsx
var MediaControls = () => {
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-player-controls", vertical: true, children: /* @__PURE__ */ jsxs("box", { className: "media-indicator-current-controls", halign: Gtk4.Align.CENTER, children: [
    /* @__PURE__ */ jsx2(PreviousPlayer, {}),
    /* @__PURE__ */ jsx2(Shuffle, {}),
    /* @__PURE__ */ jsx2(PreviousTrack, {}),
    /* @__PURE__ */ jsx2(PlayPause, {}),
    /* @__PURE__ */ jsx2(NextTrack, {}),
    /* @__PURE__ */ jsx2(Loop, {}),
    /* @__PURE__ */ jsx2(NextPlayer, {})
  ] }) });
};

// src/components/menus/media/components/timebar/index.tsx
var { displayTimeTooltip } = configuration_default.menus.media;
var MediaSlider = () => {
  const sliderValue = Variable.derive([bind(activePlayer), bind(currentPosition)], (player, position2) => {
    if (player === void 0) {
      return 0;
    }
    if (player.length > 0) {
      return position2 / player.length;
    }
    return 0;
  });
  const dragHandler = ({ value }) => {
    const currentPlayer = activePlayer.get();
    if (currentPlayer !== void 0) {
      currentPlayer.set_position(value * currentPlayer.length);
    }
  };
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "media-indicator-current-progress-bar",
      hexpand: true,
      onDestroy: () => {
        sliderValue.drop();
      },
      children: /* @__PURE__ */ jsx2(
        "slider",
        {
          className: "menu-slider media progress",
          hasTooltip: bind(displayTimeTooltip),
          tooltipText: bind(timeStamp),
          value: sliderValue(),
          onDragged: dragHandler,
          drawValue: false,
          hexpand: true
        }
      )
    }
  );
};

// src/components/menus/media/components/timelabel/index.tsx
var { displayTime } = configuration_default.menus.media;
var MediaTimeStamp = () => {
  if (!displayTime.get()) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2("box", { className: "media-indicator-current-time-label", hexpand: true, children: /* @__PURE__ */ jsx2("label", { className: "time-label", label: bind(timeStamp), hexpand: true }) });
};

// src/components/menus/media/index.tsx
var { transition: transition5 } = configuration_default.menus;
var media_default5 = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "mediamenu",
      transition: bind(transition5).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsxs(MediaContainer, { children: [
        /* @__PURE__ */ jsx2(MediaInfo, {}),
        /* @__PURE__ */ jsx2(MediaControls, {}),
        /* @__PURE__ */ jsx2(MediaSlider, {}),
        /* @__PURE__ */ jsx2(MediaTimeStamp, {})
      ] })
    }
  );
};

// src/components/menus/notifications/controls/MenuLabel.tsx
var MenuLabel = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "menu-label-container notifications",
      halign: Gtk4.Align.START,
      valign: Gtk4.Align.CENTER,
      expand: true,
      children: /* @__PURE__ */ jsx2("label", { className: "menu-label notifications", label: "Notifications" })
    }
  );
};

// src/components/menus/notifications/controls/DndSwitch.tsx
import AstalNotifd5 from "gi://AstalNotifd?version=0.1";
var notifdService4 = AstalNotifd5.get_default();
var DndSwitch = () => {
  return /* @__PURE__ */ jsx2(
    "switch",
    {
      className: "menu-switch notifications",
      valign: Gtk4.Align.CENTER,
      active: bind(notifdService4, "dontDisturb").as((dontDisturb) => !dontDisturb),
      setup: (self) => {
        self.connect("notify::active", () => {
          notifdService4.set_dont_disturb(!self.active);
        });
      }
    }
  );
};

// src/components/menus/notifications/controls/ClearNotificationsButton.tsx
import AstalNotifd6 from "gi://AstalNotifd?version=0.1";
var notifdService5 = AstalNotifd6.get_default();
var { clearDelay: clearDelay2 } = configuration_default.notifications;
var ClearNotificationsButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "clear-notifications-button",
      tooltipText: "Clear Notifications",
      onClick: (_, event) => {
        if (!isPrimaryClick(event)) {
          return;
        }
        if (removingNotifications.get() === true) {
          return;
        }
        clearNotifications(notifdService5.get_notifications(), clearDelay2.get());
      },
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: bind(removingNotifications).as((removing) => {
            return removing === true ? "clear-notifications-label txt-icon removing" : "clear-notifications-label txt-icon";
          }),
          label: "\uF2D3"
        }
      )
    }
  );
};

// src/components/menus/notifications/controls/index.tsx
var Controls3 = () => {
  return /* @__PURE__ */ jsxs("box", { className: "notification-menu-controls", expand: false, vertical: false, children: [
    /* @__PURE__ */ jsx2(MenuLabel, {}),
    /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.END, valign: Gtk4.Align.CENTER, expand: false, children: [
      /* @__PURE__ */ jsx2(DndSwitch, {}),
      /* @__PURE__ */ jsx2(
        Separator_default,
        {
          halign: Gtk4.Align.CENTER,
          vexpand: true,
          className: "menu-separator notification-controls"
        }
      ),
      /* @__PURE__ */ jsx2(ClearNotificationsButton, {})
    ] })
  ] });
};

// src/components/menus/notifications/notification/index.tsx
import AstalNotifd8 from "gi://AstalNotifd?version=0.1";

// src/components/menus/notifications/notification/Placeholder.tsx
import AstalNotifd7 from "gi://AstalNotifd?version=0.1";
var notifdService6 = AstalNotifd7.get_default();
var Placeholder = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification-label-container",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.FILL,
      expand: true,
      children: /* @__PURE__ */ jsxs("box", { valign: Gtk4.Align.CENTER, vertical: true, expand: true, children: [
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "placeholder-label dim bell txt-icon",
            label: bind(notifdService6, "dontDisturb").as((dnd) => dnd ? "\u{F009B}" : "\u{F009A}"),
            valign: Gtk4.Align.CENTER
          }
        ),
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "placeholder-label dim message",
            label: "You're all caught up :)",
            valign: Gtk4.Align.START
          }
        )
      ] })
    }
  );
};

// src/components/menus/notifications/notification/index.tsx
var notifdService7 = AstalNotifd8.get_default();
var { displayedTotal: displayedTotal2, ignore: ignore4, showActionsOnHover: showActionsOnHover2 } = configuration_default.notifications;
var NotificationsContainer = ({ curPage }) => {
  return /* @__PURE__ */ jsx2("scrollable", { vscroll: Gtk4.PolicyType.AUTOMATIC, children: /* @__PURE__ */ jsx2(
    "box",
    {
      className: "menu-content-container notifications",
      halign: Gtk4.Align.FILL,
      spacing: 0,
      vexpand: true,
      children: Variable.derive(
        [
          bind(notifdService7, "notifications"),
          bind(curPage),
          bind(displayedTotal2),
          bind(ignore4),
          bind(showActionsOnHover2)
        ],
        (notifications, currentPage, totalDisplayed, ignored2, hoverActions) => {
          const filteredNotifications = filterNotifications(notifications, ignored2).sort(
            (a, b) => b.time - a.time
          );
          if (filteredNotifications.length <= 0) {
            return /* @__PURE__ */ jsx2(Placeholder, {});
          }
          const pageStart = (currentPage - 1) * totalDisplayed;
          const pageEnd = currentPage * totalDisplayed;
          return /* @__PURE__ */ jsx2(
            "box",
            {
              className: "notification-card-content-container",
              valign: Gtk4.Align.START,
              vexpand: false,
              vertical: true,
              children: filteredNotifications.slice(pageStart, pageEnd).map((notification) => {
                return /* @__PURE__ */ jsx2(
                  NotificationCard,
                  {
                    className: "notification-card menu",
                    notification,
                    showActions: hoverActions
                  }
                );
              })
            }
          );
        }
      )()
    }
  ) });
};

// src/components/menus/notifications/pager/index.tsx
import AstalNotifd9 from "gi://AstalNotifd?version=0.1";

// src/components/menus/notifications/pager/Buttons.tsx
var FirstPageButton = ({ curPage, currentPage }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      halign: Gtk4.Align.START,
      className: `pager-button left ${currentPage <= 1 ? "disabled" : ""}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          curPage.set(1);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "pager-button-label", label: "\uF100" })
    }
  );
};
var PreviousPageButton = ({ curPage, currentPage }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      halign: Gtk4.Align.START,
      className: `pager-button left ${currentPage <= 1 ? "disabled" : ""}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          curPage.set(currentPage <= 1 ? 1 : currentPage - 1);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "pager-button-label", label: "\uF104" })
    }
  );
};
var NextPageButton = ({
  curPage,
  currentPage,
  notifications,
  displayedTotal: displayedTotal5,
  dispTotal
}) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      halign: Gtk4.Align.END,
      className: `pager-button right ${currentPage >= Math.ceil(notifications.length / dispTotal) ? "disabled" : ""}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          const maxPage = Math.ceil(notifications.length / displayedTotal5.get());
          curPage.set(currentPage >= maxPage ? maxPage : currentPage + 1);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "pager-button-label", label: "\uF105" })
    }
  );
};
var LastPageButton = ({
  curPage,
  currentPage,
  notifications,
  displayedTotal: displayedTotal5,
  dispTotal
}) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      hexpand: true,
      halign: Gtk4.Align.END,
      className: `pager-button right ${currentPage >= Math.ceil(notifications.length / dispTotal) ? "disabled" : ""}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          const maxPage = Math.ceil(notifications.length / displayedTotal5.get());
          curPage.set(maxPage);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "pager-button-label", label: "\u{F013E}" })
    }
  );
};

// src/components/menus/notifications/pager/index.tsx
var notifdService8 = AstalNotifd9.get_default();
var { displayedTotal: displayedTotal3 } = configuration_default.notifications;
var { show: showPager } = configuration_default.theme.bar.menus.menu.notifications.pager;
var PageDisplay = ({ notifications, currentPage, dispTotal }) => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      hexpand: true,
      halign: Gtk4.Align.CENTER,
      className: "pager-label",
      label: `${currentPage} / ${Math.ceil(notifications.length / dispTotal) || 1}`
    }
  );
};
var NotificationPager = ({ curPage }) => {
  const pagerBinding = Variable.derive(
    [bind(curPage), bind(displayedTotal3), bind(notifdService8, "notifications"), bind(showPager)],
    (currentPage, dispTotal, notifications, showPgr) => {
      if (showPgr === false || currentPage === 1 && notifications.length <= dispTotal) {
        return /* @__PURE__ */ jsx2("box", {});
      }
      return /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx2(FirstPageButton, { curPage, currentPage }),
        /* @__PURE__ */ jsx2(PreviousPageButton, { curPage, currentPage }),
        /* @__PURE__ */ jsx2(
          PageDisplay,
          {
            notifications,
            currentPage,
            dispTotal
          }
        ),
        /* @__PURE__ */ jsx2(
          NextPageButton,
          {
            curPage,
            currentPage,
            notifications,
            displayedTotal: displayedTotal3,
            dispTotal
          }
        ),
        /* @__PURE__ */ jsx2(
          LastPageButton,
          {
            curPage,
            currentPage,
            notifications,
            displayedTotal: displayedTotal3,
            dispTotal
          }
        )
      ] });
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "notification-menu-pager",
      hexpand: true,
      vexpand: false,
      onDestroy: () => {
        pagerBinding.drop();
      },
      children: pagerBinding()
    }
  );
};

// src/components/menus/notifications/helpers.ts
import AstalNotifd10 from "gi://AstalNotifd?version=0.1";
var { displayedTotal: displayedTotal4 } = configuration_default.notifications;
var notifdService9 = AstalNotifd10.get_default();
var handlePageBoundaries = (curPage) => {
  Variable.derive(
    [bind(curPage), bind(displayedTotal4), bind(notifdService9, "notifications")],
    (currentPage, dispTotal, notifications) => {
      const isPageEmpty = notifications.length <= (currentPage - 1) * dispTotal;
      if (isPageEmpty) {
        const previousPage = currentPage <= 1 ? 1 : currentPage - 1;
        curPage.set(previousPage);
      }
    }
  );
};

// src/components/menus/notifications/index.tsx
var { transition: transition6 } = configuration_default.menus;
var notifications_default6 = () => {
  const curPage = Variable(1);
  handlePageBoundaries(curPage);
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "notificationsmenu",
      transition: bind(transition6).as((transition10) => RevealerTransitionMap[transition10]),
      onDestroy: () => {
        curPage.drop();
      },
      children: /* @__PURE__ */ jsx2("box", { className: "notification-menu-content", hexpand: true, vexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "notification-card-container menu", hexpand: true, vexpand: true, vertical: true, children: [
        /* @__PURE__ */ jsx2(Controls3, {}),
        /* @__PURE__ */ jsx2(NotificationsContainer, { curPage }),
        /* @__PURE__ */ jsx2(NotificationPager, { curPage })
      ] }) })
    }
  );
};

// src/components/menus/calendar/time/MilitaryTime.tsx
var { military: military2, hideSeconds } = configuration_default.menus.clock.time;
var MilitaryTime = () => {
  const timeBinding = Variable.derive([bind(military2), bind(hideSeconds)], (is24hr, hideSeconds3) => {
    if (!is24hr) {
      return /* @__PURE__ */ jsx2("box", {});
    }
    return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
      "label",
      {
        className: "clock-content-time",
        label: bind(systemTime).as((time2) => {
          return time2?.format(hideSeconds3 ? "%H:%M" : "%H:%M:%S") ?? "";
        })
      }
    ) });
  });
  return /* @__PURE__ */ jsx2(
    "box",
    {
      onDestroy: () => {
        timeBinding.drop();
      },
      children: timeBinding()
    }
  );
};

// src/components/menus/calendar/time/StandardTime.tsx
var { military: military3, hideSeconds: hideSeconds2 } = configuration_default.menus.clock.time;
var period = Variable("").poll(1e3, () => default2.DateTime.new_now_local().format("%p") ?? "");
var StandardTime = () => {
  const CurrentTime = ({ hideSeconds: hideSeconds3 }) => {
    return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
      "label",
      {
        className: "clock-content-time",
        label: bind(systemTime).as((time2) => {
          return time2?.format(hideSeconds3 ? "%I:%M" : "%I:%M:%S") ?? "";
        })
      }
    ) });
  };
  const CurrentPeriod = () => {
    return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2("label", { className: "clock-content-period", valign: Gtk4.Align.END, label: bind(period) }) });
  };
  const timeBinding = Variable.derive([bind(military3), bind(hideSeconds2)], (is24hr, hideSeconds3) => {
    if (is24hr) {
      return /* @__PURE__ */ jsx2("box", {});
    }
    return /* @__PURE__ */ jsxs("box", { children: [
      /* @__PURE__ */ jsx2(CurrentTime, { hideSeconds: hideSeconds3 }),
      /* @__PURE__ */ jsx2(CurrentPeriod, {})
    ] });
  });
  return /* @__PURE__ */ jsx2(
    "box",
    {
      onDestroy: () => {
        timeBinding.drop();
      },
      children: timeBinding()
    }
  );
};

// src/components/menus/calendar/time/index.tsx
var TimeWidget = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "calendar-menu-item-container clock",
      valign: Gtk4.Align.CENTER,
      halign: Gtk4.Align.FILL,
      hexpand: true,
      children: /* @__PURE__ */ jsxs(
        "box",
        {
          className: "clock-content-items",
          valign: Gtk4.Align.CENTER,
          halign: Gtk4.Align.CENTER,
          hexpand: true,
          children: [
            /* @__PURE__ */ jsx2(StandardTime, {}),
            /* @__PURE__ */ jsx2(MilitaryTime, {})
          ]
        }
      )
    }
  );
};

// src/components/shared/Calendar.tsx
var Calendar = class extends astalify(Gtk4.Calendar) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Calendar.
   * @param props - The properties for the Calendar component.
   * @memberof Calendar
   */
  constructor(props) {
    super(props);
  }
};
var Calendar_default = Calendar;

// src/components/menus/calendar/CalendarWidget.tsx
var CalendarWidget = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "calendar-menu-item-container calendar",
      halign: Gtk4.Align.FILL,
      valign: Gtk4.Align.FILL,
      expand: true,
      children: /* @__PURE__ */ jsx2("box", { className: "calendar-container-box", children: /* @__PURE__ */ jsx2(
        Calendar_default,
        {
          className: "calendar-menu-widget",
          halign: Gtk4.Align.FILL,
          valign: Gtk4.Align.FILL,
          showDetails: false,
          expand: true,
          showDayNames: true,
          showHeading: true
        }
      ) })
    }
  );
};

// src/components/menus/calendar/weather/icon/index.tsx
var weatherService2 = WeatherService.getInstance();
var TodayIcon = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "calendar-menu-weather today icon container",
      halign: Gtk4.Align.START,
      valign: Gtk4.Align.CENTER,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "calendar-menu-weather today icon txt-icon",
          label: bind(weatherService2.statusIcon)
        }
      )
    }
  );
};

// src/components/menus/calendar/weather/stats/index.tsx
var weatherService3 = WeatherService.getInstance();
var TodayStats = () => {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "calendar-menu-weather today stats container",
      halign: Gtk4.Align.END,
      valign: Gtk4.Align.CENTER,
      vertical: true,
      children: [
        /* @__PURE__ */ jsxs("box", { className: "weather wind", children: [
          /* @__PURE__ */ jsx2("label", { className: "weather wind icon txt-icon", label: "\uE27E" }),
          /* @__PURE__ */ jsx2("label", { className: "weather wind label", label: bind(weatherService3.windCondition) })
        ] }),
        /* @__PURE__ */ jsxs("box", { className: "weather precip", children: [
          /* @__PURE__ */ jsx2("label", { className: "weather precip icon txt-icon", label: "\uE371" }),
          /* @__PURE__ */ jsx2(
            "label",
            {
              className: "weather precip label",
              label: bind(weatherService3.rainChance).as((chanceOfRain) => `${chanceOfRain}%`)
            }
          )
        ] })
      ]
    }
  );
};

// src/components/menus/calendar/weather/temperature/index.tsx
var { unit: unit3 } = configuration_default.menus.clock.weather;
var weatherService4 = WeatherService.getInstance();
unit3.subscribe((unitType) => weatherService4.unit = unitType);
var WeatherStatus = () => {
  return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: bind(weatherService4.gaugeIcon).as(
        (gauge) => `calendar-menu-weather today condition label ${gauge.color}`
      ),
      label: bind(weatherService4.weatherData).as(
        (weather) => toTitleCase(weather.current.condition.text)
      ),
      truncate: true,
      tooltipText: bind(weatherService4.weatherData).as((weather) => weather.current.condition.text)
    }
  ) });
};
var Temperature = () => {
  const TemperatureLabel = () => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        className: "calendar-menu-weather today temp label",
        label: bind(weatherService4.temperature)
      }
    );
  };
  const ThermometerIcon = () => {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        className: bind(weatherService4.gaugeIcon).as(
          (gauge) => `calendar-menu-weather today temp label icon txt-icon ${gauge.color}`
        ),
        label: bind(weatherService4.gaugeIcon).as((gauge) => gauge.icon)
      }
    );
  };
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "calendar-menu-weather today temp container",
      valign: Gtk4.Align.CENTER,
      vertical: false,
      hexpand: true,
      children: /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.CENTER, hexpand: true, children: [
        /* @__PURE__ */ jsx2(TemperatureLabel, {}),
        /* @__PURE__ */ jsx2(ThermometerIcon, {})
      ] })
    }
  );
};
var TodayTemperature = () => {
  return /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.CENTER, valign: Gtk4.Align.CENTER, vertical: true, children: [
    /* @__PURE__ */ jsx2(Temperature, {}),
    /* @__PURE__ */ jsx2(WeatherStatus, {})
  ] });
};

// src/components/menus/calendar/weather/hourly/helpers.ts
var getTargetHour = (baseTime, hoursFromNow) => {
  const targetTime = new Date(baseTime);
  const newHour = targetTime.getHours() + hoursFromNow;
  targetTime.setHours(newHour);
  targetTime.setMinutes(0, 0, 0);
  const currentHour = baseTime.getHours();
  if (currentHour > 19) {
    const hoursToRewind = currentHour - 19;
    targetTime.setHours(targetTime.getHours() - hoursToRewind);
  }
  return targetTime;
};
var getHourlyWeatherIcon = (weather, hoursFromNow) => {
  if (!weather?.forecast?.[0]?.hourly) {
    return "\u{F0F2F}" /* WARNING */;
  }
  const targetHour = getTargetHour(weather.lastUpdated, hoursFromNow);
  const targetTime = targetHour.getTime();
  const weatherAtHour = weather.forecast[0].hourly.find((hour) => {
    const hourTime = hour.time.getTime();
    return hourTime === targetTime;
  });
  if (!weatherAtHour) {
    return "\u{F0F2F}" /* WARNING */;
  }
  const iconQuery = weatherAtHour.condition?.text ?? "WARNING";
  return WeatherIcon[iconQuery];
};

// src/components/menus/calendar/weather/hourly/icon/index.tsx
var weatherService5 = WeatherService.getInstance();
var HourlyIcon = ({ hoursFromNow }) => {
  return /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      className: "hourly-weather-icon txt-icon",
      label: bind(weatherService5.weatherData).as((weather) => {
        const weatherIcon = getHourlyWeatherIcon(weather, hoursFromNow);
        return weatherIcon;
      }),
      halign: Gtk4.Align.CENTER
    }
  ) });
};

// src/components/menus/calendar/weather/hourly/temperature/index.tsx
var weatherService6 = WeatherService.getInstance();
var { unit: unit4 } = configuration_default.menus.clock.weather;
var HourlyTemp = ({ hoursFromNow }) => {
  const weatherBinding = Variable.derive(
    [bind(weatherService6.weatherData), bind(unit4)],
    (weather, unitType) => {
      if (!Object.keys(weather).length || !weather?.forecast?.[0]?.hourly) {
        return "-";
      }
      const targetHour = getTargetHour(/* @__PURE__ */ new Date(), hoursFromNow);
      const weatherAtTargetHour = weather.forecast[0].hourly.find(
        (h) => h.time.getTime() === targetHour.getTime()
      );
      const temperatureAtTargetHour = weatherAtTargetHour?.temperature ?? 0;
      const tempConverter = TemperatureConverter.fromCelsius(temperatureAtTargetHour);
      const isImperial = unitType === "imperial";
      return isImperial ? tempConverter.formatFahrenheit() : tempConverter.formatCelsius();
    }
  );
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "hourly-weather-temp",
      label: weatherBinding(),
      onDestroy: () => {
        weatherBinding.drop();
      }
    }
  );
};

// src/components/menus/calendar/weather/hourly/time/index.tsx
var weatherService7 = WeatherService.getInstance();
var { military: military4 } = configuration_default.menus.clock.time;
var HourlyTime = ({ hoursFromNow }) => {
  const weatherBinding = Variable.derive(
    [bind(weatherService7.weatherData), bind(military4)],
    (weather, military5) => {
      if (!Object.keys(weather).length) {
        return "-";
      }
      const targetHour = getTargetHour(/* @__PURE__ */ new Date(), hoursFromNow);
      let hours = targetHour.getHours();
      if (military5) {
        return `${hours}:00`;
      }
      const ampm = hours >= 12 ? "PM" : "AM";
      hours = hours % 12 || 12;
      return `${hours}${ampm}`;
    }
  );
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "hourly-weather-time",
      label: weatherBinding(),
      onDestroy: () => {
        weatherBinding.drop();
      }
    }
  );
};

// src/components/menus/calendar/weather/hourly/index.tsx
var HourlyTemperature = () => {
  return /* @__PURE__ */ jsx2("box", { className: "hourly-weather-container", halign: Gtk4.Align.FILL, vertical: false, hexpand: true, children: [1, 2, 3, 4].map((hoursFromNow) => /* @__PURE__ */ jsxs("box", { className: "hourly-weather-item", hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2(HourlyTime, { hoursFromNow }),
    /* @__PURE__ */ jsx2(HourlyIcon, { hoursFromNow }),
    /* @__PURE__ */ jsx2(HourlyTemp, { hoursFromNow })
  ] })) });
};

// src/components/menus/calendar/weather/index.tsx
var WeatherWidget = ({ isEnabled }) => {
  if (!isEnabled) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2("box", { className: "calendar-menu-item-container weather", children: /* @__PURE__ */ jsx2("box", { className: "weather-container-box", children: /* @__PURE__ */ jsxs("box", { vertical: true, hexpand: true, children: [
    /* @__PURE__ */ jsxs("box", { className: "calendar-menu-weather today", hexpand: true, children: [
      /* @__PURE__ */ jsx2(TodayIcon, {}),
      /* @__PURE__ */ jsx2(TodayTemperature, {}),
      /* @__PURE__ */ jsx2(TodayStats, {})
    ] }),
    /* @__PURE__ */ jsx2(Separator_default, { className: "menu-separator weather" }),
    /* @__PURE__ */ jsx2(HourlyTemperature, {})
  ] }) }) });
};

// src/components/menus/calendar/index.tsx
var { transition: transition7 } = configuration_default.menus;
var { enabled: weatherEnabled } = configuration_default.menus.clock.weather;
var calendar_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "calendarmenu",
      transition: bind(transition7).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { css: "padding: 1px; margin: -1px;", children: bind(weatherEnabled).as((isWeatherEnabled) => {
        return /* @__PURE__ */ jsx2("box", { className: "calendar-menu-content", vexpand: false, children: /* @__PURE__ */ jsx2("box", { className: "calendar-content-container", vertical: true, children: /* @__PURE__ */ jsxs("box", { className: "calendar-content-items", vertical: true, children: [
          /* @__PURE__ */ jsx2(TimeWidget, {}),
          /* @__PURE__ */ jsx2(CalendarWidget, {}),
          /* @__PURE__ */ jsx2(WeatherWidget, { isEnabled: isWeatherEnabled })
        ] }) }) });
      }) })
    }
  );
};

// src/components/menus/energy/profiles/helpers.ts
var renderUptime = (curUptime) => {
  const days = Math.floor(curUptime / (60 * 24));
  const hours = Math.floor(curUptime % (60 * 24) / 60);
  const minutes = Math.floor(curUptime % 60);
  return `\uF252 : ${days}d ${hours}h ${minutes}m`;
};

// src/services/system/uptime/index.ts
var uptime = Variable(0).poll(
  6e3,
  "cat /proc/uptime",
  (line) => Number.parseInt(line.split(".")[0]) / 60
);

// src/components/menus/energy/profiles/Header.tsx
var PowerProfileHeader = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: [
    /* @__PURE__ */ jsx2("label", { className: "menu-label", label: "Power Profile", halign: Gtk4.Align.START, hexpand: true }),
    /* @__PURE__ */ jsx2("label", { className: "menu-label uptime", label: bind(uptime).as(renderUptime), tooltipText: "Uptime" })
  ] });
};

// src/components/menus/energy/profiles/Profile.tsx
import AstalPowerProfiles from "gi://AstalPowerProfiles?version=0.1";
var PowerProfiles = () => {
  const powerProfilesService = AstalPowerProfiles.get_default();
  const powerProfiles = powerProfilesService.get_profiles();
  return /* @__PURE__ */ jsx2("box", { className: "menu-items-section", valign: Gtk4.Align.FILL, vexpand: true, vertical: true, children: powerProfiles.map((powerProfile) => {
    const profileType = powerProfile.profile;
    return /* @__PURE__ */ jsx2(
      "button",
      {
        className: bind(powerProfilesService, "activeProfile").as(
          (active3) => `power-profile-item ${active3 === powerProfile.profile ? "active" : ""}`
        ),
        onClick: (_, event) => {
          if (isPrimaryClick(event)) {
            powerProfilesService.activeProfile = powerProfile.profile;
          }
        },
        children: /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(
            "icon",
            {
              className: "power-profile-icon",
              icon: icons_default.powerprofile[profileType] || icons_default.powerprofile.balanced
            }
          ),
          /* @__PURE__ */ jsx2("label", { className: "power-profile-label", label: profileType })
        ] })
      }
    );
  }) });
};

// src/components/menus/energy/profiles/index.tsx
var EnergyProfiles = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container energy", vertical: true, children: [
    /* @__PURE__ */ jsx2(PowerProfileHeader, {}),
    /* @__PURE__ */ jsx2(PowerProfiles, {})
  ] });
};

// src/components/menus/energy/brightness/Header.tsx
var BrightnessHeader = () => {
  return /* @__PURE__ */ jsx2("box", { className: "menu-label-container", halign: Gtk4.Align.FILL, children: /* @__PURE__ */ jsx2("label", { className: "menu-label", halign: Gtk4.Align.START, label: "Brightness", hexpand: true }) });
};

// src/components/menus/energy/brightness/Icon.tsx
var BrightnessIcon = () => {
  return /* @__PURE__ */ jsx2(
    "icon",
    {
      className: "brightness-slider-icon",
      valign: Gtk4.Align.CENTER,
      icon: icons_default.brightness.screen,
      vexpand: true
    }
  );
};

// src/components/menus/energy/brightness/Slider.tsx
var brightnessService5 = BrightnessService.getInstance();
var BrightnessSlider = () => {
  return /* @__PURE__ */ jsx2(
    "slider",
    {
      className: "menu-active-slider menu-slider brightness",
      value: bind(brightnessService5, "screen"),
      onDragged: ({ value, dragging }) => {
        if (dragging) {
          brightnessService5.screen = value;
        }
      },
      valign: Gtk4.Align.CENTER,
      drawValue: false,
      expand: true,
      min: 0,
      max: 1
    }
  );
};

// src/components/menus/energy/brightness/Percentage.tsx
var brightnessService6 = BrightnessService.getInstance();
var BrightnessPercentage = () => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "brightness-slider-label",
      label: bind(brightnessService6, "screen").as((screenBrightness) => {
        return `${Math.round(screenBrightness * 100)}%`;
      }),
      valign: Gtk4.Align.CENTER,
      vexpand: true
    }
  );
};

// src/components/menus/energy/brightness/index.tsx
var Brightness = () => {
  return /* @__PURE__ */ jsxs("box", { className: "menu-section-container brightness", vertical: true, children: [
    /* @__PURE__ */ jsx2(BrightnessHeader, {}),
    /* @__PURE__ */ jsx2("box", { className: "menu-items-section", valign: Gtk4.Align.FILL, vexpand: true, vertical: true, children: /* @__PURE__ */ jsxs("box", { className: "brightness-container", children: [
      /* @__PURE__ */ jsx2(BrightnessIcon, {}),
      /* @__PURE__ */ jsx2(BrightnessSlider, {}),
      /* @__PURE__ */ jsx2(BrightnessPercentage, {})
    ] }) })
  ] });
};

// src/components/menus/energy/index.tsx
var { transition: transition8 } = configuration_default.menus;
var energy_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "energymenu",
      transition: bind(transition8).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items energy", halign: Gtk4.Align.FILL, hexpand: true, children: /* @__PURE__ */ jsxs("box", { className: "menu-items-container energy", halign: Gtk4.Align.FILL, hexpand: true, vertical: true, children: [
        /* @__PURE__ */ jsx2(Brightness, {}),
        /* @__PURE__ */ jsx2(EnergyProfiles, {})
      ] }) })
    }
  );
};

// src/components/menus/dashboard/profile/Profile.tsx
var { image: image2, name } = configuration_default.menus.dashboard.powermenu.avatar;
var ProfilePicture = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "profile-picture",
      halign: Gtk4.Align.CENTER,
      css: bind(image2).as((img) => {
        if (isAnImage(img)) {
          return `background-image: url("${normalizeToAbsolutePath(img)}")`;
        }
        return `background-image: url("${SRC_DIR}/assets/hyprpanel.png")`;
      })
    }
  );
};
var ProfileName = () => {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "profile-name",
      halign: Gtk4.Align.CENTER,
      label: bind(name).as((profileName) => {
        if (profileName === "system") {
          const username = default2.get_user_name();
          return username;
        }
        return profileName;
      })
    }
  );
};
var UserProfile = () => {
  return /* @__PURE__ */ jsxs("box", { className: "profile-picture-container dashboard-card", hexpand: true, vertical: true, children: [
    /* @__PURE__ */ jsx2(ProfilePicture, {}),
    /* @__PURE__ */ jsx2(ProfileName, {})
  ] });
};

// src/components/menus/dashboard/profile/helpers.ts
var { confirmation, shutdown: shutdown2, logout: logout2, sleep: sleep2, reboot: reboot2 } = configuration_default.menus.dashboard.powermenu;
var handleClick = (action) => {
  const actions = {
    shutdown: shutdown2.get(),
    reboot: reboot2.get(),
    logout: logout2.get(),
    sleep: sleep2.get()
  };
  app_default.get_window("dashboardmenu")?.set_visible(false);
  if (!confirmation.get()) {
    execAsync(actions[action]).catch(
      (err) => console.error(`Failed to execute ${action} command. Error: ${err}`)
    );
  } else {
    actions_default.action(action);
  }
};

// src/components/menus/dashboard/profile/PowerButtons.tsx
var PowerActionButton = (icon14, tooltip, action) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: `dashboard-button ${action}`,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          handleClick(action);
        }
      },
      tooltip_text: tooltip,
      vexpand: true,
      children: /* @__PURE__ */ jsx2("label", { className: "txt-icon", label: icon14 })
    }
  );
};
var ShutDown = () => {
  return PowerActionButton("\u{F0425}", "Shut Down", "shutdown");
};
var Reboot = () => {
  return PowerActionButton("\u{F0709}", "Reboot", "reboot");
};
var LogOut = () => {
  return PowerActionButton("\u{F0FC5}", "Log Out", "logout");
};
var Sleep = () => {
  return PowerActionButton("\u{F0904}", "Sleep", "sleep");
};

// src/components/menus/dashboard/profile/PowerMenu.tsx
var PowerMenu2 = () => {
  return /* @__PURE__ */ jsxs("box", { className: "power-menu-container dashboard-card", vertical: true, vexpand: true, children: [
    /* @__PURE__ */ jsx2(ShutDown, {}),
    /* @__PURE__ */ jsx2(Reboot, {}),
    /* @__PURE__ */ jsx2(LogOut, {}),
    /* @__PURE__ */ jsx2(Sleep, {})
  ] });
};

// src/components/menus/dashboard/profile/index.tsx
var Profile = () => {
  return /* @__PURE__ */ jsxs("box", { className: "profiles-container", halign: Gtk4.Align.FILL, hexpand: true, children: [
    /* @__PURE__ */ jsx2(UserProfile, {}),
    /* @__PURE__ */ jsx2(PowerMenu2, {})
  ] });
};

// src/components/menus/dashboard/shortcuts/helpers.ts
var { left } = configuration_default.menus.dashboard.shortcuts;
var pollingInterval10 = Variable(1e3);
var getRecordingPath = () => configuration_default.menus.dashboard.recording.path.get();
var executeCommand = async (command) => {
  try {
    await execAsync(`bash -c '${command}'`);
  } catch (err) {
    console.error("Command failed:", command);
    console.error("Error:", err);
  }
};
var handleClick2 = (action, tOut = 0) => {
  app_default.get_window("dashboardmenu")?.set_visible(false);
  timeout(tOut, () => {
    execAsync(`bash -c "${action}"`).then((res) => res).catch((err) => console.error(err));
  });
};
var hasCommand = (shortCut) => {
  return shortCut.command.get().length > 0;
};
var leftCardHidden = Variable(
  !(hasCommand(left.shortcut1) || hasCommand(left.shortcut2) || hasCommand(left.shortcut3) || hasCommand(left.shortcut4))
);
var isRecording = Variable(false);
var recordingPoller = new BashPoller(
  isRecording,
  [],
  bind(pollingInterval10),
  `${SRC_DIR}/scripts/screen_record.sh status`,
  handleRecorder
);
function handleRecorder(commandOutput) {
  return commandOutput === "recording";
}

// src/components/menus/dashboard/shortcuts/buttons/ShortcutButtons.tsx
var { left: left2, right } = configuration_default.menus.dashboard.shortcuts;
var ShortcutButton = ({ shortcut, ...props }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      vexpand: true,
      tooltipText: shortcut.tooltip.get(),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          handleClick2(shortcut.command.get());
        }
      },
      ...props,
      children: /* @__PURE__ */ jsx2("label", { className: "button-label txt-icon", label: shortcut.icon.get() })
    }
  );
};
var LeftShortcut1 = () => {
  if (!hasCommand(left2.shortcut1)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(
    ShortcutButton,
    {
      shortcut: left2.shortcut1,
      className: `dashboard-button top-button ${hasCommand(left2.shortcut2) ? "paired" : ""}`
    }
  );
};
var LeftShortcut2 = () => {
  if (!hasCommand(left2.shortcut2)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(ShortcutButton, { shortcut: left2.shortcut2, className: "dashboard-button" });
};
var LeftShortcut3 = () => {
  if (!hasCommand(left2.shortcut3)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(
    ShortcutButton,
    {
      shortcut: left2.shortcut3,
      className: `dashboard-button top-button ${hasCommand(left2.shortcut4) ? "paired" : ""}`
    }
  );
};
var LeftShortcut4 = () => {
  if (!hasCommand(left2.shortcut4)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(ShortcutButton, { shortcut: left2.shortcut4, className: "dashboard-button " });
};
var RightShortcut1 = () => {
  if (!hasCommand(right.shortcut1)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(ShortcutButton, { shortcut: right.shortcut1, className: "dashboard-button top-button paired" });
};
var RightShortcut3 = () => {
  if (!hasCommand(right.shortcut3)) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  return /* @__PURE__ */ jsx2(ShortcutButton, { shortcut: right.shortcut3, className: "dashboard-button top-button paired" });
};

// src/components/menus/dashboard/shortcuts/sections/Column.tsx
var LeftColumn = ({ isVisible, children }) => {
  return /* @__PURE__ */ jsx2("box", { className: `card-button-section-container ${isVisible === true ? "visible" : ""}`, children: isVisible === true ? /* @__PURE__ */ jsx2("box", { vertical: true, hexpand: true, vexpand: true, children }) : /* @__PURE__ */ jsx2("box", {}) });
};
var RightColumn = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "card-button-section-container", children: /* @__PURE__ */ jsx2("box", { vertical: true, hexpand: true, vexpand: true, children }) });
};

// src/components/menus/dashboard/shortcuts/buttons/SettingsButton.tsx
var SettingsButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "dashboard-button",
      tooltipText: "HyprPanel Configuration",
      vexpand: true,
      onButtonPressEvent: (_, event) => {
        const buttonClicked = event.get_button()[1];
        if (buttonClicked !== Gdk.BUTTON_PRIMARY) {
          return;
        }
        app_default.get_window("dashboardmenu")?.set_visible(false);
        app_default.toggle_window("settings-dialog");
      },
      children: /* @__PURE__ */ jsx2("label", { className: "button-label txt-icon", label: "\u{F0493}" })
    }
  );
};

// src/components/shared/Menu.tsx
var Menu2 = class extends astalify(Gtk4.Menu) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of Menu.
   * @param props - The properties for the Menu component.
   * @memberof Menu
   */
  constructor(props) {
    super(props);
  }
};
var Menu_default = Menu2;

// src/components/shared/MenuItem.tsx
var MenuItem = class extends astalify(Gtk4.MenuItem) {
  static {
    GObject4.registerClass(this);
  }
  /**
   * Creates an instance of MenuItem.
   * @param props - The properties for the MenuItem component.
   * @memberof MenuItem
   */
  constructor(props) {
    super(props);
  }
};
var MenuItem_default = MenuItem;

// src/components/menus/dashboard/shortcuts/buttons/RecordingButton.tsx
import AstalHyprland18 from "gi://AstalHyprland?version=0.1";
var hyprlandService17 = AstalHyprland18.get_default();
var MonitorListDropdown = () => {
  const monitorList = Variable([]);
  const monitorBinding = Variable.derive([bind(hyprlandService17, "monitors")], () => {
    monitorList.set(hyprlandService17.get_monitors());
  });
  return /* @__PURE__ */ jsxs(
    Menu_default,
    {
      className: "dropdown recording",
      halign: Gtk4.Align.FILL,
      onDestroy: () => monitorBinding.drop(),
      hexpand: true,
      children: [
        bind(monitorList).as(
          (monitors) => monitors.map((monitor3) => {
            const sanitizedPath = getRecordingPath().replace(/"/g, '\\"');
            return /* @__PURE__ */ jsx2(
              MenuItem_default,
              {
                label: `Display ${monitor3.name}`,
                onButtonPressEvent: (_, event) => {
                  if (event.get_button()[1] !== Gdk.BUTTON_PRIMARY) return;
                  app_default.get_window("dashboardmenu")?.set_visible(false);
                  const command = `${SRC_DIR}/scripts/screen_record.sh start screen "${monitor3.name}" "${sanitizedPath}"`;
                  executeCommand(command);
                }
              }
            );
          })
        ),
        /* @__PURE__ */ jsx2(
          MenuItem_default,
          {
            label: "Region",
            onButtonPressEvent: (_, event) => {
              if (event.get_button()[1] !== Gdk.BUTTON_PRIMARY) return;
              app_default.get_window("dashboardmenu")?.set_visible(false);
              const sanitizedPath = getRecordingPath().replace(/"/g, '\\"');
              const command = `${SRC_DIR}/scripts/screen_record.sh start region "${sanitizedPath}"`;
              executeCommand(command);
            }
          }
        )
      ]
    }
  );
};
var RecordingButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: `dashboard-button record ${isRecording.get() ? "active" : ""}`,
      tooltipText: "Record Screen",
      vexpand: true,
      onButtonPressEvent: (_, event) => {
        const buttonClicked = event.get_button()[1];
        if (buttonClicked !== Gdk.BUTTON_PRIMARY) {
          return;
        }
        const sanitizedPath = getRecordingPath().replace(/"/g, '\\"');
        if (isRecording.get() === true) {
          app_default.get_window("dashboardmenu")?.set_visible(false);
          const command = `${SRC_DIR}/scripts/screen_record.sh stop "${sanitizedPath}"`;
          executeCommand(command);
        } else {
          const monitorDropdownList = MonitorListDropdown();
          monitorDropdownList.popup_at_pointer(event);
        }
      },
      children: /* @__PURE__ */ jsx2("label", { className: "button-label txt-icon", label: "\u{F044A}" })
    }
  );
};

// src/components/menus/dashboard/shortcuts/sections/Section.tsx
var { left: left3, right: right2 } = configuration_default.menus.dashboard.shortcuts;
var leftBindings = [
  bind(left3.shortcut1.command),
  bind(left3.shortcut1.tooltip),
  bind(left3.shortcut1.icon),
  bind(left3.shortcut2.command),
  bind(left3.shortcut2.tooltip),
  bind(left3.shortcut2.icon),
  bind(left3.shortcut3.command),
  bind(left3.shortcut3.tooltip),
  bind(left3.shortcut3.icon),
  bind(left3.shortcut4.command),
  bind(left3.shortcut4.tooltip),
  bind(left3.shortcut4.icon)
];
var rightBindings = [
  bind(right2.shortcut1.command),
  bind(right2.shortcut1.tooltip),
  bind(right2.shortcut1.icon),
  bind(right2.shortcut3.command),
  bind(right2.shortcut3.tooltip),
  bind(right2.shortcut3.icon),
  bind(leftCardHidden),
  bind(isRecording)
];
var LeftShortcuts = () => {
  return /* @__PURE__ */ jsx2("box", { children: Variable.derive(leftBindings, () => {
    const isVisibleLeft = hasCommand(left3.shortcut1) || hasCommand(left3.shortcut2);
    const isVisibleRight = hasCommand(left3.shortcut3) || hasCommand(left3.shortcut4);
    if (!isVisibleLeft && !isVisibleRight) {
      leftCardHidden.set(true);
      return /* @__PURE__ */ jsx2("box", {});
    }
    leftCardHidden.set(false);
    return /* @__PURE__ */ jsxs("box", { className: "container most-used dashboard-card", children: [
      /* @__PURE__ */ jsxs(LeftColumn, { isVisible: isVisibleRight && isVisibleLeft, children: [
        /* @__PURE__ */ jsx2(LeftShortcut1, {}),
        /* @__PURE__ */ jsx2(LeftShortcut2, {})
      ] }),
      /* @__PURE__ */ jsxs(RightColumn, { children: [
        /* @__PURE__ */ jsx2(LeftShortcut3, {}),
        /* @__PURE__ */ jsx2(LeftShortcut4, {})
      ] })
    ] });
  })() });
};
var RightShortcuts = () => {
  return /* @__PURE__ */ jsx2("box", { children: Variable.derive(rightBindings, () => {
    return /* @__PURE__ */ jsxs(
      "box",
      {
        className: `container utilities dashboard-card ${!leftCardHidden.get() ? "paired" : ""}`,
        children: [
          /* @__PURE__ */ jsxs(LeftColumn, { isVisible: true, children: [
            /* @__PURE__ */ jsx2(RightShortcut1, {}),
            /* @__PURE__ */ jsx2(SettingsButton, {})
          ] }),
          /* @__PURE__ */ jsxs(RightColumn, { children: [
            /* @__PURE__ */ jsx2(RightShortcut3, {}),
            /* @__PURE__ */ jsx2(RecordingButton, {})
          ] })
        ]
      }
    );
  })() });
};

// src/components/menus/dashboard/shortcuts/index.tsx
var Shortcuts = ({ isEnabled }) => {
  if (!isEnabled) {
    recordingPoller.stop();
    return null;
  }
  recordingPoller.initialize();
  return /* @__PURE__ */ jsxs("box", { className: "shortcuts-container", halign: Gtk4.Align.FILL, hexpand: true, children: [
    /* @__PURE__ */ jsx2(LeftShortcuts, {}),
    /* @__PURE__ */ jsx2(RightShortcuts, {})
  ] });
};

// src/components/menus/dashboard/controls/helpers.ts
import AstalNetwork14 from "gi://AstalNetwork?version=0.1";
var networkService13 = AstalNetwork14.get_default();
var isWifiEnabled = Variable(false);
var wifiEnabledBinding;
Variable.derive([bind(networkService13, "wifi")], () => {
  wifiEnabledBinding?.drop();
  wifiEnabledBinding = void 0;
  if (networkService13.wifi === null) {
    return;
  }
  wifiEnabledBinding = Variable.derive([bind(networkService13.wifi, "enabled")], (isEnabled) => {
    isWifiEnabled.set(isEnabled);
  });
});

// src/components/menus/dashboard/controls/ControlButtons.tsx
import AstalNotifd11 from "gi://AstalNotifd?version=0.1";
import AstalBluetooth7 from "gi://AstalBluetooth?version=0.1";
import AstalNetwork15 from "gi://AstalNetwork?version=0.1";
import AstalWp12 from "gi://AstalWp?version=0.1";
var wireplumber11 = AstalWp12.get_default();
var audioService11 = wireplumber11.audio;
var networkService14 = AstalNetwork15.get_default();
var bluetoothService7 = AstalBluetooth7.get_default();
var notifdService10 = AstalNotifd11.get_default();
var WifiButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(isWifiEnabled).as(
        (isEnabled) => `dashboard-button wifi ${!isEnabled ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          networkService14.wifi?.set_enabled(!networkService14.wifi.enabled);
        }
      },
      tooltipText: "Toggle Wifi",
      expand: true,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "txt-icon",
          label: bind(isWifiEnabled).as((isEnabled) => isEnabled ? "\u{F0928}" : "\u{F092D}")
        }
      )
    }
  );
};
var BluetoothButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(bluetoothService7, "isPowered").as(
        (isEnabled) => `dashboard-button bluetooth ${!isEnabled ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          bluetoothService7.toggle();
        }
      },
      tooltipText: "Toggle Bluetooth",
      expand: true,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "txt-icon",
          label: bind(bluetoothService7, "isPowered").as((isEnabled) => isEnabled ? "\u{F00AF}" : "\u{F00B2}")
        }
      )
    }
  );
};
var NotificationsButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(notifdService10, "dontDisturb").as(
        (dnd) => `dashboard-button notifications ${dnd ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          notifdService10.set_dont_disturb(!notifdService10.dontDisturb);
        }
      },
      tooltipText: "Toggle Notifications",
      expand: true,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "txt-icon",
          label: bind(notifdService10, "dontDisturb").as((dnd) => dnd ? "\u{F009B}" : "\u{F009A}")
        }
      )
    }
  );
};
var PlaybackButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(audioService11.defaultSpeaker, "mute").as(
        (isMuted) => `dashboard-button playback ${isMuted ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          audioService11.defaultSpeaker.set_mute(!audioService11.defaultSpeaker.mute);
        }
      },
      tooltipText: "Toggle Mute (Playback)",
      expand: true,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "txt-icon",
          label: bind(audioService11.defaultSpeaker, "mute").as((isMuted) => isMuted ? "\u{F0581}" : "\u{F057E}")
        }
      )
    }
  );
};
var MicrophoneButton = () => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(audioService11.defaultMicrophone, "mute").as(
        (isMuted) => `dashboard-button input ${isMuted ? "disabled" : ""}`
      ),
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          audioService11.defaultMicrophone.set_mute(!audioService11.defaultMicrophone.mute);
        }
      },
      tooltipText: "Toggle Mute (Microphone)",
      expand: true,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: "txt-icon",
          label: bind(audioService11.defaultMicrophone, "mute").as((isMuted) => isMuted ? "\u{F036D}" : "\u{F036C}")
        }
      )
    }
  );
};

// src/components/menus/dashboard/controls/index.tsx
var Controls4 = ({ isEnabled }) => {
  if (!isEnabled) {
    return null;
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "dashboard-card controls-container",
      halign: Gtk4.Align.FILL,
      valign: Gtk4.Align.FILL,
      expand: true,
      children: [
        /* @__PURE__ */ jsx2(WifiButton, {}),
        /* @__PURE__ */ jsx2(BluetoothButton, {}),
        /* @__PURE__ */ jsx2(NotificationsButton, {}),
        /* @__PURE__ */ jsx2(PlaybackButton, {}),
        /* @__PURE__ */ jsx2(MicrophoneButton, {})
      ]
    }
  );
};

// src/services/system/gpuUsage/index.ts
var GpuUsageService = class {
  _updateFrequency;
  _gpuPoller;
  _isInitialized = false;
  _gpu = Variable(0);
  constructor({ frequency } = {}) {
    this._updateFrequency = frequency ?? Variable(2e3);
    this._calculateUsage = this._calculateUsage.bind(this);
    this._gpuPoller = new FunctionPoller(
      this._gpu,
      [],
      bind(this._updateFrequency),
      this._calculateUsage
    );
  }
  /**
   * Manually refreshes the GPU usage reading
   */
  refresh() {
    this._gpu.set(this._calculateUsage());
  }
  /**
   * Gets the GPU usage percentage variable
   *
   * @returns Variable containing GPU usage percentage (0-1)
   */
  get gpu() {
    return this._gpu;
  }
  /**
   * Calculates average GPU usage across all available GPUs
   *
   * @returns GPU usage as a decimal between 0 and 1
   */
  _calculateUsage() {
    try {
      const gpuStats = exec("gpustat --json");
      if (typeof gpuStats !== "string") {
        return 0;
      }
      const data = JSON.parse(gpuStats);
      const totalGpu = 100;
      const usedGpu = data.gpus.reduce((acc, gpu) => {
        return acc + gpu["utilization.gpu"];
      }, 0) / data.gpus.length;
      return this._divide([totalGpu, usedGpu]);
    } catch (error) {
      if (error instanceof Error) {
        console.error("Error getting GPU stats:", error.message);
      } else {
        console.error("Unknown error getting GPU stats");
      }
      return 0;
    }
  }
  /**
   * Converts usage percentage to decimal
   *
   * @param values - Tuple of [total, used] values
   * @returns Usage as decimal between 0 and 1
   */
  _divide([total, free]) {
    return free / total;
  }
  /**
   * Updates the polling frequency
   *
   * @param timerInMs - New polling interval in milliseconds
   */
  updateTimer(timerInMs) {
    this._updateFrequency.set(timerInMs);
  }
  /**
   * Initializes the GPU usage monitoring poller
   */
  initialize() {
    if (!this._isInitialized) {
      this._gpuPoller.initialize();
      this._isInitialized = true;
    }
  }
  /**
   * Stops the GPU usage polling
   */
  stopPoller() {
    this._gpuPoller.stop();
  }
  /**
   * Starts the GPU usage polling
   */
  startPoller() {
    this._gpuPoller.start();
  }
  /**
   * Cleans up resources and stops monitoring
   */
  destroy() {
    this._gpuPoller.stop();
    this._gpu.drop();
    this._updateFrequency.drop();
  }
};
var gpuUsage_default = GpuUsageService;

// src/components/menus/dashboard/stats/helpers.ts
var { terminal } = configuration_default;
var { interval: interval2, enabled, enable_gpu } = configuration_default.menus.dashboard.stats;
var { paths: paths2 } = configuration_default.bar.customModules.storage;
var gpuService = new gpuUsage_default();
var cpuService2 = new cpuUsage_default();
var ramService2 = new ramUsage_default();
var storageService2 = new storage_default3({ pathsToMonitor: paths2 });
var handleClick3 = () => {
  app_default.get_window("dashboardmenu")?.set_visible(false);
  execAsync(`bash -c "${terminal} -e btop"`).catch((err) => `Failed to open btop: ${err}`);
};
var monitorInterval = () => {
  interval2.subscribe(() => {
    ramService2.updateTimer(interval2.get());
    cpuService2.updateTimer(interval2.get());
    storageService2.frequency = interval2.get();
  });
};
var monitorStatsEnabled = () => {
  enabled.subscribe(() => {
    if (!enabled.get()) {
      ramService2.stopPoller();
      cpuService2.stopPoller();
      gpuService.stopPoller();
      storageService2.stopPoller();
      return;
    }
    if (enable_gpu.get()) {
      gpuService.startPoller();
    }
    ramService2.startPoller();
    cpuService2.startPoller();
    storageService2.startPoller();
  });
};
var monitorGpuTrackingEnabled = () => {
  enable_gpu.subscribe((gpuEnabled) => {
    if (gpuEnabled) {
      return gpuService.startPoller();
    }
    gpuService.stopPoller();
  });
};
var setupDashboardMonitoring = () => {
  storageService2.round = true;
  if (enabled.get()) {
    ramService2.startPoller();
    cpuService2.startPoller();
    storageService2.startPoller();
  }
  if (enabled.get() && enable_gpu.get()) {
    gpuService.startPoller();
  } else {
    gpuService.stopPoller();
  }
  monitorInterval();
  monitorStatsEnabled();
  monitorGpuTrackingEnabled();
};

// src/components/menus/dashboard/stats/StatBars.tsx
var { enable_gpu: enable_gpu2 } = configuration_default.menus.dashboard.stats;
var StatBar = ({ icon: icon14, value, label: label16, stat }) => {
  return /* @__PURE__ */ jsxs("box", { vertical: true, children: [
    /* @__PURE__ */ jsxs("box", { className: `stat ${stat}`, valign: Gtk4.Align.CENTER, hexpand: true, children: [
      /* @__PURE__ */ jsx2("button", { children: /* @__PURE__ */ jsx2("label", { className: "txt-icon", label: icon14 }) }),
      /* @__PURE__ */ jsx2(
        "button",
        {
          onClick: (_, self) => {
            if (isPrimaryClick(self)) {
              handleClick3();
            }
          },
          children: /* @__PURE__ */ jsx2("levelbar", { className: "stats-bar", value, valign: Gtk4.Align.CENTER, hexpand: true })
        }
      )
    ] }),
    /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.END, children: /* @__PURE__ */ jsx2("label", { className: `stat-value ${stat}`, label: label16 }) })
  ] });
};
var GpuStat = () => {
  return /* @__PURE__ */ jsx2("box", { children: bind(enable_gpu2).as((enabled2) => {
    if (!enabled2) {
      return /* @__PURE__ */ jsx2("box", {});
    }
    gpuService.initialize();
    return /* @__PURE__ */ jsx2(
      StatBar,
      {
        icon: "\u{F08AE}",
        stat: "gpu",
        value: bind(gpuService.gpu),
        label: bind(gpuService.gpu).as((gpuUsage) => `${Math.floor(gpuUsage * 100)}%`)
      }
    );
  }) });
};
var CpuStat = () => {
  cpuService2.initialize();
  return /* @__PURE__ */ jsx2(
    StatBar,
    {
      icon: "\uF4BC",
      stat: "cpu",
      value: bind(cpuService2.cpu).as((cpuUsage) => Math.round(cpuUsage) / 100),
      label: bind(cpuService2.cpu).as((cpuUsage) => `${Math.round(cpuUsage)}%`)
    }
  );
};
var RamStat = () => {
  ramService2.initialize();
  return /* @__PURE__ */ jsx2(
    StatBar,
    {
      icon: "\uEFC5",
      stat: "ram",
      value: bind(ramService2.ram).as((ramUsage) => ramUsage.percentage / 100),
      label: bind(ramService2.ram).as(
        (ramUsage) => `${renderResourceLabel("used/total", ramUsage, true)}`
      )
    }
  );
};
var StorageStat = () => {
  storageService2.initialize();
  return /* @__PURE__ */ jsx2(
    StatBar,
    {
      icon: "\u{F02CA}",
      stat: "storage",
      value: bind(storageService2.storage).as((storageUsage) => storageUsage.percentage / 100),
      label: bind(storageService2.storage).as(
        (storageUsage) => renderResourceLabel("used/total", storageUsage, true)
      )
    }
  );
};

// src/components/menus/dashboard/stats/index.tsx
var Stats = ({ isEnabled }) => {
  if (!isEnabled) {
    return null;
  }
  setupDashboardMonitoring();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "dashboard-card stats-container",
      valign: Gtk4.Align.FILL,
      halign: Gtk4.Align.FILL,
      expand: true,
      vertical: true,
      children: [
        /* @__PURE__ */ jsx2(CpuStat, {}),
        /* @__PURE__ */ jsx2(RamStat, {}),
        /* @__PURE__ */ jsx2(GpuStat, {}),
        /* @__PURE__ */ jsx2(StorageStat, {})
      ]
    }
  );
};

// src/components/menus/dashboard/directories/Sections.tsx
var LeftSection = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "section left", vertical: true, expand: true, children });
};
var RightSection = ({ children }) => {
  return /* @__PURE__ */ jsx2("box", { className: "section right", vertical: true, expand: true, children });
};

// src/components/menus/dashboard/directories/DirectoryLinks.tsx
var { left: left4, right: right3 } = configuration_default.menus.dashboard.directories;
var DirectoryLink = ({ directoryItem, ...props }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      ...props,
      onClick: (_, event) => {
        if (isPrimaryClick(event)) {
          app_default.get_window("dashboardmenu")?.set_visible(false);
          execAsync(directoryItem.command.get());
        }
      },
      children: /* @__PURE__ */ jsx2("label", { label: bind(directoryItem.label), halign: Gtk4.Align.START })
    }
  );
};
var LeftLink1 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link left top", directoryItem: left4.directory1 });
};
var LeftLink2 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link left middle", directoryItem: left4.directory2 });
};
var LeftLink3 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link left bottom", directoryItem: left4.directory3 });
};
var RightLink1 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link right top", directoryItem: right3.directory1 });
};
var RightLink2 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link right middle", directoryItem: right3.directory2 });
};
var RightLink3 = () => {
  return /* @__PURE__ */ jsx2(DirectoryLink, { className: "directory-link right bottom", directoryItem: right3.directory3 });
};

// src/components/menus/dashboard/directories/index.tsx
var Directories = ({ isEnabled }) => {
  if (!isEnabled) {
    return null;
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "dashboard-card directories-container",
      valign: Gtk4.Align.FILL,
      halign: Gtk4.Align.FILL,
      expand: true,
      children: [
        /* @__PURE__ */ jsxs(LeftSection, { children: [
          /* @__PURE__ */ jsx2(LeftLink1, {}),
          /* @__PURE__ */ jsx2(LeftLink2, {}),
          /* @__PURE__ */ jsx2(LeftLink3, {})
        ] }),
        /* @__PURE__ */ jsxs(RightSection, { children: [
          /* @__PURE__ */ jsx2(RightLink1, {}),
          /* @__PURE__ */ jsx2(RightLink2, {}),
          /* @__PURE__ */ jsx2(RightLink3, {})
        ] })
      ]
    }
  );
};

// src/components/menus/dashboard/index.tsx
var { controls, shortcuts, stats, directories } = configuration_default.menus.dashboard;
var { transition: transition9 } = configuration_default.menus;
var dashboard_default4 = () => {
  const dashboardBinding = Variable.derive(
    [bind(controls.enabled), bind(shortcuts.enabled), bind(stats.enabled), bind(directories.enabled)],
    (isControlsEnabled, isShortcutsEnabled, isStatsEnabled, isDirectoriesEnabled) => {
      return [
        /* @__PURE__ */ jsx2("box", { className: "dashboard-content-container", vertical: true, children: /* @__PURE__ */ jsxs("box", { className: "dashboard-content-items", vertical: true, children: [
          /* @__PURE__ */ jsx2(Profile, {}),
          /* @__PURE__ */ jsx2(Shortcuts, { isEnabled: isShortcutsEnabled }),
          /* @__PURE__ */ jsx2(Controls4, { isEnabled: isControlsEnabled }),
          /* @__PURE__ */ jsx2(Directories, { isEnabled: isDirectoriesEnabled }),
          /* @__PURE__ */ jsx2(Stats, { isEnabled: isStatsEnabled })
        ] }) })
      ];
    }
  );
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "dashboardmenu",
      transition: bind(transition9).as((transition10) => RevealerTransitionMap[transition10]),
      onDestroy: () => {
        dashboardBinding.drop();
      },
      children: /* @__PURE__ */ jsx2("box", { className: "dashboard-menu-content", css: "padding: 1px; margin: -1px;", vexpand: false, children: dashboardBinding() })
    }
  );
};

// src/components/menus/powerDropdown/button.tsx
var { confirmation: confirmation2, shutdown: shutdown3, logout: logout3, sleep: sleep3, reboot: reboot3, showLabel } = configuration_default.menus.power;
var PowerButton = (action) => {
  const handleClick4 = (action2) => {
    const actions = {
      shutdown: shutdown3.get(),
      reboot: reboot3.get(),
      logout: logout3.get(),
      sleep: sleep3.get()
    };
    app_default.get_window("powerdropdownmenu")?.set_visible(false);
    if (!confirmation2.get()) {
      execAsync(actions[action2]).catch(
        (err) => console.error(`Failed to execute ${action2} command. Error: ${err}`)
      );
    } else {
      actions_default.customAction(action2, actions[action2]);
    }
  };
  const powerIconMap = {
    shutdown: "\u{F0425}",
    reboot: "\u{F0709}",
    logout: "\u{F0FC5}",
    sleep: "\u{F0904}"
  };
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: bind(showLabel).as(
        (showLbl) => `power-menu-button ${action} ${!showLbl ? "no-label" : ""}`
      ),
      onClicked: () => handleClick4(action),
      children: /* @__PURE__ */ jsx2("box", { vertical: false, children: bind(showLabel).as((showLbl) => {
        if (showLbl) {
          return [
            /* @__PURE__ */ jsx2(
              "label",
              {
                className: `power-button-icon ${action}-icon txt-icon`,
                label: powerIconMap[action]
              }
            ),
            /* @__PURE__ */ jsx2(
              "label",
              {
                halign: Gtk4.Align.CENTER,
                hexpand: true,
                className: `power-button-label ${action}-label show-label`,
                label: capitalizeFirstLetter(action)
              }
            )
          ];
        }
        return [
          /* @__PURE__ */ jsx2(
            "label",
            {
              className: `power-button-icon ${action}-icon no-label txt-icon`,
              label: powerIconMap[action]
            }
          )
        ];
      }) })
    }
  );
};

// src/components/menus/powerDropdown/index.tsx
var powerDropdown_default = () => {
  return /* @__PURE__ */ jsx2(
    dropdown_default,
    {
      name: "powerdropdownmenu",
      transition: bind(configuration_default.menus.transition).as((transition10) => RevealerTransitionMap[transition10]),
      children: /* @__PURE__ */ jsx2("box", { className: "menu-items power-dropdown", children: /* @__PURE__ */ jsxs("box", { className: "menu-items-container power-dropdown", vertical: true, hexpand: true, children: [
        PowerButton("shutdown"),
        PowerButton("reboot"),
        PowerButton("logout"),
        PowerButton("sleep")
      ] }) })
    }
  );
};

// src/components/menus/index.ts
var DropdownMenus = [
  audio_default,
  network_default4,
  bluetooth_default4,
  media_default5,
  notifications_default6,
  calendar_default,
  energy_default,
  dashboard_default4,
  powerDropdown_default
];
var StandardWindows = [power_default5, verification_default];

// app.ts
var hyprland = AstalHyprland19.get_default();
var initializeStartupScripts = () => {
  execAsync(`python3 ${SRC_DIR}/scripts/bluetooth.py`).catch(
    (err) => console.error("Failed to initialize bluetooth script:", err)
  );
};
var initializeMenus = () => {
  StandardWindows.forEach((window) => {
    return window();
  });
  DropdownMenus.forEach((window) => {
    return window();
  });
  DropdownMenus.forEach((window) => {
    const windowName = window.name.replace(/_default.*/, "").concat("menu").toLowerCase();
    if (!isDropdownMenu(windowName)) {
      return;
    }
    handleRealization(windowName);
  });
};
app_default.start({
  instanceName: "hyprpanel",
  requestHandler(request, res) {
    runCLI(request, res);
  },
  async main() {
    try {
      initializeStartupScripts();
      notifications_default5();
      osd_default2();
      const barsForMonitors = await forMonitors(Bar);
      barsForMonitors.forEach((bar) => bar);
      settings_default();
      initializeMenus();
      initializeSystemBehaviors();
    } catch (error) {
      console.error("Error during application initialization:", error);
    }
  }
});
hyprland.connect("monitor-added", () => {
  const { restartCommand: restartCommand3 } = configuration_default.hyprpanel;
  if (configuration_default.hyprpanel.restartAgs.get()) {
    SystemUtilities.bash(restartCommand3.get());
  }
});
//# sourceMappingURL=data:application/json;base64,
